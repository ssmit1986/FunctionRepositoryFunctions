Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"PacletDirectoryAdd", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"<<", "FunctionRepo`"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[1]:=",ExpressionUUID->"db0bf3fb-3968-4b36-8211-5cb1fa482ae8"],

Cell[CellGroupData[{

Cell["conditionedMultinormalDistribution", \
"Subsection",ExpressionUUID->"d74078a0-641e-4aa0-a1a8-445f4149fb05"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "conditionedMultinormalDistribution"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"0784d209-d22f-45cd-b95f-ceab89a70fef"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"conditionedMultinormalDistribution[dist, {i1 -> \
val1, ...}, {j1, j2, ...}] gives the {j1, j2, ...} marginal of dist when the \
indices {i1, ...} are conditioned to values {val1, ...}\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist_", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ":=", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist"}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist_", ",", 
                    RowBox[{"{", "}"}], ",", "All"}], "]"}], ":=", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist"}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist_", ",", 
                    RowBox[{"{", "}"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals_"}], "]"}], ":=", 
                    RowBox[{"MarginalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist_", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rule_Rule", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rest___"}], "]"}], ":=", 
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "Thread", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rule", "]"}], "}"}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rest"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"MultinormalDistribution"},
                    "InactiveHead",
                    BaseStyle->"Inactive",
                    SyntaxForm->"Symbol",
                    Tooltip->"Inactive[MultinormalDistribution]"], "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov_", "?", "SquareMatrixQ"}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rest___"}], "]"}], ":=", 
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"MultinormalDistribution"},
                    "InactiveHead",
                    BaseStyle->"Inactive",
                    SyntaxForm->"Symbol",
                    Tooltip->"Inactive[MultinormalDistribution]"], "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}]}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov"}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rest"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
head", ":", "MultinormalDistribution"}], ")"}], "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu_", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`cov_"}], 
                    "]"}], ")"}], "?", "DistributionParameterQ"}], "|", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
head", ":", 
                    RowBox[{
                    "Inactive", "[", "MultinormalDistribution", "]"}]}], 
                    ")"}], "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu_", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`cov_"}], 
                    "]"}], "/;", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
lm", "=", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
lm", "===", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}]}], "&&", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
lm", ">", "1"}]}]}], "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Integer", "\[Rule]", "_"}], ")"}], ".."}], 
                    "}"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals", ":", 
                    RowBox[{"_Integer", "|", 
                    RowBox[{"{", "__Integer", "}"}], "|", "All"}], ":", 
                    "All"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
eval", "=", 
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`cov"}], 
                    "}"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`cov"}], 
                    "}"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m_", "?", "VectorQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
c_", "?", "MatrixQ"}]}], "}"}], "\[RuleDelayed]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
head", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`c"}], 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m_", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`var_"}], 
                    "}"}], "\[RuleDelayed]", 
                    RowBox[{"NormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m", ",", 
                    SqrtBox[
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
var"]}], "]"}]}]}], "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "ListQ", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
eval", "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu_", "?", "VectorQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov_", "?", "SquareMatrixQ"}]}], "}"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Integer", "\[Rule]", "_"}], ")"}], ".."}], 
                    "}"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals", ":", 
                    RowBox[{"_Integer", "|", 
                    RowBox[{"{", "__Integer", "}"}], "|", "All"}], ":", 
                    "All"}]}], "]"}], "/;", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"DuplicateFreeQ", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",",
                     "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "}"}], "]"}], "]"}], ",", 
                    RowBox[{"False", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    "conditionedMultinormalDistribution", "::", "dupIndex"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",",
                     "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "]"}], ";", "False"}], ")"}]}]}], "]"}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim", "=", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", "]"}]}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`dist", 
                    ",", "FunctionRepo`conditionedMultinormalDistribution`\
Private`sparseQ", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
numericQ"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ", "=", 
                    RowBox[{
                    RowBox[{
                    "Head", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}], "===", "SparseArray"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ", "=", 
                    RowBox[{
                    RowBox[{
                    "Head", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}], "===", "StructuredArray"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup", "=", 
                    RowBox[{"AssociationThread", "[", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",",
                     "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim", ",", "1"}], "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop", "=", 
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup", "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues", "=", 
                    RowBox[{
                    "Values", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup", "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
numericQ", "=", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", ",", "NumericQ"}], "]"}], "&&", 
                    RowBox[{"VectorQ", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues", ",", "NumericQ"}], "]"}]}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"All", "\[RuleDelayed]", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{
                    "Range", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim", "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop"}], "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
i_Integer", "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
i", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`dim", ",", 
                    "1"}], "]"}], "}"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
ints_List", "\[RuleDelayed]", 
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
ints", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`dim", 
                    ",", "1"}], "]"}]}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", "\[LeftDoubleBracket]", "#1", "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop"}], "}"}]}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop"}], "\[RightDoubleBracket]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop"}], "\[RightDoubleBracket]"}]}], "}"}]}], "}"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", "=", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
numericQ", "&&", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ"}], ",", 
                    RowBox[{"LinearSolve", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], "]"}],
                     ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
numericQ", "&&", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ"}], ",", 
                    RowBox[{"LinearSolve", "[", 
                    RowBox[{"SparseArray", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], "]"}],
                     "]"}], ",", "True", ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv", "=", 
                    RowBox[{"Inverse", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv", ".", "#1"}], "&"}]}], "]"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", "=", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ".", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues", "-", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
                    "]"}]}]}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ".", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ", ",", 
                    RowBox[{"SparseArray", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], "]"}],
                     "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    "\[RuleDelayed]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    "Transpose", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m", "]"}], "+", "FunctionRepo`conditionedMultinormalDistribution`Private`m"}],
                     "2"]}]}], "]"}]}], "}"}], ",", 
                    StyleBox[
                    RowBox[{"LinearSolve", "::", "exanexb"}], 
                    "MessageName"]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerQ", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals", "]"}], ",", 
                    RowBox[{
                    "Flatten", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ", ",", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SymmetrizedArray", "[", 
                    RowBox[{"#1", ",", "Automatic", ",", 
                    RowBox[{"Symmetric", "[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "]"}], "&"}], 
                    ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", ",", "2"}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist"}], "]"}]}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "]"}], "<", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim"}], ",", 
                    RowBox[{"False", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    "conditionedMultinormalDistribution", "::", "noDim"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
                    "]"}], ";", "False"}], ")"}]}]}], "]"}], "&&", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}], "===", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"FunctionRepo`conditionedMultinormalDistribution\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"conditionedMultinormalDistribution[dist, {i1 -> \
val1, ...}, {j1, j2, ...}] gives the {j1, j2, ...} marginal of dist when the \
indices {i1, ...} are conditioned to values {val1, ...}\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "conditionedMultinormalDistribution[dist, {i1 -> val1, ...}, {j1, j2, \
...}] gives the {j1, j2, ...} marginal of dist when the indices {i1, ...} are \
conditioned to values {val1, ...}", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`conditionedMultinormalDistribution, {
      FunctionRepo`conditionedMultinormalDistribution[
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          Blank[]], {}] :> 
       FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
       FunctionRepo`conditionedMultinormalDistribution[
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          Blank[]], {}, All] :> 
       FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
       FunctionRepo`conditionedMultinormalDistribution[
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          Blank[]], {}, 
         Pattern[
         FunctionRepo`conditionedMultinormalDistribution`Private`marginals, 
          Blank[]]] :> 
       MarginalDistribution[
        FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
         FunctionRepo`conditionedMultinormalDistribution`Private`marginals], 
       FunctionRepo`conditionedMultinormalDistribution[
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          Blank[]], 
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`rule, 
          Blank[Rule]], 
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`rest, 
          BlankNullSequence[]]] :> 
       FunctionRepo`conditionedMultinormalDistribution[
        FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
         Flatten[{
           Thread[
           FunctionRepo`conditionedMultinormalDistribution`Private`rule]}], 
         FunctionRepo`conditionedMultinormalDistribution`Private`rest], 
       FunctionRepo`conditionedMultinormalDistribution[
         Inactive[MultinormalDistribution][
          PatternTest[
           Pattern[
           FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
            Blank[]], SquareMatrixQ]], 
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`rest, 
          BlankNullSequence[]]] :> 
       FunctionRepo`conditionedMultinormalDistribution[
         Inactive[MultinormalDistribution][
          ConstantArray[0, 
           Length[
           FunctionRepo`conditionedMultinormalDistribution`Private`cov]], 
          FunctionRepo`conditionedMultinormalDistribution`Private`cov], 
         FunctionRepo`conditionedMultinormalDistribution`Private`rest], 
       FunctionRepo`conditionedMultinormalDistribution[
         Alternatives[
          PatternTest[
           Pattern[
           FunctionRepo`conditionedMultinormalDistribution`Private`head, 
            MultinormalDistribution][
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             Blank[]], 
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
             Blank[]]], DistributionParameterQ], 
          Condition[
           Pattern[
           FunctionRepo`conditionedMultinormalDistribution`Private`head, 
            Inactive[MultinormalDistribution]][
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             Blank[]], 
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
             Blank[]]], 
           
           With[{FunctionRepo`conditionedMultinormalDistribution`Private`lm = 
             Length[FunctionRepo`conditionedMultinormalDistribution`Private`\
mu]}, 
            And[
            FunctionRepo`conditionedMultinormalDistribution`Private`lm === 
             Length[FunctionRepo`conditionedMultinormalDistribution`Private`\
cov], FunctionRepo`conditionedMultinormalDistribution`Private`lm > 1]]]], 
         Pattern[
         FunctionRepo`conditionedMultinormalDistribution`Private`rules, {
           Repeated[Blank[Integer] -> Blank[]]}], 
         Optional[
          Pattern[
          FunctionRepo`conditionedMultinormalDistribution`Private`marginals, 
           Alternatives[
            Blank[Integer], {
             BlankSequence[Integer]}, All]], All]] :> 
       With[{FunctionRepo`conditionedMultinormalDistribution`Private`eval = 
          FunctionRepo`conditionedMultinormalDistribution[{
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             FunctionRepo`conditionedMultinormalDistribution`Private`cov}, 
            FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
            FunctionRepo`conditionedMultinormalDistribution`Private`marginals]\
}, 
         Condition[
          Replace[
           
           FunctionRepo`conditionedMultinormalDistribution[{
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             FunctionRepo`conditionedMultinormalDistribution`Private`cov}, 
            FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
            FunctionRepo`conditionedMultinormalDistribution`Private`marginals]\
, {{
              PatternTest[
               Pattern[
               FunctionRepo`conditionedMultinormalDistribution`Private`m, 
                Blank[]], VectorQ], 
              PatternTest[
               Pattern[
               FunctionRepo`conditionedMultinormalDistribution`Private`c, 
                Blank[]], MatrixQ]} :> 
            FunctionRepo`conditionedMultinormalDistribution`Private`head[
             FunctionRepo`conditionedMultinormalDistribution`Private`m, 
              FunctionRepo`conditionedMultinormalDistribution`Private`c], {
              Pattern[
              FunctionRepo`conditionedMultinormalDistribution`Private`m, 
               Blank[]], 
              Pattern[
              FunctionRepo`conditionedMultinormalDistribution`Private`var, 
               Blank[]]} :> 
            NormalDistribution[
             FunctionRepo`conditionedMultinormalDistribution`Private`m, 
              Sqrt[
              FunctionRepo`conditionedMultinormalDistribution`Private`var]]}], 
          ListQ[
          FunctionRepo`conditionedMultinormalDistribution`Private`eval]]], 
       Condition[
         FunctionRepo`conditionedMultinormalDistribution[{
           PatternTest[
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             Blank[]], VectorQ], 
           PatternTest[
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
             Blank[]], SquareMatrixQ]}, 
          Pattern[
          FunctionRepo`conditionedMultinormalDistribution`Private`rules, {
            Repeated[Blank[Integer] -> Blank[]]}], 
          Optional[
           Pattern[
           FunctionRepo`conditionedMultinormalDistribution`Private`marginals, 
            Alternatives[
             Blank[Integer], {
              BlankSequence[Integer]}, All]], All]], 
         Replace[
          DuplicateFreeQ[
           Flatten[{
             Part[
             FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
              All, 1], 
             FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals}]], False :> (Message[
             MessageName[
             FunctionRepo`conditionedMultinormalDistribution, "dupIndex"], 
             Part[
             FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
              All, 1], 
             FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals]; False)]] :> 
       Module[{FunctionRepo`conditionedMultinormalDistribution`Private`dim = 
          Length[FunctionRepo`conditionedMultinormalDistribution`Private`mu], 
          FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep, 
          FunctionRepo`conditionedMultinormalDistribution`Private`indexDrop, 
          
          FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu, 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 
          FunctionRepo`conditionedMultinormalDistribution`Private`rulesNoDup, 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues, 
          FunctionRepo`conditionedMultinormalDistribution`Private`inv22, 
          FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          FunctionRepo`conditionedMultinormalDistribution`Private`sparseQ, 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ, 
          FunctionRepo`conditionedMultinormalDistribution`Private`numericQ}, 
         Condition[
         FunctionRepo`conditionedMultinormalDistribution`Private`sparseQ = 
           Head[FunctionRepo`conditionedMultinormalDistribution`Private`cov] === 
            SparseArray; 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ = 
           Head[FunctionRepo`conditionedMultinormalDistribution`Private`cov] === 
            StructuredArray; 
          FunctionRepo`conditionedMultinormalDistribution`Private`rulesNoDup = 
           AssociationThread[
             Mod[
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
               All, 1], 
              FunctionRepo`conditionedMultinormalDistribution`Private`dim, 1], 
             Part[
             FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
              All, 2]]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`indexDrop = 
           Keys[FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues = 
           Values[FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`numericQ = 
           And[
             MatrixQ[
             FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
              NumericQ], 
             VectorQ[
             FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues, NumericQ]]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep = 
           Replace[FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals, {All :> Complement[
                Range[
                FunctionRepo`conditionedMultinormalDistribution`Private`dim], 
                FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop], Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`i, 
                Blank[Integer]] :> {
                Mod[
                FunctionRepo`conditionedMultinormalDistribution`Private`i, 
                 FunctionRepo`conditionedMultinormalDistribution`Private`dim, 
                 1]}, Pattern[
               FunctionRepo`conditionedMultinormalDistribution`Private`ints, 
                Blank[List]] :> 
              Mod[FunctionRepo`conditionedMultinormalDistribution`Private`\
ints, FunctionRepo`conditionedMultinormalDistribution`Private`dim, 1]}]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu = 
           Map[Part[
             FunctionRepo`conditionedMultinormalDistribution`Private`mu, #]& \
, {FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep, 
              FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop}]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov = {{
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep, FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep], 
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop]}, {
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop, FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep], 
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
               
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop]}}; 
          FunctionRepo`conditionedMultinormalDistribution`Private`inv22 = 
           Which[
             And[
             FunctionRepo`conditionedMultinormalDistribution`Private`numericQ,
               FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ], 
             LinearSolve[
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 2]], 
             And[
             FunctionRepo`conditionedMultinormalDistribution`Private`numericQ,
               FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ], 
             LinearSolve[
              SparseArray[
               Part[
               FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 2]]], True, 
             
             With[{FunctionRepo`conditionedMultinormalDistribution`Private`\
inv = Inverse[
                 Part[
                 FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 2]]}, Dot[
              FunctionRepo`conditionedMultinormalDistribution`Private`inv, #]& \
]]; FunctionRepo`conditionedMultinormalDistribution`Private`dist = 
           Quiet[{Part[
               FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu, 1] + Dot[
                Part[
                FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 1, 2], 
                FunctionRepo`conditionedMultinormalDistribution`Private`inv22[
                 Subtract[
                 FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues, 
                  Part[
                  FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu, 2]]]], 
              Replace[
               Subtract[
                Part[
                FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 1, 1], 
                Dot[
                 Part[
                 FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 1, 2], 
                 If[
                 FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ, 
                  SparseArray[
                   
                   FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22[
                    Part[
                    FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 1]]], 
                  
                  FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22[
                   Part[
                   FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 1]]]]], PatternTest[
                 Pattern[
                 FunctionRepo`conditionedMultinormalDistribution`Private`m, 
                  Blank[]], MatrixQ[#, NumericQ]& ] :> 
               Divide[Transpose[
                  FunctionRepo`conditionedMultinormalDistribution`Private`m] + 
                 FunctionRepo`conditionedMultinormalDistribution`Private`m, 
                 2]]}, 
             MessageName[LinearSolve, "exanexb"]]; If[
            IntegerQ[
            FunctionRepo`conditionedMultinormalDistribution`Private`marginals]\
, 
            Flatten[
            FunctionRepo`conditionedMultinormalDistribution`Private`dist], 
            If[
            FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ, 
             MapAt[SymmetrizedArray[#, Automatic, 
               Symmetric[{1, 2}]]& , 
              FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
              2], FunctionRepo`conditionedMultinormalDistribution`Private`\
dist]], 
          And[
           Replace[
           Length[FunctionRepo`conditionedMultinormalDistribution`Private`\
rules] < FunctionRepo`conditionedMultinormalDistribution`Private`dim, 
            False :> (Message[
               MessageName[
               FunctionRepo`conditionedMultinormalDistribution, "noDim"], 
               Part[
               FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
                All, 1]]; False)], 
           Length[FunctionRepo`conditionedMultinormalDistribution`Private`cov]\
 === FunctionRepo`conditionedMultinormalDistribution`Private`dim]]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`conditionedMultinormalDistribution"], False]]], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"3f070ae8-aabb-4d22-a028-8ce0035ffc7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dist", "=", 
   RowBox[{"MultinormalDistribution", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Mu]1", ",", "\[Mu]2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[CapitalSigma]11", ",", "\[CapitalSigma]12"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\[CapitalSigma]12", ",", "\[CapitalSigma]22"}], "}"}]}], 
      "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"conditionedMultinormalDistribution", "[", 
  RowBox[{"dist", ",", 
   RowBox[{"2", "\[Rule]", "x2"}]}], "]"}]}], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"60977677-8764-4ab8-b907-4aa8c97ceadb"],

Cell[BoxData[
 RowBox[{"MultinormalDistribution", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Mu]1", "+", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x2", "-", "\[Mu]2"}], ")"}], " ", "\[CapitalSigma]12"}], 
      "\[CapitalSigma]22"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"\[CapitalSigma]11", "-", 
      FractionBox[
       SuperscriptBox["\[CapitalSigma]12", "2"], "\[CapitalSigma]22"]}], 
     "}"}], "}"}]}], "]"}]], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"91334517-8dfc-4fbc-a1af-ed7d5c92e6cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"conditionedMultinormalDistribution", "[", 
  RowBox[{"dist", ",", 
   RowBox[{"2", "\[Rule]", "x2"}], ",", "1"}], "]"}]], "Input",
 CellLabel->"In[33]:=",ExpressionUUID->"9f2fdb92-19fe-40ec-8bd4-e9ba6c55a6f9"],

Cell[BoxData[
 RowBox[{"NormalDistribution", "[", 
  RowBox[{
   RowBox[{"\[Mu]1", "+", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x2", "-", "\[Mu]2"}], ")"}], " ", "\[CapitalSigma]12"}], 
     "\[CapitalSigma]22"]}], ",", 
   SqrtBox[
    RowBox[{"\[CapitalSigma]11", "-", 
     FractionBox[
      SuperscriptBox["\[CapitalSigma]12", "2"], "\[CapitalSigma]22"]}]]}], 
  "]"}]], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"2b4cb879-5a6a-4df0-8041-2257d09aac88"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["convertDataFormat", \
"Subsection",ExpressionUUID->"dfd7d28f-35f2-42af-a9b6-5ec9a729667f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "convertDataFormat"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"33b38c0c-05f4-47b4-b352-aef21b1b7a2b"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"convertDataFormat[data, type] attempts to convert \
machine learning data to a different format to make it easier to switch out \
fitting methods.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" DownValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DownValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DownValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    RowBox[{
                    "_", "?", 
                    "FunctionRepo`convertDataFormat`Private`emptyDataQ"}], 
                    ",", 
                    
                    RowBox[{"\<\"Matrix\"\>", "|", "\<\"Vector\"\>", 
                    "|", "\<\"ListOfRules\"\>"}]}], "]"}], ":=", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    RowBox[{
                    "_", "?", 
                    "FunctionRepo`convertDataFormat`Private`emptyDataQ"}], 
                    ",", "\<\"RuleOfLists\"\>"}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", "}"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    RowBox[{
                    "_", "?", 
                    "FunctionRepo`convertDataFormat`Private`emptyDataQ"}], 
                    ",", "\<\"Assocation\"\>"}], "]"}], ":=", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\<\"Input\"\>", "\[Rule]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{"\<\"Output\"\>", "\[Rule]", 
                    RowBox[{"{", "}"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`data_", ",", 
                    "FunctionRepo`convertDataFormat`Private`typeOut_String"}],
                     "]"}], "/;", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`convertDataFormat`Private`$dataTypes", 
                    "]"}], ",", 
                    "FunctionRepo`convertDataFormat`Private`typeOut"}], 
                    "]"}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`typeIn", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{"KeyValueMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`data", ",", 
                    "#2"}], "]"}], ",", 
                    RowBox[{"Throw", "[", "#1", "]"}]}], "]"}], "&"}], ",", 
                    "FunctionRepo`convertDataFormat`Private`$dataTypes"}], 
                    "]"}], "]"}]}], ",", 
                    "FunctionRepo`convertDataFormat`Private`dataOut"}], "}"}],
                     ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`typeIn", "===", 
                    "FunctionRepo`convertDataFormat`Private`typeOut"}], ",", 
                    RowBox[{
                    "Return", "[", 
                    "FunctionRepo`convertDataFormat`Private`data", "]"}]}], 
                    "]"}], ";", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", "=", 
                    RowBox[{"Developer`ToPackedArray", "/@", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`\
convertToRuleOfLists", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`data", ",", 
                    "FunctionRepo`convertDataFormat`Private`typeIn"}], 
                    "]"}]}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"UnsameQ", "@@", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`convertDataFormat`Private`dataOut"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"convertDataFormat", "::", "uneqLen"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`typeOut", ",", 
                    RowBox[{"\<\"Matrix\"\>", "|", "\<\"Vector\"\>"}]}], 
                    "]"}], "&&", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", ",", 
                    RowBox[{"_", "\[Rule]", 
                    RowBox[{"_", "?", "MatrixQ"}]}]}], "]"}], "&&", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", 
                    "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", ">", "1"}], "&"}], ")"}]}]}], "}"}]}], 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"convertDataFormat", "::", "outDim"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", "=", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`\
convertToTargetType", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", ",", 
                    "FunctionRepo`convertDataFormat`Private`typeOut"}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", ",", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`$dataTypes", "[", 
                    "FunctionRepo`convertDataFormat`Private`typeOut", "]"}]}],
                     "]"}], ",", 
                    "FunctionRepo`convertDataFormat`Private`dataOut", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"convertDataFormat", "::", "convertFail"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`convertDataFormat`Private`typeIn", ",", 
                    "FunctionRepo`convertDataFormat`Private`typeOut"}], "]"}],
                     ";", "$Failed"}]}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    "StringQ", "[", 
                    "FunctionRepo`convertDataFormat`Private`typeIn", 
                    "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    "_", ",", "FunctionRepo`convertDataFormat`Private`out_"}],
                     "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"convertDataFormat", "::", "notImplemented"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`convertDataFormat`Private`out"}], "]"}], 
                    ";", "$Failed"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "convertDataFormat", "[", 
                    "FunctionRepo`convertDataFormat`Private`type_String", 
                    "]"}], "[", 
                    "FunctionRepo`convertDataFormat`Private`data_", "]"}], ":=", 
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`data", ",", 
                    "FunctionRepo`convertDataFormat`Private`type"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`convertDataFormat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"convertDataFormat[data, type] attempts to convert \
machine learning data to a different format to make it easier to switch out \
fitting methods.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "convertDataFormat[data, type] attempts to convert machine learning data \
to a different format to make it easier to switch out fitting methods.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`convertDataFormat, {
      FunctionRepo`convertDataFormat[
         PatternTest[
          Blank[], FunctionRepo`convertDataFormat`Private`emptyDataQ], 
         Alternatives["Matrix", "Vector", "ListOfRules"]] :> {}, 
       FunctionRepo`convertDataFormat[
         PatternTest[
          Blank[], FunctionRepo`convertDataFormat`Private`emptyDataQ], 
         "RuleOfLists"] :> ({} -> {}), FunctionRepo`convertDataFormat[
         PatternTest[
          Blank[], FunctionRepo`convertDataFormat`Private`emptyDataQ], 
         "Assocation"] :> Association["Input" -> {}, "Output" -> {}], 
       Condition[
         FunctionRepo`convertDataFormat[
          Pattern[FunctionRepo`convertDataFormat`Private`data, 
           Blank[]], 
          Pattern[FunctionRepo`convertDataFormat`Private`typeOut, 
           Blank[String]]], 
         MemberQ[
          Keys[FunctionRepo`convertDataFormat`Private`$dataTypes], 
          FunctionRepo`convertDataFormat`Private`typeOut]] :> 
       Module[{FunctionRepo`convertDataFormat`Private`typeIn = Catch[
            KeyValueMap[If[
              MatchQ[FunctionRepo`convertDataFormat`Private`data, #2], 
              Throw[#]]& , 
             FunctionRepo`convertDataFormat`Private`$dataTypes]], 
          FunctionRepo`convertDataFormat`Private`dataOut}, 
         Condition[
         If[FunctionRepo`convertDataFormat`Private`typeIn === 
            FunctionRepo`convertDataFormat`Private`typeOut, 
            Return[FunctionRepo`convertDataFormat`Private`data]]; 
          FunctionRepo`convertDataFormat`Private`dataOut = 
           Map[Developer`ToPackedArray, 
             FunctionRepo`convertDataFormat`Private`convertToRuleOfLists[
             FunctionRepo`convertDataFormat`Private`data, 
              FunctionRepo`convertDataFormat`Private`typeIn]]; If[
            Apply[UnsameQ, 
             Map[Length, FunctionRepo`convertDataFormat`Private`dataOut]], 
            Message[
              MessageName[FunctionRepo`convertDataFormat, "uneqLen"]]; 
            Return[$Failed]]; If[
            And[
             MatchQ[FunctionRepo`convertDataFormat`Private`typeOut, 
              Alternatives["Matrix", "Vector"]], 
             MatchQ[
             FunctionRepo`convertDataFormat`Private`dataOut, Blank[] -> 
              PatternTest[
                Blank[], MatrixQ]], 
             MatchQ[
              Dimensions[
               Part[FunctionRepo`convertDataFormat`Private`dataOut, 2]], {
               Blank[], 
               PatternTest[
                Blank[], # > 1& ]}]], Message[
              MessageName[FunctionRepo`convertDataFormat, "outDim"]]; 
            Return[$Failed]]; 
          FunctionRepo`convertDataFormat`Private`dataOut = 
           FunctionRepo`convertDataFormat`Private`convertToTargetType[
            FunctionRepo`convertDataFormat`Private`dataOut, 
             FunctionRepo`convertDataFormat`Private`typeOut]; If[
            MatchQ[FunctionRepo`convertDataFormat`Private`dataOut, 
             FunctionRepo`convertDataFormat`Private`$dataTypes[
             FunctionRepo`convertDataFormat`Private`typeOut]], 
            FunctionRepo`convertDataFormat`Private`dataOut, Message[
              MessageName[FunctionRepo`convertDataFormat, "convertFail"], 
              FunctionRepo`convertDataFormat`Private`typeIn, 
              FunctionRepo`convertDataFormat`Private`typeOut]; $Failed], 
          StringQ[FunctionRepo`convertDataFormat`Private`typeIn]]], 
       FunctionRepo`convertDataFormat[
         Blank[], 
         Pattern[FunctionRepo`convertDataFormat`Private`out, 
          Blank[]]] :> (Message[
          MessageName[FunctionRepo`convertDataFormat, "notImplemented"], 
          FunctionRepo`convertDataFormat`Private`out]; $Failed)}], 
    "SubValues" -> 
    Information`InformationValueForm[
     SubValues, FunctionRepo`convertDataFormat, {
      FunctionRepo`convertDataFormat[
         Pattern[FunctionRepo`convertDataFormat`Private`type, 
          Blank[String]]][
         Pattern[FunctionRepo`convertDataFormat`Private`data, 
          Blank[]]] :> 
       FunctionRepo`convertDataFormat[
        FunctionRepo`convertDataFormat`Private`data, 
         FunctionRepo`convertDataFormat`Private`type]}], "DefaultValues" -> 
    None, "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "FunctionRepo`convertDataFormat"], 
   False]]], "Output",
 CellLabel->"Out[11]=",ExpressionUUID->"74421e74-d4ae-4a42-84d9-cea0c5ece203"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["crossValidateModel", \
"Subsection",ExpressionUUID->"e35e1810-89ab-4aef-9e34-ee0d65c9d9ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "crossValidateModel"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"98de2084-dd51-4c5b-be4b-75e6154c6586"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"crossValidateModel[data, fitFunction] repeatedly \
splits the data into training/validation subsets; then fits a model using \
fitFunction on the training set and validates the result with the validation \
set.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data_", ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dist_", "?", 
                    "DistributionParameterQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data", ",", 
                    RowBox[{
                    RowBox[{"EstimatedDistribution", "[", 
                    RowBox[{
                    "#1", ",", 
                    "FunctionRepo`crossValidateModel`Private`dist"}], "]"}], 
                    "&"}], ",", 
                    "FunctionRepo`crossValidateModel`Private`opts"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data_", ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dists_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ListQ", "[", "#1", "]"}], "||", 
                    RowBox[{"AssociationQ", "[", "#1", "]"}]}], "&"}], 
                    ")"}]}], "/;", 
                    RowBox[{"AllTrue", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dists", ",", 
                    "DistributionParameterQ"}], "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data", ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`crossValidateModel`Private`dists", "]"}], 
                    ",", "Map", ",", "AssociationMap"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dist", ",", 
                    RowBox[{
                    RowBox[{"EstimatedDistribution", "[", 
                    RowBox[{
                    "#1", ",", 
                    "FunctionRepo`crossValidateModel`Private`dist"}], "]"}], 
                    "&"}]}], "]"}], ",", 
                    "FunctionRepo`crossValidateModel`Private`dists"}], "]"}], 
                    ",", "FunctionRepo`crossValidateModel`Private`opts"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data", ":", 
                    RowBox[{"_List", "|", "_Rule", "|", 
                    RowBox[{"_", "?", "AssociationQ"}]}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`trainingFun", 
                    ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`method", ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`nDat", "=", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dataSize", "[", 
                    "FunctionRepo`crossValidateModel`Private`data", "]"}]}], 
                    ",", "FunctionRepo`crossValidateModel`Private`rules", ",",
                     "FunctionRepo`crossValidateModel`Private`methodFun", ",",
                     "FunctionRepo`crossValidateModel`Private`\
validationFunction"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`method", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"OptionValue", "[", "Method", "]"}], "}"}], "]"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"LeaveOneOut\"\>", ",", 
                    "FunctionRepo`crossValidateModel`Private`rest___"}], 
                    "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"\<\"KFold\"\>", ",", 
                    
                    RowBox[{"\<\"Folds\"\>", "\[Rule]", 
                    "FunctionRepo`crossValidateModel`Private`nDat"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`crossValidateModel`Private`rest", 
                    "}"}], ",", 
                    RowBox[{"Except", "[", "\<\"Folds\"\>", "]"}]}], 
                    "]"}]}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"BootStrap\"\>", ",", 
                    "FunctionRepo`crossValidateModel`Private`rest___"}], 
                    "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"\<\"RandomSubSampling\"\>", ",", 
                    RowBox[{"\<\"SamplingFunction\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\<\"BootStrap\"\>", ",", 
                    RowBox[{"Lookup", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`crossValidateModel`Private`rest", 
                    "}"}], ",", "\<\"BootStrapSize\"\>", ",", 
                    "FunctionRepo`crossValidateModel`Private`nDat"}], "]"}]}],
                     "}"}]}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`crossValidateModel`Private`rest", 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"Runs\"\>", ",", "\<\"ParallelQ\"\>"}], 
                    "}"}]}], "]"}]}]}], "}"}]}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`rules", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{
                    "Rest", "[", 
                    "FunctionRepo`crossValidateModel`Private`method", "]"}], 
                    ",", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`crossValidateModel`Private`opts", 
                    "}"}], ",", 
                    RowBox[{"{", "\<\"ParallelQ\"\>", "}"}]}], "]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`methodFun", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    "First", "[", 
                    "FunctionRepo`crossValidateModel`Private`method", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"\<\"KFold\"\>", "\[RuleDelayed]", 
                    "FunctionRepo`crossValidateModel`Private`kFoldValidation"}\
], ",", 
                    
                    RowBox[{"\<\"RandomSubSampling\"\>", "\[RuleDelayed]", 
                    "FunctionRepo`crossValidateModel`Private`\
subSamplingValidation"}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`other_", 
                    "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"crossValidateModel", "::", "unknownMethod"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`crossValidateModel`Private`other"}], "]"}], 
                    ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}], ")"}]}]}], 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    "OptionValue", "[", "\<\"ValidationFunction\"\>", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`assoc_", "?", 
                    "AssociationQ"}], "\[RuleDelayed]", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
parseValidationOption", "/@", 
                    "FunctionRepo`crossValidateModel`Private`assoc"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`other_", 
                    "\[RuleDelayed]", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
parseValidationOption", "[", "FunctionRepo`crossValidateModel`Private`other", 
                    "]"}]}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`crossValidateModel`Private`trainingFun", 
                    "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "&"}], ")"}], "/@", 
                    "FunctionRepo`crossValidateModel`Private`trainingFun"}]}],
                     ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "=", 
                    RowBox[{"AssociationThread", "[", 
                    RowBox[{
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`crossValidateModel`Private`trainingFun", 
                    "]"}], ",", 
                    RowBox[{"Lookup", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", ",", 
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`crossValidateModel`Private`trainingFun", 
                    "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
defaultValidationFunction", "[", "]"}]}], "]"}]}], "]"}]}]}], "]"}]}], "]"}], 
                    ";", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`methodFun", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data", ",", 
                    "FunctionRepo`crossValidateModel`Private`nDat", ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`quietReporting", 
                    "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`listOperator1", 
                    "[", "FunctionRepo`crossValidateModel`Private`\
trainingFun", "]"}], "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`listOperator2", 
                    "[", "FunctionRepo`crossValidateModel`Private`\
validationFunction", "]"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`rules", ",", 
                    RowBox[{
                    "Options", "[", 
                    "FunctionRepo`crossValidateModel`Private`methodFun", 
                    "]"}]}], "]"}]}]}], "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Method", "\[Rule]", "\<\"KFold\"\>"}], ",", 
                    
                    RowBox[{"\<\"ValidationFunction\"\>", "\[Rule]", 
                    "Automatic"}], ",", 
                    RowBox[{"\<\"ParallelQ\"\>", "\[Rule]", "False"}]}], 
                    "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`crossValidateModel\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"crossValidateModel[data, fitFunction] repeatedly \
splits the data into training/validation subsets; then fits a model using \
fitFunction on the training set and validates the result with the validation \
set.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "crossValidateModel[data, fitFunction] repeatedly splits the data into \
training/validation subsets; then fits a model using fitFunction on the \
training set and validates the result with the validation set.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`crossValidateModel, {
      FunctionRepo`crossValidateModel[
         Pattern[FunctionRepo`crossValidateModel`Private`data, 
          Blank[]], 
         PatternTest[
          Pattern[FunctionRepo`crossValidateModel`Private`dist, 
           Blank[]], DistributionParameterQ], 
         Pattern[FunctionRepo`crossValidateModel`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`crossValidateModel[
        FunctionRepo`crossValidateModel`Private`data, 
         EstimatedDistribution[#, 
          FunctionRepo`crossValidateModel`Private`dist]& , 
         FunctionRepo`crossValidateModel`Private`opts], 
       FunctionRepo`crossValidateModel[
         Pattern[FunctionRepo`crossValidateModel`Private`data, 
          Blank[]], 
         Condition[
          PatternTest[
           Pattern[FunctionRepo`crossValidateModel`Private`dists, 
            Blank[]], Or[
            ListQ[#], 
            AssociationQ[#]]& ], 
          AllTrue[
          FunctionRepo`crossValidateModel`Private`dists, 
           DistributionParameterQ]], 
         Pattern[FunctionRepo`crossValidateModel`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`crossValidateModel[
        FunctionRepo`crossValidateModel`Private`data, 
         If[
          AssociationQ[FunctionRepo`crossValidateModel`Private`dists], Map, 
          AssociationMap][
          Function[
          FunctionRepo`crossValidateModel`Private`dist, 
           EstimatedDistribution[#, 
            FunctionRepo`crossValidateModel`Private`dist]& ], 
          FunctionRepo`crossValidateModel`Private`dists], 
         FunctionRepo`crossValidateModel`Private`opts], 
       FunctionRepo`crossValidateModel[
         Pattern[FunctionRepo`crossValidateModel`Private`data, 
          Alternatives[
           Blank[List], 
           Blank[Rule], 
           PatternTest[
            Blank[], AssociationQ]]], 
         Pattern[FunctionRepo`crossValidateModel`Private`trainingFun, 
          Except[
           Blank[List]]], 
         Pattern[FunctionRepo`crossValidateModel`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`crossValidateModel`Private`method, 
          FunctionRepo`crossValidateModel`Private`nDat = 
          FunctionRepo`crossValidateModel`Private`dataSize[
           FunctionRepo`crossValidateModel`Private`data], 
          FunctionRepo`crossValidateModel`Private`rules, 
          FunctionRepo`crossValidateModel`Private`methodFun, 
          FunctionRepo`crossValidateModel`Private`validationFunction}, 
         FunctionRepo`crossValidateModel`Private`method = Replace[
            Flatten[{
              OptionValue[Method]}], {{"LeaveOneOut", 
               Pattern[FunctionRepo`crossValidateModel`Private`rest, 
                BlankNullSequence[]]} :> {
              "KFold", "Folds" -> 
               FunctionRepo`crossValidateModel`Private`nDat, 
               Apply[Sequence, 
                FilterRules[{FunctionRepo`crossValidateModel`Private`rest}, 
                 Except["Folds"]]]}, {"BootStrap", 
               Pattern[FunctionRepo`crossValidateModel`Private`rest, 
                BlankNullSequence[]]} :> {
              "RandomSubSampling", "SamplingFunction" -> {"BootStrap", 
                 
                 Lookup[{FunctionRepo`crossValidateModel`Private`rest}, 
                  "BootStrapSize", 
                  FunctionRepo`crossValidateModel`Private`nDat]}, 
               Apply[Sequence, 
                
                FilterRules[{FunctionRepo`crossValidateModel`Private`rest}, {
                 "Runs", "ParallelQ"}]]}}]; 
         FunctionRepo`crossValidateModel`Private`rules = Join[
            Rest[FunctionRepo`crossValidateModel`Private`method], 
            
            FilterRules[{FunctionRepo`crossValidateModel`Private`opts}, {
             "ParallelQ"}]]; 
         FunctionRepo`crossValidateModel`Private`methodFun = Replace[
            First[FunctionRepo`crossValidateModel`Private`method], {
            "KFold" :> 
             FunctionRepo`crossValidateModel`Private`kFoldValidation, 
             "RandomSubSampling" :> 
             FunctionRepo`crossValidateModel`Private`subSamplingValidation, 
             Pattern[FunctionRepo`crossValidateModel`Private`other, 
               Blank[]] :> (Message[
                MessageName[FunctionRepo`crossValidateModel, "unknownMethod"],
                 FunctionRepo`crossValidateModel`Private`other]; 
              Return[$Failed])}]; 
         FunctionRepo`crossValidateModel`Private`validationFunction = Replace[
            OptionValue["ValidationFunction"], {PatternTest[
               Pattern[FunctionRepo`crossValidateModel`Private`assoc, 
                Blank[]], AssociationQ] :> 
             Map[FunctionRepo`crossValidateModel`Private`\
parseValidationOption, FunctionRepo`crossValidateModel`Private`assoc], 
             Pattern[FunctionRepo`crossValidateModel`Private`other, 
               Blank[]] :> 
             FunctionRepo`crossValidateModel`Private`parseValidationOption[
              FunctionRepo`crossValidateModel`Private`other]}]; If[
           AssociationQ[FunctionRepo`crossValidateModel`Private`trainingFun], 
           If[
            Not[
             AssociationQ[
             FunctionRepo`crossValidateModel`Private`validationFunction]], 
            FunctionRepo`crossValidateModel`Private`validationFunction = 
            Map[FunctionRepo`crossValidateModel`Private`validationFunction& , 
              FunctionRepo`crossValidateModel`Private`trainingFun], 
            FunctionRepo`crossValidateModel`Private`validationFunction = 
            AssociationThread[
              Keys[FunctionRepo`crossValidateModel`Private`trainingFun], 
              Lookup[
              FunctionRepo`crossValidateModel`Private`validationFunction, 
               Keys[FunctionRepo`crossValidateModel`Private`trainingFun], 
               
               FunctionRepo`crossValidateModel`Private`\
defaultValidationFunction[]]]]]; 
         FunctionRepo`crossValidateModel`Private`methodFun[
          FunctionRepo`crossValidateModel`Private`data, 
           FunctionRepo`crossValidateModel`Private`nDat, 
           FunctionRepo`crossValidateModel`Private`quietReporting[
            FunctionRepo`crossValidateModel`Private`listOperator1[
            FunctionRepo`crossValidateModel`Private`trainingFun]], 
           FunctionRepo`crossValidateModel`Private`listOperator2[
           FunctionRepo`crossValidateModel`Private`validationFunction], 
           Apply[Sequence, 
            FilterRules[FunctionRepo`crossValidateModel`Private`rules, 
             Options[FunctionRepo`crossValidateModel`Private`methodFun]]]]]}],
     "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     Method -> "KFold", "ValidationFunction" -> Automatic, "ParallelQ" -> 
      False}, "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`crossValidateModel"], False]]], "Output",
 CellLabel->"Out[12]=",ExpressionUUID->"88661fef-2937-4720-beb7-6d5df1da73c8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"PoissonDistribution", "[", "2", "]"}], ",", "100"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Histogram", "[", 
  RowBox[{"data", ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.781610902284114*^9, 3.7816109277192287`*^9}, {
  3.781611173709198*^9, 3.781611180206622*^9}, {3.7816116711764913`*^9, 
  3.781611675183671*^9}, {3.7816117183975105`*^9, 3.781611728390929*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"8528c3aa-c63e-44f6-8859-92cd72a89101"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.616], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.616], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-0.5, 0}, {0.5, 18.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{26.19213370696557, 
           62.746857485988784`}, {-56.4328997310255, 122.80666073838329`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 18]& ,
        TagBoxNote->"18"],
       StyleBox["18", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[18, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.5, 0}, {1.5, 26.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{62.096857485988785`, 
           98.651581265012}, {-135.80603771742938`, 122.80666073838323`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 26]& ,
        TagBoxNote->"26"],
       StyleBox["26", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[26, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{1.5, 0}, {2.5, 24.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{98.001581265012, 
           134.55630504403524`}, {-115.96275322082845`, 122.80666073838329`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 24]& ,
        TagBoxNote->"24"],
       StyleBox["24", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[24, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{2.5, 0}, {3.5, 21.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{133.9063050440352, 
           170.46102882305846`}, {-86.19782647592696, 122.80666073838329`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 21]& ,
        TagBoxNote->"21"],
       StyleBox["21", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[21, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{3.5, 0}, {4.5, 9.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{169.81102882305845`, 206.3657526020817}, {
           32.86188050367889, 122.80666073838329`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 9]& ,
        TagBoxNote->"9"],
       StyleBox["9", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[9, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{4.5, 0}, {5.5, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{205.71575260208164`, 242.27047638110486`}, {
           112.2350184900828, 122.80666073838329`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{10.5, 0}, {11.5, 1.}, "RoundingRadius" -> 0]},
          ImageSizeCache->{{421.144095276221, 457.69881905524414`}, {
           112.2350184900828, 122.80666073838329`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.74, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{-0.5, 11.5}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"612537d6-f985-4550-8541-e271cd8ce15a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"val", "=", 
   RowBox[{"crossValidateModel", "[", 
    RowBox[{"data", ",", 
     RowBox[{"PoissonDistribution", "[", "\[Lambda]", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"val", "//", "TableForm"}]}], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"c7566495-73d8-4323-bcb1-fa905a691565"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"FittedModel\"\>", "\[Rule]", 
         RowBox[{"PoissonDistribution", "[", "1.85`", "]"}]}], ",", 
        RowBox[{"\<\"ValidationResult\"\>", "\[Rule]", 
         "1.6031053551856296`"}]}], "\[RightAssociation]"}]},
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"FittedModel\"\>", "\[Rule]", 
         RowBox[{"PoissonDistribution", "[", "1.9375`", "]"}]}], ",", 
        RowBox[{"\<\"ValidationResult\"\>", "\[Rule]", 
         "1.766538729287263`"}]}], "\[RightAssociation]"}]},
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"FittedModel\"\>", "\[Rule]", 
         RowBox[{"PoissonDistribution", "[", "1.8875`", "]"}]}], ",", 
        RowBox[{"\<\"ValidationResult\"\>", "\[Rule]", 
         "1.4953056289244135`"}]}], "\[RightAssociation]"}]},
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"FittedModel\"\>", "\[Rule]", 
         RowBox[{"PoissonDistribution", "[", "1.9`", "]"}]}], ",", 
        RowBox[{"\<\"ValidationResult\"\>", "\[Rule]", 
         "2.0990511364549533`"}]}], "\[RightAssociation]"}]},
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"FittedModel\"\>", "\[Rule]", 
         RowBox[{"PoissonDistribution", "[", "1.875`", "]"}]}], ",", 
        RowBox[{"\<\"ValidationResult\"\>", "\[Rule]", 
         "1.7380317732858646`"}]}], "\[RightAssociation]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[6]//TableForm=",ExpressionUUID->"346ab19b-1257-4f32-8a4a-6b62f11a78e8"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["deleteContainedStrings", \
"Subsection",ExpressionUUID->"da8a948a-8e77-4887-90f5-94bf9f9dd812"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "deleteContainedStrings"}]], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"37e1ff57-ee62-4bff-ab0e-875919154b44"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"deleteContainedStrings[{str1, str2, ...}] deletes \
every string that is a substring of at least one other string in the list. \
Preserves ordering.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`deleteContainedStrings\"\
\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"deleteContainedStrings[{str1, str2, ...}] deletes \
every string that is a substring of at least one other string in the list. \
Preserves ordering.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "deleteContainedStrings[{str1, str2, ...}] deletes every string that is a \
substring of at least one other string in the list. Preserves ordering.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "FunctionRepo`deleteContainedStrings"], 
   False]]], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"84fb8ff9-a95f-441e-9057-4da2aad98987"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["firstMatchingValue", \
"Subsection",ExpressionUUID->"f0081c56-07a8-467c-89b8-c381ea514997"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "firstMatchingValue"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"583296a0-bd1e-4d8a-ba59-9b25c158a6f4"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"firstMatchingValue[{expr_1, expr_2, ...}, pattern] \
evalutates held expr_i in turn, returning the value of the first expression \
that evaluates to a result matching the pattern.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`patt_", ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`opt", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr", ",", 
                    "FunctionRepo`firstMatchingValue`Private`patt", ",", 
                    RowBox[{"Missing", "[", "\<\"NotFound\"\>", "]"}], ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    "FunctionRepo`firstMatchingValue`Private`opt"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`patt_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`default_", ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`opt", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr", ",", 
                    "FunctionRepo`firstMatchingValue`Private`patt", ",", 
                    "FunctionRepo`firstMatchingValue`Private`default", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    "FunctionRepo`firstMatchingValue`Private`opt"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr_", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`head", ":", 
                    RowBox[{"Rule", "|", "RuleDelayed"}]}], ")"}], "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`patt_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`transformation_"}\
], "]"}], ",", "FunctionRepo`firstMatchingValue`Private`default_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`lvl_", ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`firstMatchingValue`Private`matched", 
                    "}"}], ",", 
                    RowBox[{"FirstCase", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", 
                    "FunctionRepo`firstMatchingValue`Private`expr", "]"}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`possibleMatch_", 
                    "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`try", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`matched", "=", 
                    "True"}], ";", 
                    "FunctionRepo`firstMatchingValue`Private`possibleMatch"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`head", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`patt", ",", 
                    "FunctionRepo`firstMatchingValue`Private`transformation"}]\
, "]"}], ",", 
                    RowBox[{"_", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`matched", "=", 
                    "False"}], ")"}]}]}], "}"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"FunctionRepo`firstMatchingValue`Private`try", "/;", 
                    RowBox[{
                    "TrueQ", "[", 
                    "FunctionRepo`firstMatchingValue`Private`matched", 
                    "]"}]}]}], "]"}]}], ",", 
                    "FunctionRepo`firstMatchingValue`Private`default", ",", 
                    "FunctionRepo`firstMatchingValue`Private`lvl", ",", 
                    "FunctionRepo`firstMatchingValue`Private`opts"}], "]"}]}],
                     "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`otherPattern_", 
                    ",", "FunctionRepo`firstMatchingValue`Private`default_", 
                    ",", "FunctionRepo`firstMatchingValue`Private`lvl_", ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"FirstCase", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", 
                    "FunctionRepo`firstMatchingValue`Private`expr", "]"}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`possibleMatch_", 
                    "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`try", "=", 
                    "FunctionRepo`firstMatchingValue`Private`possibleMatch"}],
                     "}"}], ",", 
                    RowBox[{"FunctionRepo`firstMatchingValue`Private`try", "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`try", ",", 
                    "FunctionRepo`firstMatchingValue`Private`otherPattern"}], 
                    "]"}]}]}], "]"}]}], ",", 
                    "FunctionRepo`firstMatchingValue`Private`default", ",", 
                    "FunctionRepo`firstMatchingValue`Private`lvl", ",", 
                    "FunctionRepo`firstMatchingValue`Private`opts"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"Heads", "\[Rule]", "False"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "HoldAll", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`firstMatchingValue\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"firstMatchingValue[{expr_1, expr_2, ...}, pattern] \
evalutates held expr_i in turn, returning the value of the first expression \
that evaluates to a result matching the pattern.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "firstMatchingValue[{expr_1, expr_2, ...}, pattern] evalutates held \
expr_i in turn, returning the value of the first expression that evaluates to \
a result matching the pattern.", "Documentation" -> None, "OwnValues" -> None,
     "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`firstMatchingValue, {
      FunctionRepo`firstMatchingValue[
         Pattern[FunctionRepo`firstMatchingValue`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`patt, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`opt, 
          OptionsPattern[]]] :> 
       FunctionRepo`firstMatchingValue[
        FunctionRepo`firstMatchingValue`Private`expr, 
         FunctionRepo`firstMatchingValue`Private`patt, 
         Missing["NotFound"], {1}, 
         FunctionRepo`firstMatchingValue`Private`opt], 
       FunctionRepo`firstMatchingValue[
         Pattern[FunctionRepo`firstMatchingValue`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`patt, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`default, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`opt, 
          OptionsPattern[]]] :> 
       FunctionRepo`firstMatchingValue[
        FunctionRepo`firstMatchingValue`Private`expr, 
         FunctionRepo`firstMatchingValue`Private`patt, 
         FunctionRepo`firstMatchingValue`Private`default, {1}, 
         FunctionRepo`firstMatchingValue`Private`opt], 
       FunctionRepo`firstMatchingValue[
         Pattern[FunctionRepo`firstMatchingValue`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`head, 
          Alternatives[Rule, RuleDelayed]][
          Pattern[FunctionRepo`firstMatchingValue`Private`patt, 
           Blank[]], 
          Pattern[FunctionRepo`firstMatchingValue`Private`transformation, 
           Blank[]]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`default, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`lvl, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`firstMatchingValue`Private`matched}, 
         FirstCase[
          Unevaluated[FunctionRepo`firstMatchingValue`Private`expr], 
          Pattern[FunctionRepo`firstMatchingValue`Private`possibleMatch, 
            Blank[]] :> 
          With[{FunctionRepo`firstMatchingValue`Private`try = 
             Replace[FunctionRepo`firstMatchingValue`Private`matched = True; 
               FunctionRepo`firstMatchingValue`Private`possibleMatch, {
                FunctionRepo`firstMatchingValue`Private`head[
                FunctionRepo`firstMatchingValue`Private`patt, 
                 FunctionRepo`firstMatchingValue`Private`transformation], 
                Blank[] :> (FunctionRepo`firstMatchingValue`Private`matched = 
                 False)}]}, 
            Condition[FunctionRepo`firstMatchingValue`Private`try, 
             TrueQ[FunctionRepo`firstMatchingValue`Private`matched]]], 
          FunctionRepo`firstMatchingValue`Private`default, 
          FunctionRepo`firstMatchingValue`Private`lvl, 
          FunctionRepo`firstMatchingValue`Private`opts]], 
       FunctionRepo`firstMatchingValue[
         Pattern[FunctionRepo`firstMatchingValue`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`otherPattern, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`default, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`lvl, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`opts, 
          OptionsPattern[]]] :> FirstCase[
         Unevaluated[FunctionRepo`firstMatchingValue`Private`expr], 
         Pattern[FunctionRepo`firstMatchingValue`Private`possibleMatch, 
           Blank[]] :> 
         With[{FunctionRepo`firstMatchingValue`Private`try = 
            FunctionRepo`firstMatchingValue`Private`possibleMatch}, 
           Condition[FunctionRepo`firstMatchingValue`Private`try, 
            MatchQ[
            FunctionRepo`firstMatchingValue`Private`try, 
             FunctionRepo`firstMatchingValue`Private`otherPattern]]], 
         FunctionRepo`firstMatchingValue`Private`default, 
         FunctionRepo`firstMatchingValue`Private`lvl, 
         FunctionRepo`firstMatchingValue`Private`opts]}], "SubValues" -> None,
     "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {Heads -> False}, "Attributes" -> {HoldAll}, "FullName" -> 
    "FunctionRepo`firstMatchingValue"], False]]], "Output",
 CellLabel->"Out[16]=",ExpressionUUID->"43b72268-6591-42c5-ad86-3399c06878cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"firstMatchingValue", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Print", "[", "\"\<before\>\"", "]"}], ",", "10", ",", 
     RowBox[{"Print", "[", "\"\<after\>\"", "]"}]}], "}"}], ",", "_Integer"}],
   "]"}]], "Input",
 CellLabel->"In[44]:=",ExpressionUUID->"f41e503d-739e-4e0b-af4a-51a8b40b9b1b"],

Cell[BoxData["\<\"before\"\>"], "Print",
 CellLabel->
  "During evaluation of \
In[44]:=",ExpressionUUID->"6454f7f4-8528-4e08-9be3-b8b696ad487c"],

Cell[BoxData["10"], "Output",
 CellLabel->"Out[44]=",ExpressionUUID->"3ed8ad3f-4d9b-42f9-a0d0-6524af6da330"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", "2"}], ";"}], "\n", 
 RowBox[{"{", 
  RowBox[{"x", ",", "\[IndentingNewLine]", 
   RowBox[{"firstMatchingValue", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "2", ",", 
       RowBox[{"++", "x"}], ",", 
       RowBox[{"1", "+", "3"}], ",", "5"}], "}"}], ",", 
     RowBox[{"_Integer", "?", "OddQ"}]}], "]"}], ",", "\[IndentingNewLine]", 
   "x"}], "}"}]}], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"29421cbc-f709-476c-b19c-f1a36aa67e57"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "3"}], "}"}]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"eb2b5138-56d5-4d3b-95e7-b58003171614"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["kullbackLeiblerDivergence", \
"Subsection",ExpressionUUID->"e2779f55-4ae5-4ebd-b5b6-3be2e30b7a6c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "kullbackLeiblerDivergence"}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"18686fd2-517c-4c38-b65b-acb472f6cf45"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"kullbackLeiblerDivergence[P, Q] computes the \
Kullback-Leibler divergence from distribution Q to P\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"kullbackLeiblerDivergence", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p_", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    "0"}]},
                    {
                    RowBox[{
                    RowBox[{"kullbackLeiblerDivergence", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p_", "?", 
                    "DistributionParameterQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q_", "?", 
                    "DistributionParameterQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`opts", 
                    ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"$Assumptions", "=", 
                    RowBox[{"OptionValue", "[", "Assumptions", "]"}]}], "}"}],
                     ",", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
methodSpec", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "Method", "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`sym", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], "\[RuleDelayed]", 
                    RowBox[{
                    "{", "FunctionRepo`kullbackLeiblerDivergence`Private`sym",
                     "}"}]}]}], "]"}]}], ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`\
methodOpts", ",", "FunctionRepo`kullbackLeiblerDivergence`Private`domainp", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`\
domainq", ",", "FunctionRepo`kullbackLeiblerDivergence`Private`assumptions", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`rv", 
                    ",", "x"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q"}], 
                    "}"}], ",", "\[FormalX]"}], "]"}], ",", 
                    RowBox[{"x", "=", "\[FormalX]"}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`\
methodOpts"}], "}"}], "=", 
                    RowBox[{"TakeDrop", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
methodSpec", ",", "1"}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method", 
                    "=", 
                    RowBox[{
                    "First", "[", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method", 
                    "]"}]}], ";", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method", 
                    ",", "\[IndentingNewLine]", "Expectation", ",", "Null", 
                    ",", "\[IndentingNewLine]", "NExpectation", ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`rand", 
                    "=", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"RandomVariate", "[", 
                    RowBox[{"#1", ",", "5"}], "]"}], "&"}], ")"}], "/@", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q"}], 
                    "}"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"AllTrue", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`rand", 
                    ",", "ArrayQ"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    "kullbackLeiblerDivergence", "::", "randomSample"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q"}], 
                    "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}]}], 
                    "]"}], ",", "\[IndentingNewLine]", "_", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"kullbackLeiblerDivergence", "::", "method"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method"}],
                     "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`domainp", 
                    "=", 
                    RowBox[{
                    "DistributionDomain", "[", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", 
                    "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`domainq", 
                    "=", 
                    RowBox[{
                    "DistributionDomain", "[", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q", 
                    "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
assumptions", "=", 
                    RowBox[{"And", "@@", 
                    RowBox[{"DistributionParameterAssumptions", "/@", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q"}], 
                    "}"}]}]}]}], ";", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"Assuming", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
assumptions", ",", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
supportSubSetQ", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`domainp", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`\
domainq"}], "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", "True", ",", 
                    "Null", ",", "\[IndentingNewLine]", "False", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"kullbackLeiblerDivergence", "::", "supportPQ"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q"}], 
                    "]"}], ";", 
                    RowBox[{"Return", "[", "Undefined", "]"}]}], ",", 
                    "\[IndentingNewLine]", "_", ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    "kullbackLeiblerDivergence", "::", 
                    "supportValidationFail"}], "MessageName"], ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q"}], 
                    "]"}]}], "]"}], ";", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`rv", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`domainp", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`l", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
domainPattern", ".."}], "}"}]}], "\[RuleDelayed]", 
                    RowBox[{"Array", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`l", 
                    "]"}]}], "]"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "x"}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
assumptions", "=", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
assumptions", "&&", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Statistics`Library`RealIntegerQ", "=", 
                    RowBox[{
                    RowBox[{"#1", "\[Element]", 
                    TemplateBox[{},
                    "Integers"]}], "&"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "ListQ", "[", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`rv", 
                    "]"}], ",", 
                    RowBox[{"And", "@@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    "Statistics`DistributionsCommonDump`DomainMemberQ", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`domainp", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`rv"}]\
, "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    "Statistics`DistributionsCommonDump`DomainMemberQ", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`domainp", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`rv"}]\
, "]"}]}], "]"}]}], "]"}]}], "]"}]}], ";", 
                    RowBox[{"Assuming", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
assumptions", ",", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method", 
                    "[", 
                    RowBox[{
                    RowBox[{"Refine", "[", 
                    RowBox[{
                    RowBox[{"LogLikelihood", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    RowBox[{
                    "{", "FunctionRepo`kullbackLeiblerDivergence`Private`rv", 
                    "}"}]}], "]"}], "-", 
                    RowBox[{"LogLikelihood", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q", ",", 
                    RowBox[{
                    "{", "FunctionRepo`kullbackLeiblerDivergence`Private`rv", 
                    "}"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`rv", 
                    "\[Distributed]", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p"}], ",", 
                    RowBox[{
                    "Sequence", "@@", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
methodOpts"}]}], "]"}], ",", 
                    RowBox[{"TimeConstraint", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "10"}], "}"}]}]}], "]"}]}], "]"}]}]}], 
                    "]"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Method", "\[Rule]", "Expectation"}], ",", 
                    RowBox[{
                    "Assumptions", "\[RuleDelayed]", "$Assumptions"}]}], 
                    "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"FunctionRepo`kullbackLeiblerDivergence\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"kullbackLeiblerDivergence[P, Q] computes the \
Kullback-Leibler divergence from distribution Q to P\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "kullbackLeiblerDivergence[P, Q] computes the Kullback-Leibler divergence \
from distribution Q to P", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`kullbackLeiblerDivergence, {
      FunctionRepo`kullbackLeiblerDivergence[
         Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`p, 
          Blank[]], 
         Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`p, 
          Blank[]], 
         OptionsPattern[]] :> 0, FunctionRepo`kullbackLeiblerDivergence[
         PatternTest[
          Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`p, 
           Blank[]], DistributionParameterQ], 
         PatternTest[
          Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`q, 
           Blank[]], DistributionParameterQ], 
         Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`opts, 
          OptionsPattern[]]] :> 
       Block[{$Assumptions = OptionValue[Assumptions]}, 
         Module[{
          FunctionRepo`kullbackLeiblerDivergence`Private`methodSpec = Replace[
             OptionValue[Method], 
             Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`sym, 
               Except[
                Blank[List]]] :> {
              FunctionRepo`kullbackLeiblerDivergence`Private`sym}], 
           FunctionRepo`kullbackLeiblerDivergence`Private`method, 
           FunctionRepo`kullbackLeiblerDivergence`Private`methodOpts, 
           FunctionRepo`kullbackLeiblerDivergence`Private`domainp, 
           FunctionRepo`kullbackLeiblerDivergence`Private`domainq, 
           FunctionRepo`kullbackLeiblerDivergence`Private`assumptions, 
           FunctionRepo`kullbackLeiblerDivergence`Private`rv, $CellContext`x},
           If[
            
            FreeQ[{FunctionRepo`kullbackLeiblerDivergence`Private`p, 
              FunctionRepo`kullbackLeiblerDivergence`Private`q}, \[FormalX]], \
$CellContext`x = \[FormalX]]; {
            FunctionRepo`kullbackLeiblerDivergence`Private`method, 
             FunctionRepo`kullbackLeiblerDivergence`Private`methodOpts} = 
           TakeDrop[
            FunctionRepo`kullbackLeiblerDivergence`Private`methodSpec, 1]; 
          FunctionRepo`kullbackLeiblerDivergence`Private`method = 
           First[FunctionRepo`kullbackLeiblerDivergence`Private`method]; 
          Switch[FunctionRepo`kullbackLeiblerDivergence`Private`method, 
            Expectation, Null, NExpectation, 
            With[{FunctionRepo`kullbackLeiblerDivergence`Private`rand = Quiet[
                Map[
                RandomVariate[#, 5]& , {
                 FunctionRepo`kullbackLeiblerDivergence`Private`p, 
                  FunctionRepo`kullbackLeiblerDivergence`Private`q}]]}, 
             If[
              Not[
               AllTrue[
               FunctionRepo`kullbackLeiblerDivergence`Private`rand, ArrayQ]], 
              Message[
                MessageName[
                FunctionRepo`kullbackLeiblerDivergence, "randomSample"], 
                FunctionRepo`kullbackLeiblerDivergence`Private`p, 
                FunctionRepo`kullbackLeiblerDivergence`Private`q]; 
              Return[$Failed]]], 
            Blank[], Message[
              MessageName[FunctionRepo`kullbackLeiblerDivergence, "method"], 
              FunctionRepo`kullbackLeiblerDivergence`Private`method]; 
            Return[$Failed]]; 
          FunctionRepo`kullbackLeiblerDivergence`Private`domainp = 
           DistributionDomain[
            FunctionRepo`kullbackLeiblerDivergence`Private`p]; 
          FunctionRepo`kullbackLeiblerDivergence`Private`domainq = 
           DistributionDomain[
            FunctionRepo`kullbackLeiblerDivergence`Private`q]; 
          FunctionRepo`kullbackLeiblerDivergence`Private`assumptions = 
           Apply[And, 
             Map[
             DistributionParameterAssumptions, {
              FunctionRepo`kullbackLeiblerDivergence`Private`p, 
               FunctionRepo`kullbackLeiblerDivergence`Private`q}]]; Switch[
            Assuming[
            FunctionRepo`kullbackLeiblerDivergence`Private`assumptions, 
             Simplify[
              FunctionRepo`kullbackLeiblerDivergence`Private`supportSubSetQ[
              FunctionRepo`kullbackLeiblerDivergence`Private`domainp, 
               FunctionRepo`kullbackLeiblerDivergence`Private`domainq]]], 
            True, Null, False, Message[
              MessageName[
              FunctionRepo`kullbackLeiblerDivergence, "supportPQ"], 
              FunctionRepo`kullbackLeiblerDivergence`Private`p, 
              FunctionRepo`kullbackLeiblerDivergence`Private`q]; 
            Return[Undefined], 
            Blank[], 
            Message[
             MessageName[
             FunctionRepo`kullbackLeiblerDivergence, "supportValidationFail"],
              FunctionRepo`kullbackLeiblerDivergence`Private`p, 
             FunctionRepo`kullbackLeiblerDivergence`Private`q]]; 
          FunctionRepo`kullbackLeiblerDivergence`Private`rv = 
           Replace[FunctionRepo`kullbackLeiblerDivergence`Private`domainp, {
             Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`l, {
                 Repeated[
                 FunctionRepo`kullbackLeiblerDivergence`Private`domainPattern]\
}] :> Array[$CellContext`x, 
                Length[FunctionRepo`kullbackLeiblerDivergence`Private`l]], 
              Blank[] -> $CellContext`x}]; 
          FunctionRepo`kullbackLeiblerDivergence`Private`assumptions = 
           Simplify[
             And[FunctionRepo`kullbackLeiblerDivergence`Private`assumptions, 
              
              Block[{Statistics`Library`RealIntegerQ = 
                Element[#, Integers]& }, 
               If[
                ListQ[FunctionRepo`kullbackLeiblerDivergence`Private`rv], 
                Apply[And, 
                 MapThread[
                 Statistics`DistributionsCommonDump`DomainMemberQ, {
                  FunctionRepo`kullbackLeiblerDivergence`Private`domainp, 
                   FunctionRepo`kullbackLeiblerDivergence`Private`rv}]], 
                Statistics`DistributionsCommonDump`DomainMemberQ[
                FunctionRepo`kullbackLeiblerDivergence`Private`domainp, 
                 FunctionRepo`kullbackLeiblerDivergence`Private`rv]]]]]; 
          Assuming[FunctionRepo`kullbackLeiblerDivergence`Private`assumptions, 
            Simplify[
             FunctionRepo`kullbackLeiblerDivergence`Private`method[
              Refine[
              LogLikelihood[
                FunctionRepo`kullbackLeiblerDivergence`Private`p, {
                 FunctionRepo`kullbackLeiblerDivergence`Private`rv}] - 
               LogLikelihood[
               FunctionRepo`kullbackLeiblerDivergence`Private`q, {
                FunctionRepo`kullbackLeiblerDivergence`Private`rv}]], 
              Distributed[
              FunctionRepo`kullbackLeiblerDivergence`Private`rv, 
               FunctionRepo`kullbackLeiblerDivergence`Private`p], 
              Apply[
              Sequence, 
               FunctionRepo`kullbackLeiblerDivergence`Private`methodOpts]], 
             TimeConstraint -> {2, 10}]]]]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {Method -> Expectation, Assumptions :> $Assumptions}, 
    "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`kullbackLeiblerDivergence"], False]]], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"13e6d6c2-6863-4ff0-86e7-b90f4d5e7d2a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"kullbackLeiblerDivergence", "[", 
  RowBox[{
   RowBox[{"BinormalDistribution", "[", "\[Rho]1", "]"}], ",", 
   RowBox[{"BinormalDistribution", "[", "\[Rho]2", "]"}]}], "]"}]], "Input",
 CellLabel->"In[47]:=",ExpressionUUID->"5ec8fba7-2cf3-462f-ac44-3aa8b53c644c"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"2", " ", "\[Rho]1", " ", "\[Rho]2"}], "-", 
   RowBox[{"2", " ", 
    SuperscriptBox["\[Rho]2", "2"]}], "-", 
   RowBox[{
    SuperscriptBox["\[Rho]2", "2"], " ", 
    RowBox[{"Log", "[", 
     RowBox[{"1", "-", 
      SuperscriptBox["\[Rho]1", "2"]}], "]"}]}], "+", 
   RowBox[{
    SuperscriptBox["\[Rho]2", "2"], " ", 
    RowBox[{"Log", "[", 
     RowBox[{"1", "-", 
      SuperscriptBox["\[Rho]2", "2"]}], "]"}]}], "+", 
   RowBox[{"Log", "[", 
    FractionBox[
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      SuperscriptBox["\[Rho]1", "2"]}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      SuperscriptBox["\[Rho]2", "2"]}]], "]"}]}], 
  RowBox[{"2", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox["\[Rho]2", "2"]}], ")"}]}]]], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"9a65e7a3-f586-4d8a-90d7-f919148c636f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"kullbackLeiblerDivergence", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"EmpiricalDistribution", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<b\>\""}], "}"}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"EmpiricalDistribution", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], 
    "]"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->"In[49]:=",ExpressionUUID->"bca30795-b9dc-4999-ac8a-93a48394a5fe"],

Cell[BoxData[
 FractionBox[
  RowBox[{"2", " ", 
   RowBox[{"Log", "[", "2", "]"}]}], "3"]], "Output",
 CellLabel->"Out[49]=",ExpressionUUID->"514a7d22-4c07-4f62-a371-f792a04dab87"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"kullbackLeiblerDivergence", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"BernoulliDistribution", "[", "p", "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"EmpiricalDistribution", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}], "]"}]}], "\[IndentingNewLine]",
   "]"}]], "Input",
 CellLabel->"In[50]:=",ExpressionUUID->"200811e0-9976-442e-8d63-800751e9f445"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "p"}], ")"}]}], " ", 
   RowBox[{"Log", "[", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["3", "2"]}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "p"}], ")"}]}], "]"}]}], "+", 
  RowBox[{"p", " ", 
   RowBox[{"Log", "[", 
    RowBox[{"3", " ", "p"}], "]"}]}]}]], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"8c3e048f-6af6-4f8b-b56f-0a1dd23cdd27"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["maximumSpacingEstimation", \
"Subsection",ExpressionUUID->"e7f25d6e-d412-498b-92a0-f28a46aa5a37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "maximumSpacingEstimation"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"5dc8f8f8-a1f2-4148-9fe6-38ff79eeffe3"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"maximumSpacingEstimation[data, dist] fits dist to \
data using the maximum spacing estimation method.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"maximumSpacingEstimation", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`data_", 
                    "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"VectorQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`dist_", 
                    "?", "Statistics`Library`UnivariateDistributionQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`expr", "=", 
                    RowBox[{"Inactivate", "[", 
                    RowBox[{
                    RowBox[{"Mean", "[", 
                    RowBox[{"Log", "[", 
                    RowBox[{"Differences", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"CDF", "[", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`dist", ",", 
                    RowBox[{
                    "Sort", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`data", 
                    "]"}]}], "]"}], ",", "1"}], "}"}], "]"}], "]"}], "]"}], 
                    "]"}], ",", 
                    RowBox[{"Except", "[", "Sort", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`cons", "=", 
                    RowBox[{
                    "DistributionParameterAssumptions", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`dist", 
                    "]"}]}], ",", 
                    "FunctionRepo`maximumSpacingEstimation`Private`result"}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`result", 
                    "=", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Indeterminate", "=", 
                    RowBox[{"-", "Statistics`Library`MachineInfinity"}]}], 
                    "}"}], ",", 
                    RowBox[{"NMaximize", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`expr", ",", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`cons", "&&", 
                    RowBox[{"OptionValue", "[", "Assumptions", "]"}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{
                    "Statistics`Library`GetDistributionParameters", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`dist", 
                    "]"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`maximumSpacingEstimation`Private`opts",
                     "}"}], ",", 
                    RowBox[{"Options", "[", "NMaximize", "]"}]}], "]"}]}]}], 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`result", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"{", "__Rule", "}"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"\<\"Distribution\"\>", "\[Rule]", 
                    "FunctionRepo`maximumSpacingEstimation`Private`dist"}], "/.",
                     "\[VeryThinSpace]", 
                    RowBox[{
                    "Last", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`result", 
                    "]"}]}], ",", 
                    RowBox[{"\<\"MaxSpacingEstimate\"\>", "\[Rule]", 
                    RowBox[{
                    "First", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`result", 
                    "]"}]}]}], "]"}], ",", "$Failed"}], "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   PaneSelectorBox[{True->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    False),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"], False->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    True),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]]], 
                   PaneSelectorBox[{True->GridBox[{
                    {
                    RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"EvaluationMonitor", "\[Rule]", "None"}]},
                    {
                    RowBox[{"MaxIterations", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Method", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"PrecisionGoal", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"StepMonitor", "\[Rule]", "None"}]},
                    {
                    RowBox[{
                    "WorkingPrecision", "\[Rule]", "MachinePrecision"}]},
                    {
                    RowBox[{"Assumptions", "\[RuleDelayed]", "$Assumptions"}]},
                    {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","8","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.}}}], False->
                    RowBox[{
                    RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}], 
                    "\[ThinSpace]", 
                    StyleBox["\<\"\[Ellipsis]\"\>", "InformationRowOpener",
                    StripOnInput->False], "\[ThinSpace]", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","8","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]],
                    BaselinePosition->Baseline,
                    ImageSize->Automatic]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`maximumSpacingEstimation\
\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"maximumSpacingEstimation[data, dist] fits dist to \
data using the maximum spacing estimation method.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "maximumSpacingEstimation[data, dist] fits dist to data using the maximum \
spacing estimation method.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`maximumSpacingEstimation, {
      FunctionRepo`maximumSpacingEstimation[
         PatternTest[
          Pattern[FunctionRepo`maximumSpacingEstimation`Private`data, 
           Blank[]], VectorQ[#, NumericQ]& ], 
         PatternTest[
          Pattern[FunctionRepo`maximumSpacingEstimation`Private`dist, 
           Blank[]], Statistics`Library`UnivariateDistributionQ], 
         Pattern[FunctionRepo`maximumSpacingEstimation`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`maximumSpacingEstimation`Private`expr = Inactivate[
            Mean[
             Log[
              Differences[
               Flatten[{0, 
                 CDF[FunctionRepo`maximumSpacingEstimation`Private`dist, 
                  Sort[FunctionRepo`maximumSpacingEstimation`Private`data]], 
                 1}]]]], 
            Except[Sort]], FunctionRepo`maximumSpacingEstimation`Private`cons = 
          DistributionParameterAssumptions[
           FunctionRepo`maximumSpacingEstimation`Private`dist], 
          FunctionRepo`maximumSpacingEstimation`Private`result}, 
         FunctionRepo`maximumSpacingEstimation`Private`result = 
          Block[{Indeterminate = -Statistics`Library`MachineInfinity}, 
            NMaximize[{FunctionRepo`maximumSpacingEstimation`Private`expr, 
              Simplify[
               And[FunctionRepo`maximumSpacingEstimation`Private`cons, 
                OptionValue[Assumptions]]]}, 
             Statistics`Library`GetDistributionParameters[
             FunctionRepo`maximumSpacingEstimation`Private`dist], 
             Apply[Sequence, 
              
              FilterRules[{
               FunctionRepo`maximumSpacingEstimation`Private`opts}, 
               Options[NMaximize]]]]]; If[
           MatchQ[FunctionRepo`maximumSpacingEstimation`Private`result, {
             Blank[], {
              BlankSequence[Rule]}}], 
           Association[
            ReplaceAll[
            "Distribution" -> 
             FunctionRepo`maximumSpacingEstimation`Private`dist, 
             Last[FunctionRepo`maximumSpacingEstimation`Private`result]], 
            "MaxSpacingEstimate" -> 
            First[FunctionRepo`maximumSpacingEstimation`Private`result]], \
$Failed]]}], "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     AccuracyGoal -> Automatic, EvaluationMonitor -> None, MaxIterations -> 
      Automatic, Method -> Automatic, PrecisionGoal -> Automatic, StepMonitor -> 
      None, WorkingPrecision -> MachinePrecision, 
      Assumptions :> $Assumptions}, "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`maximumSpacingEstimation"], False]]], "Output",
 CellLabel->"Out[19]=",ExpressionUUID->"e3b51bc5-9fc8-42b2-9be1-88de7668ce81"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["multiNonlinearModelFit", \
"Subsection",ExpressionUUID->"b0f9ea23-866e-4cac-9997-19632af0abfe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "multiNonlinearModelFit"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"6efeacfa-38f2-467c-826b-25397978554a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"multiNonlinearModelFit[{dat1, dat2, ...}, {fun1, \
fun2, ...}, params, vars] fits fun_i to data_i simultaneously.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`datasets_", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`form_", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`fitParams_", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`independents", 
                    ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`datasets", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`form", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`fitParams", ",", 
                    RowBox[{
                    "{", "FunctionRepo`tukeyMedianPolish`Private`\
independents", "}"}], ",", "FunctionRepo`tukeyMedianPolish`Private`opts"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`datasets_", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`form", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"{", "__Rule", "}"}], ",", "_List"}], "]"}]}], 
                    ",", "FunctionRepo`tukeyMedianPolish`Private`fitParams_", 
                    ",", "FunctionRepo`tukeyMedianPolish`Private`independents_\
", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`datasets", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    
                    RowBox[{"\<\"Expressions\"\>", "\[Rule]", 
                    "FunctionRepo`tukeyMedianPolish`Private`form"}], ",", 
                    RowBox[{"\<\"Constraints\"\>", "\[Rule]", "True"}]}], 
                    "]"}], ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`fitParams", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`independents", 
                    ",", "FunctionRepo`tukeyMedianPolish`Private`opts"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`datasets", ":", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    "}"}]}], ",", 
                    RowBox[{"KeyValuePattern", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"\<\"Expressions\"\>", "\[Rule]", 
                    "FunctionRepo`tukeyMedianPolish`Private`expressions_List"}\
], ",", 
                    
                    RowBox[{"\<\"Constraints\"\>", "\[Rule]", 
                    "FunctionRepo`tukeyMedianPolish`Private`constraints_"}]}],
                     "}"}], "]"}], ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`fitParams_List", 
                    ",", "FunctionRepo`tukeyMedianPolish`Private`independents_\
List", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`fitfun", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`weights", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`numSets", "=", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`expressions", 
                    "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`augmentedData", 
                    "=", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"N", "[", "#2", "]"}], ",", 
                    RowBox[{"Length", "[", "#1", "]"}]}], "]"}], ",", "#1", 
                    ",", "2"}], "]"}], "&"}], ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`datasets"}], 
                    "]"}]}]}], ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`indexSymbol", "=", 
                    RowBox[{
                    "OptionValue", "[", "\<\"DatasetIndexSymbol\"\>", 
                    "]"}]}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`fitfun", "=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`conditions", "=", 
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`expressions", 
                    "\[LeftDoubleBracket]", "#1", "\[RightDoubleBracket]"}]}],
                     "}"}], "&"}], ")"}], "/@", 
                    RowBox[{
                    "Range", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`numSets", 
                    "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"Switch", "@@", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`conditions", ",", 
                    RowBox[{
                    "Round", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`indexSymbol", 
                    "]"}]}], "]"}]}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`weights", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "Weights", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`list_List", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"VectorQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], "/;", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`list", "]"}], "===",
                     "FunctionRepo`tukeyMedianPolish`Private`numSets"}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"ConstantArray", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`list", ",", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`tukeyMedianPolish`Private`datasets"}]}], 
                    "}"}]}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`list", ":", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"VectorQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    "}"}]}], "/;", 
                    RowBox[{
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`tukeyMedianPolish`Private`list"}], "===", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`tukeyMedianPolish`Private`datasets"}]}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    "Join", "@@", 
                    "FunctionRepo`tukeyMedianPolish`Private`list"}]}], ",", 
                    RowBox[{"\<\"InverseLengthWeights\"\>", "\[RuleDelayed]", 
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    FractionBox["1.`", "#1"], ",", "#1"}], "]"}], "&"}], 
                    ")"}], "/@", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`tukeyMedianPolish`Private`datasets"}]}]}]}]}\
], "}"}]}], "]"}]}], ";", 
                    RowBox[{"NonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`augmentedData", 
                    ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "TrueQ", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`constraints", 
                    "]"}], ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`fitfun", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`fitfun", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`constraints"}], 
                    "}"}]}], "]"}], ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`fitParams", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`indexSymbol", ",",
                     "FunctionRepo`tukeyMedianPolish`Private`independents"}], 
                    "}"}], "]"}], ",", 
                    RowBox[{
                    "Weights", "\[Rule]", 
                    "FunctionRepo`tukeyMedianPolish`Private`weights"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`tukeyMedianPolish`Private`opts", "}"}],
                     ",", 
                    RowBox[{"Options", "[", "NonlinearModelFit", "]"}]}], 
                    "]"}]}]}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`numSets", "===", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`datasets", 
                    "]"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   PaneSelectorBox[{True->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    False),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"], False->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    True),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]]], 
                   PaneSelectorBox[{True->GridBox[{
                    {
                    RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"ConfidenceLevel", "\[Rule]", 
                    FractionBox["19", "20"]}]},
                    {
                    RowBox[{"EvaluationMonitor", "\[Rule]", "None"}]},
                    {
                    RowBox[{"Gradient", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"MaxIterations", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Method", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"PrecisionGoal", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"StepMonitor", "\[Rule]", "None"}]},
                    {
                    RowBox[{"Tolerance", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{
                    "VarianceEstimatorFunction", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Weights", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"WorkingPrecision", "\[Rule]", "Automatic"}]},
                    {
                    
                    RowBox[{"\<\"DatasetIndexSymbol\"\>", "\[Rule]", 
                    "\[FormalN]"}]},
                    {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","13","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.}}}], False->
                    RowBox[{
                    RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}], 
                    "\[ThinSpace]", 
                    StyleBox["\<\"\[Ellipsis]\"\>", "InformationRowOpener",
                    StripOnInput->False], "\[ThinSpace]", 
                    StyleBox[
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","13","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]],
                    BaselinePosition->Baseline,
                    ImageSize->Automatic]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`multiNonlinearModelFit\"\
\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"multiNonlinearModelFit[{dat1, dat2, ...}, {fun1, \
fun2, ...}, params, vars] fits fun_i to data_i simultaneously.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "multiNonlinearModelFit[{dat1, dat2, ...}, {fun1, fun2, ...}, params, \
vars] fits fun_i to data_i simultaneously.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`multiNonlinearModelFit, {
      FunctionRepo`multiNonlinearModelFit[
         Pattern[FunctionRepo`tukeyMedianPolish`Private`datasets, 
          Blank[]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`form, 
          Blank[]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`fitParams, 
          Blank[]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`independents, 
          Except[
           Blank[List]]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`multiNonlinearModelFit[
        FunctionRepo`tukeyMedianPolish`Private`datasets, 
         FunctionRepo`tukeyMedianPolish`Private`form, 
         FunctionRepo`tukeyMedianPolish`Private`fitParams, {
         FunctionRepo`tukeyMedianPolish`Private`independents}, 
         FunctionRepo`tukeyMedianPolish`Private`opts], 
       FunctionRepo`multiNonlinearModelFit[
         Pattern[FunctionRepo`tukeyMedianPolish`Private`datasets, 
          Blank[]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`form, 
          Except[{
            BlankSequence[Rule]}, 
           Blank[List]]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`fitParams, 
          Blank[]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`independents, 
          Blank[]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`multiNonlinearModelFit[
        FunctionRepo`tukeyMedianPolish`Private`datasets, 
         Association[
         "Expressions" -> FunctionRepo`tukeyMedianPolish`Private`form, 
          "Constraints" -> True], 
         FunctionRepo`tukeyMedianPolish`Private`fitParams, 
         FunctionRepo`tukeyMedianPolish`Private`independents, 
         FunctionRepo`tukeyMedianPolish`Private`opts], 
       FunctionRepo`multiNonlinearModelFit[
         Pattern[FunctionRepo`tukeyMedianPolish`Private`datasets, {
           PatternTest[
            BlankSequence[], MatrixQ[#, NumericQ]& ]}], 
         KeyValuePattern[{
          "Expressions" -> 
           Pattern[FunctionRepo`tukeyMedianPolish`Private`expressions, 
             Blank[List]], "Constraints" -> 
           Pattern[FunctionRepo`tukeyMedianPolish`Private`constraints, 
             Blank[]]}], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`fitParams, 
          Blank[List]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`independents, 
          Blank[List]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`tukeyMedianPolish`Private`fitfun, 
          FunctionRepo`tukeyMedianPolish`Private`weights, 
          FunctionRepo`tukeyMedianPolish`Private`numSets = 
          Length[FunctionRepo`tukeyMedianPolish`Private`expressions], 
          FunctionRepo`tukeyMedianPolish`Private`augmentedData = Apply[Join, 
            MapIndexed[Join[
              ConstantArray[
               N[#2], 
               Length[#]], #, 2]& , 
             FunctionRepo`tukeyMedianPolish`Private`datasets]], 
          FunctionRepo`tukeyMedianPolish`Private`indexSymbol = 
          OptionValue["DatasetIndexSymbol"]}, 
         Condition[
         FunctionRepo`tukeyMedianPolish`Private`fitfun = 
           With[{FunctionRepo`tukeyMedianPolish`Private`conditions = 
              Apply[Join, 
                Map[{#, 
                  Part[
                  FunctionRepo`tukeyMedianPolish`Private`expressions, #]}& , 
                 Range[FunctionRepo`tukeyMedianPolish`Private`numSets]]]}, 
             Apply[Switch, 
              Prepend[FunctionRepo`tukeyMedianPolish`Private`conditions, 
               Round[FunctionRepo`tukeyMedianPolish`Private`indexSymbol]]]]; 
          FunctionRepo`tukeyMedianPolish`Private`weights = Replace[
             OptionValue[Weights], {Condition[
                PatternTest[
                 Pattern[FunctionRepo`tukeyMedianPolish`Private`list, 
                  Blank[List]], VectorQ[#, NumericQ]& ], 
                Length[FunctionRepo`tukeyMedianPolish`Private`list] === 
                FunctionRepo`tukeyMedianPolish`Private`numSets] :> Apply[Join, 
                MapThread[
                ConstantArray, {FunctionRepo`tukeyMedianPolish`Private`list, 
                  Map[
                  Length, FunctionRepo`tukeyMedianPolish`Private`datasets]}]],
               Condition[
                Pattern[FunctionRepo`tukeyMedianPolish`Private`list, {
                  PatternTest[
                   BlankSequence[], VectorQ[#, NumericQ]& ]}], 
                Map[Length, FunctionRepo`tukeyMedianPolish`Private`list] === 
                Map[Length, FunctionRepo`tukeyMedianPolish`Private`datasets]] :> 
              Apply[Join, FunctionRepo`tukeyMedianPolish`Private`list], 
              "InverseLengthWeights" :> Apply[Join, 
                Map[ConstantArray[1./#, #]& , 
                 Map[
                 Length, FunctionRepo`tukeyMedianPolish`Private`datasets]]]}]; 
          NonlinearModelFit[
           FunctionRepo`tukeyMedianPolish`Private`augmentedData, 
            If[
             TrueQ[FunctionRepo`tukeyMedianPolish`Private`constraints], 
             FunctionRepo`tukeyMedianPolish`Private`fitfun, {
             FunctionRepo`tukeyMedianPolish`Private`fitfun, 
              FunctionRepo`tukeyMedianPolish`Private`constraints}], 
            FunctionRepo`tukeyMedianPolish`Private`fitParams, 
            
            Flatten[{
             FunctionRepo`tukeyMedianPolish`Private`indexSymbol, 
              FunctionRepo`tukeyMedianPolish`Private`independents}], Weights -> 
            FunctionRepo`tukeyMedianPolish`Private`weights, 
            Apply[Sequence, 
             FilterRules[{FunctionRepo`tukeyMedianPolish`Private`opts}, 
              Options[NonlinearModelFit]]]], 
          FunctionRepo`tukeyMedianPolish`Private`numSets === 
          Length[FunctionRepo`tukeyMedianPolish`Private`datasets]]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     AccuracyGoal -> Automatic, ConfidenceLevel -> Rational[19, 20], 
      EvaluationMonitor -> None, Gradient -> Automatic, MaxIterations -> 
      Automatic, Method -> Automatic, PrecisionGoal -> Automatic, StepMonitor -> 
      None, Tolerance -> Automatic, VarianceEstimatorFunction -> Automatic, 
      Weights -> Automatic, WorkingPrecision -> Automatic, 
      "DatasetIndexSymbol" -> \[FormalN]}, "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`multiNonlinearModelFit"], False]]], "Output",
 CellLabel->"Out[21]=",ExpressionUUID->"c21d3af5-b9e8-4267-853a-381bdebe462b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"BinormalDistribution", "[", "0.7", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "100"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"data", "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "All", ",", "2"}], "]"}], "]"}], "+=", "2."}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"model", "=", 
  RowBox[{"multiNonlinearModelFit", "[", "\[IndentingNewLine]", 
   RowBox[{"data", ",", "\[IndentingNewLine]", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"a", " ", "\[FormalX]"}], "+", " ", "b1"}], ",", 
      RowBox[{
       RowBox[{"a", " ", "\[FormalX]"}], " ", "+", " ", "b2"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b1", ",", "b2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[FormalX]", "}"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 TaggingRules->{},
 CellLabel->"In[66]:=",
 CellID->161500924,ExpressionUUID->"c39143e0-8df7-4e59-b0a1-a501fd5ada30"],

Cell[BoxData[
 TagBox[
  RowBox[{"FittedModel", "[", 
   TagBox[
    PanelBox[
     TagBox[
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"Round", "[", "\[FormalN]", "]"}], ",", "\[IndentingNewLine]",
         "1", ",", 
        RowBox[{
         RowBox[{"\[FormalX]", " ", "0.668726288392487`"}], "-", 
         "0.012503599068944604`"}], ",", "\[IndentingNewLine]", "2", ",", 
        RowBox[{
         RowBox[{"\[FormalX]", " ", "0.668726288392487`"}], "+", 
         "1.997093249062876`"}]}], "]"}],
      Short[#, 2]& ],
     FrameMargins->5],
    Editable -> False], "]"}],
  InterpretTemplate[
  FittedModel[{
    "Nonlinear", {$CellContext`a -> 
      0.668726288392487, $CellContext`b1 -> -0.012503599068944604`, \
$CellContext`b2 -> 1.997093249062876}, {{\[FormalN], \[FormalX]}, 
      Switch[
       Round[\[FormalN]], 1, \[FormalX] $CellContext`a + $CellContext`b1, 
       2, \[FormalX] $CellContext`a + $CellContext`b2]}}, {1}, CompressedData["
1:eJxNlnk41Nsfx8fYuolCVylFXEvrjcoSdaYSupaEXFSukrLchESWQkRZulRa
SMiIJMnewhm77LJGwswwY6wziBkjv/7pnN88z/zzet7P+/s5n+2cLecuWzgR
CQRC3c+/IOHXbxr8xsrudGxog91m96nKJAb8xR/O9nJeT41AG4OqHeX9dPCL
S8Vwd0ZcmQfmA5SiAw+XEG9UDxWu41ZBh6iPnQezuhGfXaVK7gokUoLjNwgr
vqEhfyHR6BkFLgfwH81ynnGbEP90SptTNVwHF07p9MXfbkN8JO/rsqUIHYQ4
t/m+mmMinvvaxaglpQoeOJiqWTjERnyvuuJ35ooFUHedevrSqhYUj5hdy5Ev
3Tzob5MiHU+ZRPqLn/X0fcb64bEXV9O4Od8QXyRouensHobWuyrdUy3HEdc6
PX5WmNMCXL8N1yld4SF/d3XXAKpLAzRibIxI0/mM9AdMks9eVRqBevplIztv
vUd63+KSP9dcLoYRx8f7p07PIL5D5uzt4+nD4I/EvPJt1cWIv/PdKxj+nAX2
Z1pdj/T7iri/x8BVXelHcEXyzLnk57mIt0UTwqw154FPFyckOX0S8RRwYWr6
zVdIynJkBFjQEP8kkLrqVhYdmFRaihOc6lD88vn+sxEJ01Dsefekj+4s4rd0
3ou3Rr2GHhNt17xsmDgPlhRCHqsR+uiPVdmo1SD9x5aD7B6PDmCjwRgvujGG
+DW9pc/Go72wNX21ND9jBPGaj4ZlkQpL8I9NXaoHbuD8y5wMePM9fAaIFb8S
/Lydg77b0nnftuoVA9ZCMVpOCu7b1YHg793r5oH7wocH5Ckq4sygCKMPbjxg
dPVcnc2+VuT/fJtO+tLYIHT3lKN4aA4grq7+IVhQlw+m3E+vMf2xgHwmsgwC
tcQH4ESat18ch4r0tYErhfPsuVC9JFtfUxn3my+9tXcufhqcd2JlXnb4gniJ
F7VkeO8QVNCpaPJyxnn48Up+h415L3D4W3RYWhXHb+Mk6KmfSCB1LJ+pM7Hl
Iy791DZypHMS6jXqP3va9RX5REaWtsW9YcPvmVUXmCfwvL/r+/LB4vI88Kg3
UE2TzEM+64aerb1dzoFHTyntbM3B8zUfaBTMJg2BkJdusuMQn1fF55lvlGEv
LHBabJjiFOK5S7UtX+M0DNffqXysRJtGejnZ/ak1jB7wDmaXrX+B+5D80jmb
rT0Ow5gSAUTXeqTf9qls48fNE9CbXRA7nN+FeGJ78mUVLxrMKpz420wA5znI
5HpRkcIIULTOrnUc7kX+5vcTBYftBuDvj/qdVmbg+r5SFWISC0bgY08Pay0a
3j8yT5h5F4I7wD+xBnmN0lXIh1Jx4L4wqRTU3vVS896AeaXUS7r2ERog/jbJ
yzg3hXyIDIueuZ1DcOVc4voLBylIz9pu2F2ixQb3ZLbPHA6dQFw/+aPe8qVJ
qGC1r8SpmoN8CgYtK96W0oAKm3qLpIj3j4YmFO465gNrxxiUSi8e3mPqjIIW
506QefHkwQORn/DeNo3avMn+X2AkH9KXS8d1KegFYVuNp4DiHmZFEm0a6Ut7
/3nxmd0FrhFbVTbcxPu8R/L5agqfA509ug9ljOThOTpO05H1rgOLtfP6ebKD
iN8dbBm0fzMJwxpL1CVDZhAP/ePL8XsinZC/VilTpLoA8X2nrmVFjM5Biuak
jvzhIRRPg6y3RW56AqzkTsilq+L9c0QlX35iRSVYGXnRUugIA3GL+DR9iQvT
gF4W96QJcBHPXgqPPibwFfS9TXXLuIr3/yqRNNPxQ1z49ISzldzmHqSvoS43
F3b3AZKgZVPF9RTE4YSwPyFqEfIKc1mP6n4gny0JZhpXbDtAaxQ5wOnMHP7u
49cCrYPT4NTvfnbJ9WzE23cdIKl+GYAl79zsaxOGkA/h6B8eZrG5wPrBuIad
QCvS06gFgq+3LcIn3IWZHhtcxwwJqqmyJxPGkonDygsViN9s+vPOtfNM2GAt
EtT9AdfxZVyiWH7FV5DAyRdUP1+OONmCVpq3sQdSakWXTZQH0XezpK9oTP/c
gxO1zeHH7+A+2bcu9+meSgJpID0p+a7oD8RJwTJ/G2v3gVwCr8GQjOei7HtM
L7mABQSiF/9S0utE+n5CDnV5KweQb/kwBpbH8Xw1rGtum6QD3uuj382LsP9y
+Z2QxGY2bFHJsnIwYOH+eWgtkHSWBQ1e5wa8O4Hzs+mZqMJLCR5wNgU8VzK+
pzIbgL5JtACpYYMWP+Ys3qty3rmBd0IYgNQqk95pje+L3ftB1Gfdr9BbLrVe
L+fX+4dA2sFnLR0UGobbGyVaRt2JpF88wj4zKD2MB6NCqBuy4RLS3zW8cuaz
Cx8WCcnLUVwmEXchfFko+54HYx667DrkzEP8vKmjtFVyL4AXSz2rognIX0Zc
zqtTpgAk0A4ZFZcJIm6eMyZ3/RgfmpfztPekNSKf9x7P00J9ySAul1wuHYv1
7gESImZ1BFK+36aYCoow4jpKPK1K7jfg3d74dDYY6498+0K144xBdwV/geyK
IeQvUaa7sSdiDgaoZzu3RnEQ7z2WSZbmzkJNmhgrgI/z4GiZY7LAZkB7Id1M
DbvviH/0NlnU05yBJnGZW+DWHsRl6HujT7T3w0N3/zNjyOA82HGiWitFOEAF
WnRE0heRviI/WmjrKB3aSJ5YIGtNI76Yf9tK4UMsuJ+UsvpBsgjyid3U4XJt
y3u46z9t45vMORxP+oB+ff4osJaLulLdv4B4arWMxa5LDHh+xXbphxMziJv9
K0cc860B/wJHxRJRHA91Uq3F7p9ZsCAsbHMc/EDc6JOkY97Qz3tv+uE+s2ZR
FE9wDN16cesYmHd7sTVbBvOoJ4yUdBqRor2/xEH6Ds5zof/pVznku3DRpXmw
iYHP61lz9EPCYxbM+s/T5cQeLuJ7wjc5hC5+g9fOO7YWjOP6tvGNhY03suG0
cKLU6jO4P82vuvhcWpcIM6+YhwQ9XoH0k288Vc1s26CkkSm/vh6fawvdMaQg
/xOwLHuetaUI5zmVaO9Aam8DEezVga8z5pH+0Ixi6YtDTFDiMGiRFIb9T8j2
XQtNmobMPoNIk+YqpI/Z22zaEpIPZOI0B+TFxJGes/aalMkhIum42rzT0BFJ
xH3U02+8p4+A7maS6S6JNYh/u37jPvcckaLmv9p/ALZg/7ZPZf6dP9/1l8Ic
o7i/If38Gdf50uIX8LFvk0fLHD6XU3WopWMokVQfJf+7jflKxKckfuSP2TYD
Vyty91/9QojzO/ycp9/2ADo4Nq58GOf/boNrxPuUOWgj80RFUgPvmbkSAUNF
Lgdmt3AD+Fa436qt7Iv3lfUDF/GRkMrNROTDCBAN0g2aAd8vi45EsbB/x0Wx
YDWJavBXmWqhjxSeo+DsBOrmgEmousRkr5jBPlfU5IxUX9VCkUnvmwuyOP5q
g+ZUK08u5Nn1WUi5UFE8K4bVCU/Hi8D5vMCwxjbs06Xm0vTMegIEOcFHb8Nw
3kS8qqlZ0YNgS3H8wQ/tWH/D4XLNjsFRODUutJM7hvfDklp6sOj+fnCzOuZY
AMB5SJPVmpp4Ow/2R+bs8dyL+yf77YJ4bNrP98Hrzo/+bjgPMcS5PzfeWoDB
Mn5jpfxh5KMkob8cbMUD+yekFnf+hftkiWtMu2lbC9MeeiXwk7DPs44VuizK
KCTd2/fjMBfH07X+d8WEgBH4cO0dw4kfAkjvEdh9y/hlBKCtzDO/9BGfd9Ld
+d6tZQ5o2G66XN6K9ZY5b+cl/mED0/ilOpCB54uznu+X+WIREtZ3HvSuCYK/
eFx48793ZxnQ4l6Dy8uz/7cPc3qUgccUYPJ+vtrX4rlItljtKtIwChK8g/TG
BXB9Vz0r66JIciDzgg3Z/DCub+DKZsXIz1NQvqm0Pd8I78Ml1pXQztphoB+4
HL/tHM5PeNsO/XyHYiClp+bp20hH+iml54Ul53jgiZ5ssXiPFNI37xAIIdSM
gSd7NJhqhTjO5ReV5T2Z1YAsLOK5fasY4vbjdEnTpHwQ26iZQ96L48kKtc2L
q1sEjwNvy1cW4flVDq6rYx6kw8OT35ZlXPF9ZGQ/LHeG3wfeKtsL7H6K92ou
INrO53TBkfqzgqyzmNucUqgQT1kCibrbtU+74T7ZzS9135rTDjoC/0u3NR1F
+pOWytybVWNApbjneI42jjPSUFxTHQhSYs8oyNwi8VAdhRctxrfUDQP+tkWP
9VR8L7/LqPUpuE2HIzMUESF9GvLZpJscwE4YABL2Btpmp3H+49ekeDcrsoD/
IFxbFYB9BBsuEE+WVMD8Oxd2JkXhPPSd9lvd1jkHHiQlH08CEki/Qcw3XTlz
GhjXhmkYnZxF+ku35bKuf5oGjiZ6va5v8T1V2Dsykhs/BE7qPLfdG47j2U31
25/hNgjfOImuDXdmIx+JylGmIesB7FH0My9qnwH/A+toMGA=
    "], 
    Function[Null, 
     Internal`LocalizedBlock[{\[FormalN], \[FormalX], $CellContext`a, \
$CellContext`b1, $CellContext`b2}, #], {HoldAll}]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->True]], "Output",
 CellLabel->"Out[68]=",ExpressionUUID->"5a7d581d-d0c9-4a5e-8970-f4fda01608e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ListPlot", "[", "data", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Normal", "[", "model", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"\[FormalN]", ",", 
          RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[FormalX]", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 TaggingRules->{},
 CellLabel->"In[69]:=",
 CellID->671103164,ExpressionUUID->"2c3b7c6e-944b-4770-9eb2-ff95dc74ee9e"],

Cell[BoxData[
 GraphicsBox[{{{}, {{
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.009166666666666668], AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwV0/0/FAYcwPFDaOlxNqUUI2w9bJ2FFL63dUmLFE2ktVQny4bkqWixkjzU
q9b0QHk8eeZ2jpiH73kIhe5Yng7hzj3snHN3Hu88bfvh83r/BZ/Pzge4UtQJ
BMLF//rfj8SFXRdaO7Dn2COuKUmIj6c4iqIJAXo4NO6qGxyFj+8pd8denYXj
Q8xyu8eL0Ea8pdmibMRzCdVd9vk9MLXanNodqc6MStqsaVzCwxXaiZNGSgUs
PJlSpCrb8Y3XPkUjvwXnvGz6k+52oIA+sOymNQrRvh1hBdMipBX95MhKb0Q7
+wyrshE57iUaz4hWzkHLDe6ZX1azQOc062Bfjwqve6TrJjGleKnTlhw6NohH
XoZkKYs/4DzB2s9mDx/dv2zwz3CToPUZibemggWXP/BbTK6qwJ94OYL7Uys6
CrfEZtl0op1TmneIiQBtybWC3TF/Qdiriq/WB7zCWBfJ4MSZSdil533XJZsP
21PodTtev4LKsL0adzLFsD/35I34awNwPXAo5IDuE1yZNnk+LZMGHYmE2+5W
sxDarYhOy5ZCOvhMyEoGkJR/QRjhyoM3ahmrY/JHwanBbQ2B0oKGpdenYpNl
qJPZIw09MIUxNn+tYScUYeB4R3iQhwj83ZgEurgNQ8ljjR6fN2E1y17eG/ge
PCyEkvJfxzDcdrHz6D8cZGev013IEWBT9eHaeKNF3L6129zuVwnqfR9RMnNn
EnReFWh07lQAq+uRZ2OBEJtRh1ecPgrrIuHUno2z4D9X9Qd1gguim7GOVX4q
cAw53+JhycbMHTbZi2PD6H/FgBloNYREYlWUxoEFmPA/s955aQ7G8x0irdcM
4XhW8LWHCi42R67SpJ9VIrGikGxlKsWwUTZnOkkGFyni3IBzfVgRxK3g7x1B
I5v69iBfAS4VGO7yOM6Bc6e0+brmXPCgaFwhpxBI75d/aHHyXADd557xgi4p
2raRU593D2B8fE3HwxI5zuQ2+ohOCLGyv6/KNWAWAt86mGdtoMPGkdRP7tYp
8JCXyW52sRxnIx2j5KQRiM7z05cgF81CU8MSDnOQQZlvnVCUgU6GZ916Ch83
xTU8NeHJ0EB/f0aTsBcqsbB200seUPN8C+X7JHhbtDZC/fJb3PGmdkv1tnEM
ljMe8Eu7MeXvtACzIB7ml42fOqYmxZtON8rLjQRg7F7YfIHPgeOPUjT4p4fw
0yeDlFU5Q1hgvkKkzhDg0yuB7ta8DtR7JqL7RL2HHx840Nt0G4FZb/dIk1QD
zfeDPg/e3AgNH+eN7jvIA/WPpKqc8xOoLnTtnd49gqumUzb52DNBvPNwT4W1
HH7X2zn57a1xIKdV2y7/IkWjk5YVlNcKZAy71f9ZwwMzOTeGZKwCCyvU7D4S
is1jQmZDkArniUIGy7cLci99b28X/wbanBO2bT37MzgaRvfTRmXI4MDtL45O
gPHXovoXPBnUcH582SnvhnB1ttnm33jYuyFzHXNBgb6BPd/kCOiY6cKz0Q9u
gfnmWTJdfxjvD7OGz5ZI8XZbBXFD9CTe2t7n8rtWFy58YpKr9ZqBll7h+bH/
TCPTSmpj+O0ItOoHu9Kyk7FBOW6QbS6Cg2alhuMrG2BV/CW3FQeF4JqURV7r
I4PR2ofP2kEJhYt3Eo+oDUD/nxl+OSEfcLVWlrPkGyU+P+F70mBbLzRxl9+V
9fQDScOtvf5GOuC45nVCwjyqymjiJy1L+FnyMYurnu+BnUCNoPwwDYVPi9TY
wzLw+vTa6bS3cvj7SzuSed8QVlT6nW1OHkHCoe2Bxx7QwP0PicVpNTbwuAyN
oh3z+Ew5N9nrIcOctVxn0ysifEBV55vO1eNv7V/FhV8UYau71s2eKh7mPUzR
Ka0fgGRFqQbxYh1SXXk19C29yGzWXnYyHYZ83asWsv+/an53xyVOBpYbac+/
biCQhrJfpN3XXgJSlN6po/v6gUZQtR6mTmDtzD0OlSEGtcT570xsu2CQUMxd
/kIB1JhQ4dCyBBpaN77rkI6CqujQzPHyJViui4tOeSdHlln+yXMOYrR87K72
wluMDkW0iMoTMtyaqm2Ut1YFvs6gukxtwtxWIDslqpFaN1sv3PNeAINgWmRc
tBBIbL3sLnc27tkPCZ0HBjDYIOOtbXEP/AsQqXhi
        "]]}, 
      {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
       0.009166666666666668], AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwV0/8/E/oewPHZbJxc03B266QjeqhJdSuSg9v7o+NG+ZJQD9w4Ch1TRNzE
lK9RFtGJW0qULzmOsxPLl1vxEQ2hyUE5eZAYZvNlNrLZxj3nh9fj+Re8TM5c
8AwhEgiE4D/7y50qkfqg5gS26Kb2TEcQUUZARWJZ2gpmJ499U4XVkO0U7f87
U4XrNI2NmplzwCT8IW/6UoOz8pm7HUJXINgtyMC76CPgHxujXt8kILqu0cUB
+jMoGHdwrm8iIQ+O2OjKERX2eLViY1nSDc8jH5ekxpZC7tPSVwY5JBTBolLc
OwiIG7c5q6WZjL7bunKgVTECMX3dDxaTSOj7kT/G/KRiHLElXqOq5TNQm+w2
DWYsYdbeqtB3bCl8PFJRaqBYxNbjOiKWSg1BXhxX+cIUDtC0q9jn9wVexrgq
7a1l2DW3wgSbDwJdYHXzeN8wdsi+5T5FJyA/KftdK0UK27Bnf6ZACS3cm5rm
0wLsQzsuLz0gASX3uveWFznwU2Gx3p0iCsrZ3M+8bPIc775l45IiXIKXZZ8c
O7nTcNKIHc0blsMjHt1zd/gUDta2MMiflYH7eSOiOLYNzkOQaYOWEsbmGD1+
PyyCnEz2OQar4PyGFlTzWQI7JPn73flaKClLcFJpLoblc+XmVXQtxL43VVw2
Tmy2sW0INLghhdr4U79wSrOxkskffTslgai2f70ouCvClbeimMctFWCZvjkw
VTmCLwcHvXs2Q0K9Kheyy6YFLCHf19fznwOP/zAvhf/9Pq6I9khOvKuN5n6L
2u7u24tpzm6qzs5VMBEEJT/jvgGvpseVJnUU9IgYEIj6eiFjQS/h1yfL4CAz
bSx3EEJD4KhnYZo2Or5x6HJqoQQLhw5nuvJfQ5YV360nmQv0XOtPxjq6SGp4
Wd/VgYiOMZZDPn9PQ5f2ll19LpiED3zktpu6Ho1cufqT4gyxmRGvF/8J90BW
75um+AEJ/DM8LYit+Aot+4ctN9aX47uxbyN7ligohJfqFZRKRJ1s4699PNah
eeoqV+zLhzDv0g9HhzWRqj8uVFI9CAI4MmN2iISyu8IynhcvYR/6vW20fR9g
qUHDyVQhxVU9CpbKWwY874D6/U3DwNSdTG79loimWFqJdoky+HJBa5ItIqH+
H3WSGFQeHG3aXntJn4CSqgrGvmXN4e1q4YK2jIiiGUbO239px5S5mBT5Rk3E
O8x/5B2lwCt+Q576zDHQnthLeDBTB8E1CWndvUT0nsF8+/DkLCSG4P9Wp1EQ
5SJvrPLmKJjU5x180UdEVwMvtO0cncbzM5q7FOIvoGaUJWnZDkMKL+sIC2RQ
svHA/Gz1MthmciyjrLRRVbVcN6dkCgi/DryMP0dCWcSlf2y6JsdJ9Dhxo2oC
tlId15K8V8B2Vl+56+h6pFa4jKf4tuOS/IsFqkISetivbSdqnsbo9v7VQwoZ
vN/wtWkBaxLnG95wml3VQJEJH665/JwB4+tqPMJfEtFcROjta2tS6LJwW3v1
TgN5caqXqT8sgFueugOerIJ0gyquolyJCRsGDsa0JeLcdP757MUp7Hm7i/nz
6T//4gyaQeQ8CFfmpbWGNFTkqRdG6ZqGgphE+xkNTfS3h03vm2lSLDzrU+px
aAwS1vFNM3+fx8ZvG/u4znJQi6JTB9onwDFhLW/HGRJK793pyA2sB317RlRs
twDmtz6ubTizAvfsN9brDuoj/k6NZEKbGO5Z7hMyamlorbz11WAFD0rJlCgL
cx0UMCOguRVyIafbmlNqJYfKVN+a3A4l3E24btxa9xUyS+roEB4U4ENzI2v0
MDU4B0wY+auGoNosQGPPAyk8BaLvMuc9nuw8TRKdloLPv7e06Bar4b6dhc2p
c+vRHlVjhDmnD/oTbpX5uk3DCS8zRcprMWyrHzzGsZFDppOu9V4gNef4b6Ff
QyuYrPScMemYANUOZeSGMTL635P2S8+uC/CkrJmi6TgOm+2KWAsFn4AacNjG
/RQJ5a0vjuGbiiB+FBu+ZpERqess8URDC+beOLurkK2GoVNxer0DS3CnsOhY
IVDRNzqxZWYVEnBpT9vnfGIRwq8bVV55I4EgV/uPYdVaqPbj5OTTvM9w4rvH
vlbpJLRnLM72yblR/FuIlmF66AJQW6eFTqI7eNA0zqOuTwb/ByugKkA=
        "]]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.009166666666666668], AbsoluteThickness[1.6]}, 
      {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
       0.009166666666666668], AbsoluteThickness[1.6]}, {}, {}, {}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.009166666666666668], AbsoluteThickness[1.6]}, 
      {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
       0.009166666666666668], AbsoluteThickness[
       1.6]}, {}, {}, {}}}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJwt1Ps/1XccwPFzjnMc50NuHyrSTZtKO4VWSrbvG9nRquPSqAdzmcumKKYe
xUjkOEKPClEdVA6dyJrWlpD6fkKXoYNyK1MKh4ricOogbHs89sPr8fwPXksD
IzxCWAwGY/u//efhge3K2VlMHAXEwfcpIorYuaquT5hExUtVK9sQEeq/+Hhz
ApOLN0QlH5oRWbIxcjpiDJOZZVsMTj1EpCYtU6tHgUk543FPzU1EtFZ3LCKP
MLGs6j2yIgeR0wcCtibkYmLE594Z80CklLm/iGGLSZ+h0C6tkUc4IQIbE19D
0tpdkGRaokVw571waYYBuegeNjx5lks8aiVBK+v1iWm6abf1CU0S+/6r8FO9
eqSn9uTCxnAOqTgk2VPmqktEl36JL/djE2Gm55KZczrkgHiVFdtOgwjybwtd
hhAx5Nf8VGzKIrIHMe37fXjkeJycztNlEj/RaeOmYi6R5Ti0DHbM0vEBGr9p
Y03yPrklaEPlNM3gL6adktkkg8Fnrbs0RT9LP5dS2sYi8hgjR3XQBG2GQkvG
HZmkbvNAjc+Wj3TYOktOl9ks7an7TX8yU0UH2T4vrq2doiEoEvvWKWnLaLvZ
fUVqupcnPtp6dYQu6N5RF+Ogop38XC0+bx2iBxKN7QXzlbTNtt1/vTw3SFdl
r3Ae9Bqmd9rmlq3i9NFWr5+Or8lX0P5RD70vaL+gN1d18aa9euixaq536OV2
OrKkTG2An9CDGu/unDFroL1+XFbwOK6SDrQVSu9+/Sf9oPFp2todFZTi/pyJ
8qVXKDv+3etuZ55Q3yKhA1fykGIdNP472KSHSkNH/FxvtVJcHbfEwHcKKtF4
eU7C824qqafdKapwmEqNcWuKD+ulruWK3eKVo1RPXXlLnGSAipAG6/d5qSgm
5mQMLxui/PZIFqYkqqlOv68HdK1GqFT3gxvX5k1R7cWrJ2OclBTbKFtxZHKG
2jCeGbZINE51NCSPiPSY8HJYO8/8/AfKMzZwvaSWBSODasuAfjUVrv3WXO7N
BkHmZPQ0Z4paXHo/R/MNBxyvWd0aXjBNxVY47dDL5UJh0zOfef6zVKQsvHz9
Gh7I5I2+zbcZoMOyDVzdj+CL9Yrq318xwXnvd9mWWTqg2WmSY8/SgPmVCyOc
P9MFdkuH8JAuGzKjjmVYdejB9fqmcqE1BzzErvz8cn0QL/CYaQNNsPQReRYd
NoBfZe9oza1caFfwpFmehiCyuWfVGqYF8sB+B8PFGBKMLRLdY3jwkn1ZnW2O
QbnBqZUdz4NxWWiZiQWGwO8Dllcc5YHJ27dmS/kYHAsljxYd50HwfuXHNZsw
sK31TIfO82Ayafbq9p0YxNvU18V1PLC4ZGKaehLDiaT6vlt6CDYKupp1sjDM
yAZsI4wQbHudl3IqB0NkPTvd3ATBz/wlqjP5GNwMKOtUcwTVNyyaZaUYDC/8
cdhrHQKP+2vFdQ8wnK7KmzvqjSAkVGXv0oBB83nl7iJ/BNHo5liDHMNBZkf1
zmAE+UK7H560YfByMQi6sxfBYDvYv+rFML89uSw9AcFkNGssZADDsQkpi0pG
MGdBXcnrNxjUZsRTmYrAxl8wb3QUQ2fQ5NSuLATOTJ78gAqDS8o8V52zCHYV
1ovUagxVV76U0nkI9jgf3xT3CcMKubsqqgDB//8Cyeg+FwsZgn8A+75CqQ==

        "]]},
      Annotation[#, "Charting`Private`Tag$36481#1"]& ], 
     TagBox[
      {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJwt1Ps31GkcwPExkdswM575ymzTSus4pVCcSGZ7PpFlF6Pc6tQmTSMTitJW
cklhLNWp3AqpXBKrstueaiTn+Ya0B5EuarLbEkYuyW2YkNndc/aH93n9B28L
cZRfKJPBYPj8238m9PuMazSIll21T4g4rSLKOFNV5xyie42me7WTVUTE+Xv6
/mdEQ3yN95XjKrLUOfpL1ASi57ZtErTvU5G6jEy9LiWiI02Cahw9VUTP9vXX
9FNEB6XGftbSUZHswyFeSQWIXh5B/3QpcZJUasWUMpwQ3eQoOvD44ATRCfWw
5+80oX9pUTGU1mMEvXkcWXyBS6dIuRU+1Ajxq8/fs6KJQ0tFrWErBgdI3Kdv
I8/3sOmUNSX7MiV9RH40P7zK15jmyEUfXVZ1E1Fm4NL5PBZdftRS2mevIB6F
tSLPYQP60k2Fpe66Z6TsSWxHzA59OqloNPtGMCHBKdlUW7kuDaambmcVWTgx
ZMFtQ7SQTvLsQXej6zHDxpy4pWrT8upkjlTvOX57Oi+t8hWTbnjZx9lh1IkF
BtKKSVct+kjAU5myphtHrLXW6RRoSMAjtmumlxLvcXpXXl8/SxIX1fT1PB7E
1sfWaw6Uqsm6pnO6qvERXPSXf0PsRhV5h61ihLVjuP8kJfQwGydKzzyL4LcT
+EHOcvcPQR9JgH+SbbXlFF49oJi0K1SSsOcFdmESNd70oFP/S1AXqdM0fzqc
MIOjK6rUXPSCnLKNNn5YP4eD9n5T9Dy+mqQbrhgW98zjJy2KDAd/OS6wNdxl
G8+A9TaP7my++AJbvnGZ9ijUAuYR6k8Jvwu3v5k6wK1kgi5r80nxiBKvfjuU
c7RtASR3dbgdKvmI31Ozjmkj2vBrgWxz4vgYlpdn3/9uRgeiiiWc3iAVBqG0
v1igC8Hh+UvSTqrxsFXj1O2VepC+5Yizw+VZPOi1IUmyVh+0eTnKEzPz+PLB
Ufm9QAN43Zw6msLWguiRVe1ysSEExokd8+uZoI4oubRVxoJIw6Flrdu1oQRK
cVmuEZhXNuYuHNSBa74k5EqRMcTJ3fzZBbqwZRdvjUM9G6LLIu852ukD6okd
rZFygMV0Etv2GUBH7sJrq2Y54L4/IMc6iwV1YddY4xlcMKteEuVuaQyuEo2U
zTWBzEM/X1j9mg383bOCuGIT8JP52hTe48Cp9If0BmsE1jtSAksTuGDalmGx
tQpBh1K/OCvQBJjUlKIW86BV3LfRxBxBkszqVHwjD7q1b6hzliFYZ3Z3Zccf
PJgsk1bxrRCMVri9smvmAX9oSGBhgyDkacjynjYeSGLGp+1cELjyClq/V/Bg
Jllzy2crggXF7MWLhnlgdZ3/Vfo5BLJa9e+/cSlw9uh8xspCgH3TdhryKPAe
uJx2PheBuovSDTWl4KDNUtXFQgRSbYftZospeHjX6llZJQJPr/2ME5YU+DU6
yBqeIDBQdHt7O1EQKlUJPZsR1IVHT113puCYwf2J5lYEx+fmr2pcKCgUrd/9
4hWCIXPBxB2g4EMHCN/3IGjZG5TH/4GCmWPMidB+BCnqXtcYbwqMFjdUDAwi
EGbEDLeIKLDf5bFobAzBzVvncZI/Be5a+q2HVQgk2HxAEUjBtpKmFLUagaD9
VqbDNgrC3c+4xM8heCkWCs9up+D/f8GZyaY+5Y8U/APG2j1h
        "]]},
      Annotation[#, "Charting`Private`Tag$36481#2"]& ]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.405855581550843, 2.314154293497881}, {-1.9239730041111884`, 
   4.710989819445921}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[69]=",ExpressionUUID->"1c591215-03dc-45ce-a025-2b06f107ad7e"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["sparseAssociation", \
"Subsection",ExpressionUUID->"26e3ab04-da92-4478-8bd1-7bbb8b6a2afc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "sparseAssociation"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"2d8ddbf0-decb-4a5e-b02b-e61a020df293"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "___"}], "]"}], ":=", 
                    RowBox[{"Association", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`array_", "?", 
                    "ArrayQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`keys", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"{", "__List", "}"}], ",", "_List"}], "]"}]}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`default", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_List", "|", "_Rule"}], "]"}], ":", "0"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`array", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`keys", ",", 
                    RowBox[{
                    "ArrayDepth", "[", 
                    "FunctionRepo`sparseAssociation`Private`array", "]"}]}], 
                    "]"}], ",", 
                    "FunctionRepo`sparseAssociation`Private`default", ",", 
                    "FunctionRepo`sparseAssociation`Private`opts"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`array_", "?", 
                    "ArrayQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`keys", ":", 
                    RowBox[{"{", "__List", "}"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`default", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_List", "|", "_Rule"}], "]"}], ":", "0"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`dims", "=", 
                    RowBox[{
                    "Dimensions", "[", 
                    "FunctionRepo`sparseAssociation`Private`array", "]"}]}], 
                    ",", 
                    RowBox[{"FunctionRepo`sparseAssociation`Private`lvl", "=", 
                    RowBox[{"OptionValue", "[", "\<\"Level\"\>", "]"}]}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`\
isparseAssociation", "[", 
                    RowBox[{
                    RowBox[{"ArrayRules", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`array", ",", 
                    "FunctionRepo`sparseAssociation`Private`default"}], "]"}],
                     ",", "FunctionRepo`sparseAssociation`Private`keys"}], 
                    "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`lvl", "===", 
                    "Automatic"}], "&&", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`checkKeyDims", 
                    "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`dims", ",", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`sparseAssociation`Private`keys"}]}], 
                    "]"}]}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`array_", "?", 
                    "ArrayQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`default_", ":", 
                    "0"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"FunctionRepo`sparseAssociation`Private`lvl", "=", 
                    RowBox[{"OptionValue", "[", "\<\"Level\"\>", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`\
isparseAssociation", "[", 
                    RowBox[{"ArrayRules", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`array", ",", 
                    "FunctionRepo`sparseAssociation`Private`default"}], "]"}],
                     "]"}], "/;", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`lvl", "===", 
                    "Automatic"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`expr_", ",", 
                    "FunctionRepo`sparseAssociation`Private`keys_List", ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`default_", ":", 
                    "0"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`level", "=", 
                    RowBox[{"OptionValue", "[", "\<\"Level\"\>", "]"}]}], ",",
                     "FunctionRepo`sparseAssociation`Private`assoc", ",", 
                    "FunctionRepo`sparseAssociation`Private`keyList"}], "}"}],
                     ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`keyList", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`keys", ",", 
                    RowBox[{
                    RowBox[{"FunctionRepo`sparseAssociation`Private`l", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"{", "__List", "}"}], "]"}]}], "\[RuleDelayed]", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"FunctionRepo`sparseAssociation`Private`l", ",", 
                    "FunctionRepo`sparseAssociation`Private`level"}], 
                    "]"}]}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`assoc", "=", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`\
positionAssociation", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`expr", ",", 
                    RowBox[{
                    "Except", "[", 
                    "FunctionRepo`sparseAssociation`Private`default", "]"}], 
                    ",", 
                    RowBox[{
                    "{", "FunctionRepo`sparseAssociation`Private`level", 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`sparseAssociation`Private`assoc", "]"}], "&&", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`checkKeyDims", 
                    "[", 
                    RowBox[{
                    RowBox[{"Activate", "[", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"Inactive", "[", "Max", "]"}], "@@", 
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`sparseAssociation`Private`assoc", "]"}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`sparseAssociation`Private`keyList"}]}], 
                    "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`\
isparseAssociation", "[", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{
                    "Normal", "[", 
                    "FunctionRepo`sparseAssociation`Private`assoc", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"{", "_", "}"}], "\[Rule]", 
                    "FunctionRepo`sparseAssociation`Private`default"}]}], 
                    "]"}], ",", 
                    "FunctionRepo`sparseAssociation`Private`keyList"}], "]"}],
                     ",", "$Failed"}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    "IntegerQ", "[", 
                    "FunctionRepo`sparseAssociation`Private`level", "]"}]}]}],
                     "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`expr_", ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`default_", ":", 
                    "0"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`level", "=", 
                    RowBox[{"OptionValue", "[", "\<\"Level\"\>", "]"}]}], ",",
                     "FunctionRepo`sparseAssociation`Private`assoc"}], "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`assoc", "=", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`\
positionAssociation", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`expr", ",", 
                    RowBox[{
                    "Except", "[", 
                    "FunctionRepo`sparseAssociation`Private`default", "]"}], 
                    ",", 
                    RowBox[{
                    "{", "FunctionRepo`sparseAssociation`Private`level", 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`sparseAssociation`Private`assoc", "]"}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`\
isparseAssociation", "[", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{
                    "Normal", "[", 
                    "FunctionRepo`sparseAssociation`Private`assoc", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"{", "_", "}"}], "\[Rule]", 
                    "FunctionRepo`sparseAssociation`Private`default"}]}], 
                    "]"}], "]"}], ",", "$Failed"}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    "IntegerQ", "[", 
                    "FunctionRepo`sparseAssociation`Private`level", "]"}]}]}],
                     "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"\<\"Level\"\>", "\[Rule]", "Automatic"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`sparseAssociation\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> "", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`sparseAssociation, {
      FunctionRepo`sparseAssociation[{}, 
         BlankNullSequence[]] :> Association[], FunctionRepo`sparseAssociation[
         PatternTest[
          Pattern[FunctionRepo`sparseAssociation`Private`array, 
           Blank[]], ArrayQ], 
         Pattern[FunctionRepo`sparseAssociation`Private`keys, 
          Except[{
            BlankSequence[List]}, 
           Blank[List]]], 
         Optional[
          Pattern[FunctionRepo`sparseAssociation`Private`default, 
           Except[
            Alternatives[
             Blank[List], 
             Blank[Rule]]]], 0], 
         Pattern[FunctionRepo`sparseAssociation`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`sparseAssociation[
        FunctionRepo`sparseAssociation`Private`array, 
         ConstantArray[FunctionRepo`sparseAssociation`Private`keys, 
          ArrayDepth[FunctionRepo`sparseAssociation`Private`array]], 
         FunctionRepo`sparseAssociation`Private`default, 
         FunctionRepo`sparseAssociation`Private`opts], 
       FunctionRepo`sparseAssociation[
         PatternTest[
          Pattern[FunctionRepo`sparseAssociation`Private`array, 
           Blank[]], ArrayQ], 
         Pattern[FunctionRepo`sparseAssociation`Private`keys, {
           BlankSequence[List]}], 
         Optional[
          Pattern[FunctionRepo`sparseAssociation`Private`default, 
           Except[
            Alternatives[
             Blank[List], 
             Blank[Rule]]]], 0], 
         Pattern[FunctionRepo`sparseAssociation`Private`opts, 
          OptionsPattern[]]] :> 
       With[{FunctionRepo`sparseAssociation`Private`dims = 
          Dimensions[FunctionRepo`sparseAssociation`Private`array], 
          FunctionRepo`sparseAssociation`Private`lvl = OptionValue["Level"]}, 
         Condition[
          FunctionRepo`sparseAssociation`Private`isparseAssociation[
           ArrayRules[
           FunctionRepo`sparseAssociation`Private`array, 
            FunctionRepo`sparseAssociation`Private`default], 
           FunctionRepo`sparseAssociation`Private`keys], 
          And[FunctionRepo`sparseAssociation`Private`lvl === Automatic, 
           FunctionRepo`sparseAssociation`Private`checkKeyDims[
           FunctionRepo`sparseAssociation`Private`dims, 
            Map[Length, FunctionRepo`sparseAssociation`Private`keys]]]]], 
       FunctionRepo`sparseAssociation[
         PatternTest[
          Pattern[FunctionRepo`sparseAssociation`Private`array, 
           Blank[]], ArrayQ], 
         Optional[
          Pattern[FunctionRepo`sparseAssociation`Private`default, 
           Blank[]], 0], 
         Pattern[FunctionRepo`sparseAssociation`Private`opts, 
          OptionsPattern[]]] :> 
       With[{FunctionRepo`sparseAssociation`Private`lvl = 
          OptionValue["Level"]}, 
         Condition[
          FunctionRepo`sparseAssociation`Private`isparseAssociation[
           ArrayRules[
           FunctionRepo`sparseAssociation`Private`array, 
            FunctionRepo`sparseAssociation`Private`default]], 
          FunctionRepo`sparseAssociation`Private`lvl === Automatic]], 
       FunctionRepo`sparseAssociation[
         Pattern[FunctionRepo`sparseAssociation`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`sparseAssociation`Private`keys, 
          Blank[List]], 
         Optional[
          Pattern[FunctionRepo`sparseAssociation`Private`default, 
           Blank[]], 0], 
         Pattern[FunctionRepo`sparseAssociation`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`sparseAssociation`Private`level = 
          OptionValue["Level"], FunctionRepo`sparseAssociation`Private`assoc, 
          FunctionRepo`sparseAssociation`Private`keyList}, 
         Condition[
         FunctionRepo`sparseAssociation`Private`keyList = 
           Replace[FunctionRepo`sparseAssociation`Private`keys, 
             Pattern[FunctionRepo`sparseAssociation`Private`l, 
               Except[{
                 BlankSequence[List]}]] :> 
             ConstantArray[
              FunctionRepo`sparseAssociation`Private`l, 
               FunctionRepo`sparseAssociation`Private`level]]; 
          FunctionRepo`sparseAssociation`Private`assoc = 
           FunctionRepo`sparseAssociation`Private`positionAssociation[
            FunctionRepo`sparseAssociation`Private`expr, 
             Except[FunctionRepo`sparseAssociation`Private`default], {
             FunctionRepo`sparseAssociation`Private`level}]; If[
            And[
             AssociationQ[FunctionRepo`sparseAssociation`Private`assoc], 
             FunctionRepo`sparseAssociation`Private`checkKeyDims[
              Activate[
               Thread[
                Apply[
                 Inactive[Max], 
                 Keys[FunctionRepo`sparseAssociation`Private`assoc]]]], 
              Map[Length, FunctionRepo`sparseAssociation`Private`keyList]]], 
            FunctionRepo`sparseAssociation`Private`isparseAssociation[
             Append[
              Normal[FunctionRepo`sparseAssociation`Private`assoc], {
                Blank[]} -> FunctionRepo`sparseAssociation`Private`default], 
             FunctionRepo`sparseAssociation`Private`keyList], $Failed], 
          IntegerQ[FunctionRepo`sparseAssociation`Private`level]]], 
       FunctionRepo`sparseAssociation[
         Pattern[FunctionRepo`sparseAssociation`Private`expr, 
          Blank[]], 
         Optional[
          Pattern[FunctionRepo`sparseAssociation`Private`default, 
           Blank[]], 0], 
         Pattern[FunctionRepo`sparseAssociation`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`sparseAssociation`Private`level = 
          OptionValue["Level"], FunctionRepo`sparseAssociation`Private`assoc}, 
         Condition[
         FunctionRepo`sparseAssociation`Private`assoc = 
           FunctionRepo`sparseAssociation`Private`positionAssociation[
            FunctionRepo`sparseAssociation`Private`expr, 
             Except[FunctionRepo`sparseAssociation`Private`default], {
             FunctionRepo`sparseAssociation`Private`level}]; If[
            AssociationQ[FunctionRepo`sparseAssociation`Private`assoc], 
            FunctionRepo`sparseAssociation`Private`isparseAssociation[
             Append[
              Normal[FunctionRepo`sparseAssociation`Private`assoc], {
                Blank[]} -> FunctionRepo`sparseAssociation`Private`default]], 
            $Failed], 
          IntegerQ[FunctionRepo`sparseAssociation`Private`level]]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> {"Level" -> Automatic}, 
    "Attributes" -> {}, "FullName" -> "FunctionRepo`sparseAssociation"], 
   False]]], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"451b139f-1f00-42b2-816c-6c8b74835882"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["tukeyMedianPolish", \
"Subsection",ExpressionUUID->"e9e75c8c-5552-4968-99ba-f046fd15b3b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "tukeyMedianPolish"}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"5da7d7b8-e171-4eca-a0c1-852ad28cf372"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"tukeyMedianPolish[mat] performs the Tukey median \
polish algorithm to find row and column effects in a data matrix.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" DownValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DownValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DownValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
mat_List", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
outputType", ":", 
                    
                    RowBox[{"\<\"Matrix\"\>", 
                    "|", "\<\"PropertyAssociation\"\>"}], 
                    ":", "\<\"Matrix\"\>"}], ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
try", "=", 
                    RowBox[{
                    RowBox[{
                    "tukeyMedianPolish", "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", "]"}], "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
mat", "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
try", ",", 
                    RowBox[{
                    "_", "?", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
validOutputQ"}]}], "]"}], ",", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
outputType", ",", "\[IndentingNewLine]", "\<\"PropertyAssociation\"\>", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
propAssoc", "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
try", "]"}], ",", "\[IndentingNewLine]", "_", ",", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
try"}], "]"}], ",", "$Failed"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
compilationOpts", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"OptionValue", "[", "Compiled", "]"}], "}"}], 
                    "]"}]}], ",", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
cf"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
fun", "=", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish", "[", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`\
Private`opts", "}"}], ",", 
                    RowBox[{
                    "Options", "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish", "]"}]}], "]"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
cf", "=", 
                    RowBox[{"Compile", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
m", ",", "_Real", ",", "2"}], "}"}], "}"}], ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
fun", "[", "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`m", 
                    "]"}], ",", 
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
compilationOpts", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}]}], "]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
cf", "[", 
                    RowBox[{"RandomReal", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}]}], "]"}], "]"}], ",", 
                    "NumericQ"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", "]"}], "=", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
cf"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"tukeyMedianPolish", "::", "compileFail"}], 
                    "MessageName"], "]"}], ";", "$Failed"}]}], "]"}]}]}], 
                    "]"}], "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
compilationOpts", ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], 
                    "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
mat_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    "]"}], "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{
                    "Dimensions", "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
mat", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "Positive"}], ",", 
                    RowBox[{"_Integer", "?", "Positive"}]}], "}"}]}], "]"}]}],
                     ":=", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish", "[", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`\
Private`opts", "}"}], ",", 
                    RowBox[{
                    "Options", "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish", "]"}]}], "]"}]}], "]"}], "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
mat", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], "|", 
                    RowBox[{"_", "?", "MatrixQ"}]}], "]"}], ":=", 
                    RowBox[{"{", 
                    RowBox[{"{", "}"}], "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", "_", 
                    "]"}], ":=", "$Failed"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   PaneSelectorBox[{True->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    False),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"], False->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    True),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]]], 
                   PaneSelectorBox[{True->GridBox[{
                    {
                    RowBox[{"MaxIterations", "\[Rule]", "100"}]},
                    {
                    
                    RowBox[{"\<\"ConvergenceTest\"\>", "\[Rule]", 
                    "Automatic"}]},
                    {
                    RowBox[{"Tolerance", "\[Rule]", 
                    RowBox[{"Scaled", "[", "0.0001`", "]"}]}]},
                    {
                    
                    RowBox[{"\<\"LocationEstimator\"\>", "\[Rule]", 
                    "Median"}]},
                    {
                    RowBox[{"Compiled", "\[Rule]", "False"}]},
                    {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","5","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.}}}], False->
                    RowBox[{
                    RowBox[{"MaxIterations", "\[Rule]", "100"}], 
                    "\[ThinSpace]", 
                    StyleBox["\<\"\[Ellipsis]\"\>", "InformationRowOpener",
                    StripOnInput->False], "\[ThinSpace]", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","5","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]],
                    BaselinePosition->Baseline,
                    ImageSize->Automatic]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`tukeyMedianPolish\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"tukeyMedianPolish[mat] performs the Tukey median \
polish algorithm to find row and column effects in a data matrix.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "tukeyMedianPolish[mat] performs the Tukey median polish algorithm to \
find row and column effects in a data matrix.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`tukeyMedianPolish, {
      FunctionRepo`tukeyMedianPolish[
         Pattern[FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`mat, 
          Blank[List]], 
         Optional[
          Pattern[
          FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`outputType, 
           Alternatives["Matrix", "PropertyAssociation"]], "Matrix"], 
         Pattern[
         FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]] :> 
       With[{FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`try = 
          FunctionRepo`tukeyMedianPolish[
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts][
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`mat]}, 
         If[
          MatchQ[FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`try, 
           PatternTest[
            Blank[], 
            FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
validOutputQ]], 
          Switch[
          FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`outputType,
            "PropertyAssociation", 
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`propAssoc[
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`try], 
           Blank[], 
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`try], \
$Failed]], FunctionRepo`tukeyMedianPolish[
         Pattern[
         FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
compilationOpts = Flatten[{
             OptionValue[Compiled]}], 
          FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`cf}, 
         Condition[
          
          With[{FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`fun = 
            FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish[
              Apply[Sequence, 
               
               FilterRules[{
                FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts}\
, 
                Options[
                FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish]]]]}, 
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`cf = 
            Compile[{{
               FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`m, 
                Blank[Real], 2}}, 
              FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`fun[
              FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`m], 
              Evaluate[
               Apply[Sequence, 
                Cases[
                FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
compilationOpts, 
                 OptionsPattern[]]]]]; If[
             MatrixQ[
              FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`cf[
               RandomReal[1, {3, 3}]], NumericQ], 
             FunctionRepo`tukeyMedianPolish[
              FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts] = 
             FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`cf, 
             Message[
               MessageName[
               FunctionRepo`tukeyMedianPolish, "compileFail"]]; $Failed]], 
          MatchQ[
          FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
compilationOpts, {True, 
            OptionsPattern[]}]]]}], "SubValues" -> 
    Information`InformationValueForm[
     SubValues, FunctionRepo`tukeyMedianPolish, {Condition[
         FunctionRepo`tukeyMedianPolish[
          Pattern[
          FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts, 
           OptionsPattern[]]][
          PatternTest[
           Pattern[
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`mat, 
            Blank[]], MatrixQ[#, NumericQ]& ]], 
         MatchQ[
          Dimensions[
          FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`mat], {
           PatternTest[
            Blank[Integer], Positive], 
           PatternTest[
            Blank[Integer], Positive]}]] :> 
       FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish[
         Apply[Sequence, 
          
          FilterRules[{
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts}, 
           Options[
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish]]]][
        FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`mat], 
       FunctionRepo`tukeyMedianPolish[
         Pattern[
         FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]][
         Alternatives[{}, 
          PatternTest[
           Blank[], MatrixQ]]] :> {{}}, FunctionRepo`tukeyMedianPolish[
         Pattern[
         FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]][
         Blank[]] :> $Failed}], "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     MaxIterations -> 100, "ConvergenceTest" -> Automatic, Tolerance -> 
      Scaled[0.0001], "LocationEstimator" -> Median, Compiled -> False}, 
    "Attributes" -> {}, "FullName" -> "FunctionRepo`tukeyMedianPolish"], 
   False]]], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"6c76b9ec-7c94-4ecd-8345-4ccc5db21da1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"matrix", "=", 
   RowBox[{"N", "@", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"10", ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "6"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", "matrix", "]"}]}], "Input",
 CellChangeTimes->{{3.791273680562056*^9, 3.791273714049474*^9}, {
  3.7912737784727316`*^9, 3.791273778660079*^9}, {3.7912739431915703`*^9, 
  3.7912739436836433`*^9}, {3.7912745920644417`*^9, 3.791274592298622*^9}},
 CellLabel->"In[7]:=",
 CellID->443871870,ExpressionUUID->"ddd76005-0bdf-4eef-a2b1-e27c86ce4923"],

Cell[BoxData[
 TagBox[GridBox[{
    {"1.`", "10.`", "4.`", "2.`", "8.`", "0.`"},
    {"4.`", "5.`", "8.`", "9.`", "5.`", "2.`"},
    {"5.`", "1.`", "2.`", "4.`", "3.`", "7.`"},
    {"2.`", "5.`", "3.`", "8.`", "4.`", "1.`"}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"bd5aa2e0-6763-436c-981a-d63800b35ed2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"polish", " ", "=", " ", 
   RowBox[{"tukeyMedianPolish", "[", "matrix", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"polish", ",", 
   RowBox[{"Dividers", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], "\[Rule]", "True"}], ",", 
      RowBox[{
       RowBox[{"-", "2"}], "\[Rule]", "True"}]}], "}"}]}]}], "]"}]}], "Input",
 CellLabel->"In[11]:=",
 CellID->19768148,ExpressionUUID->"9dfa27c0-9231-488f-a277-9ddedc89e8f9"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"-", "0.8506323350593448`"}], "6.149367664940655`", 
     "0.35063233505934477`", 
     RowBox[{"-", "4.19985072594136`"}], "4.05014927405864`", 
     RowBox[{"-", "0.35063233505934477`"}], 
     RowBox[{"-", "0.19985072594136`"}]},
    {"0.25`", 
     RowBox[{"-", "0.75`"}], "2.4512646701186895`", "0.9007816091179848`", 
     RowBox[{"-", "0.8492183908820152`"}], 
     RowBox[{"-", "0.25`"}], "1.6995169389992952`"},
    {"4.448976860381663`", 
     RowBox[{"-", "1.5510231396183372`"}], 
     RowBox[{"-", "0.3497584694996476`"}], 
     RowBox[{"-", "0.9002415305003524`"}], "0.3497584694996476`", 
     "7.948976860381663`", 
     RowBox[{"-", "1.4994599213823676`"}]},
    {
     RowBox[{"-", "0.25`"}], "0.75`", 
     RowBox[{"-", "1.0487353298813105`"}], "1.4007816091179848`", 
     RowBox[{"-", "0.34921839088201523`"}], "0.25`", "0.19951693899929523`"},
    {
     RowBox[{"-", "1.8993676649406552`"}], "0.10063233505934477`", 
     RowBox[{"-", "0.10063233505934477`"}], "2.44985072594136`", 
     "0.19985072594136`", 
     RowBox[{"-", "3.3993676649406552`"}], "3.94985072594136`"}
   },
   AutoDelete->False,
   GridBoxDividers->{
    "ColumnsIndexed" -> {-2 -> True}, "RowsIndexed" -> {-2 -> True}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellLabel->"Out[12]=",ExpressionUUID->"51011608-bb14-4776-9fb4-d2b7eed15c52"]
}, Open  ]]
}, Closed]]
},
WindowSize->{1810, 888},
WindowMargins->{{Automatic, 44}, {31, Automatic}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
ShowGroupOpener->True,
TrackCellChangeTimes->False,
Magnification:>1.3 Inherited,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]

