Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"PacletDirectoryAdd", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"<<", "FunctionRepo`"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[17]:=",ExpressionUUID->"db0bf3fb-3968-4b36-8211-5cb1fa482ae8"],

Cell[CellGroupData[{

Cell["conditionedMultinormalDistribution", \
"Subsection",ExpressionUUID->"d74078a0-641e-4aa0-a1a8-445f4149fb05"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "conditionedMultinormalDistribution"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"0784d209-d22f-45cd-b95f-ceab89a70fef"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"conditionedMultinormalDistribution[dist, {i1 -> \
val1, ...}, {j1, j2, ...}] gives the {j1, j2, ...} marginal of dist when the \
indices {i1, ...} are conditioned to values {val1, ...}\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist_", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ":=", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist"}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist_", ",", 
                    RowBox[{"{", "}"}], ",", "All"}], "]"}], ":=", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist"}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist_", ",", 
                    RowBox[{"{", "}"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals_"}], "]"}], ":=", 
                    RowBox[{"MarginalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist_", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rule_Rule", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rest___"}], "]"}], ":=", 
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "Thread", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rule", "]"}], "}"}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rest"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"MultinormalDistribution"},
                    "InactiveHead",
                    BaseStyle->"Inactive",
                    SyntaxForm->"Symbol",
                    Tooltip->"Inactive[MultinormalDistribution]"], "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov_", "?", "SquareMatrixQ"}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rest___"}], "]"}], ":=", 
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"MultinormalDistribution"},
                    "InactiveHead",
                    BaseStyle->"Inactive",
                    SyntaxForm->"Symbol",
                    Tooltip->"Inactive[MultinormalDistribution]"], "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}]}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov"}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rest"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
head", ":", "MultinormalDistribution"}], ")"}], "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu_", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`cov_"}], 
                    "]"}], ")"}], "?", "DistributionParameterQ"}], "|", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
head", ":", 
                    RowBox[{
                    "Inactive", "[", "MultinormalDistribution", "]"}]}], 
                    ")"}], "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu_", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`cov_"}], 
                    "]"}], "/;", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
lm", "=", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
lm", "===", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}]}], "&&", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
lm", ">", "1"}]}]}], "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Integer", "\[Rule]", "_"}], ")"}], ".."}], 
                    "}"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals", ":", 
                    RowBox[{"_Integer", "|", 
                    RowBox[{"{", "__Integer", "}"}], "|", "All"}], ":", 
                    "All"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
eval", "=", 
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`cov"}], 
                    "}"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`cov"}], 
                    "}"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m_", "?", "VectorQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
c_", "?", "MatrixQ"}]}], "}"}], "\[RuleDelayed]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
head", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`c"}], 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m_", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`var_"}], 
                    "}"}], "\[RuleDelayed]", 
                    RowBox[{"NormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m", ",", 
                    SqrtBox[
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
var"]}], "]"}]}]}], "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "ListQ", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
eval", "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu_", "?", "VectorQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov_", "?", "SquareMatrixQ"}]}], "}"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Integer", "\[Rule]", "_"}], ")"}], ".."}], 
                    "}"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals", ":", 
                    RowBox[{"_Integer", "|", 
                    RowBox[{"{", "__Integer", "}"}], "|", "All"}], ":", 
                    "All"}]}], "]"}], "/;", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"DuplicateFreeQ", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",",
                     "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "}"}], "]"}], "]"}], ",", 
                    RowBox[{"False", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    "conditionedMultinormalDistribution", "::", "dupIndex"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",",
                     "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "]"}], ";", "False"}], ")"}]}]}], "]"}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim", "=", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", "]"}]}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`dist", 
                    ",", "FunctionRepo`conditionedMultinormalDistribution`\
Private`sparseQ", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
numericQ"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ", "=", 
                    RowBox[{
                    RowBox[{
                    "Head", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}], "===", "SparseArray"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ", "=", 
                    RowBox[{
                    RowBox[{
                    "Head", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}], "===", "StructuredArray"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup", "=", 
                    RowBox[{"AssociationThread", "[", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",",
                     "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim", ",", "1"}], "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop", "=", 
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup", "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues", "=", 
                    RowBox[{
                    "Values", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup", "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
numericQ", "=", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", ",", "NumericQ"}], "]"}], "&&", 
                    RowBox[{"VectorQ", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues", ",", "NumericQ"}], "]"}]}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"All", "\[RuleDelayed]", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{
                    "Range", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim", "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop"}], "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
i_Integer", "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
i", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`dim", ",", 
                    "1"}], "]"}], "}"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
ints_List", "\[RuleDelayed]", 
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
ints", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`dim", 
                    ",", "1"}], "]"}]}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", "\[LeftDoubleBracket]", "#1", "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop"}], "}"}]}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop"}], "\[RightDoubleBracket]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop"}], "\[RightDoubleBracket]"}]}], "}"}]}], "}"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", "=", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
numericQ", "&&", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ"}], ",", 
                    RowBox[{"LinearSolve", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], "]"}],
                     ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
numericQ", "&&", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ"}], ",", 
                    RowBox[{"LinearSolve", "[", 
                    RowBox[{"SparseArray", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], "]"}],
                     "]"}], ",", "True", ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv", "=", 
                    RowBox[{"Inverse", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv", ".", "#1"}], "&"}]}], "]"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", "=", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ".", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues", "-", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
                    "]"}]}]}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ".", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ", ",", 
                    RowBox[{"SparseArray", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], "]"}],
                     "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    "\[RuleDelayed]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    "Transpose", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m", "]"}], "+", "FunctionRepo`conditionedMultinormalDistribution`Private`m"}],
                     "2"]}]}], "]"}]}], "}"}], ",", 
                    StyleBox[
                    RowBox[{"LinearSolve", "::", "exanexb"}], 
                    "MessageName"]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerQ", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals", "]"}], ",", 
                    RowBox[{
                    "Flatten", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ", ",", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SymmetrizedArray", "[", 
                    RowBox[{"#1", ",", "Automatic", ",", 
                    RowBox[{"Symmetric", "[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "]"}], "&"}], 
                    ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", ",", "2"}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist"}], "]"}]}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "]"}], "<", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim"}], ",", 
                    RowBox[{"False", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    "conditionedMultinormalDistribution", "::", "noDim"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
                    "]"}], ";", "False"}], ")"}]}]}], "]"}], "&&", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}], "===", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"FunctionRepo`conditionedMultinormalDistribution\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"conditionedMultinormalDistribution[dist, {i1 -> \
val1, ...}, {j1, j2, ...}] gives the {j1, j2, ...} marginal of dist when the \
indices {i1, ...} are conditioned to values {val1, ...}\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "conditionedMultinormalDistribution[dist, {i1 -> val1, ...}, {j1, j2, \
...}] gives the {j1, j2, ...} marginal of dist when the indices {i1, ...} are \
conditioned to values {val1, ...}", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`conditionedMultinormalDistribution, {
      FunctionRepo`conditionedMultinormalDistribution[
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          Blank[]], {}] :> 
       FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
       FunctionRepo`conditionedMultinormalDistribution[
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          Blank[]], {}, All] :> 
       FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
       FunctionRepo`conditionedMultinormalDistribution[
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          Blank[]], {}, 
         Pattern[
         FunctionRepo`conditionedMultinormalDistribution`Private`marginals, 
          Blank[]]] :> 
       MarginalDistribution[
        FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
         FunctionRepo`conditionedMultinormalDistribution`Private`marginals], 
       FunctionRepo`conditionedMultinormalDistribution[
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          Blank[]], 
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`rule, 
          Blank[Rule]], 
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`rest, 
          BlankNullSequence[]]] :> 
       FunctionRepo`conditionedMultinormalDistribution[
        FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
         Flatten[{
           Thread[
           FunctionRepo`conditionedMultinormalDistribution`Private`rule]}], 
         FunctionRepo`conditionedMultinormalDistribution`Private`rest], 
       FunctionRepo`conditionedMultinormalDistribution[
         Inactive[MultinormalDistribution][
          PatternTest[
           Pattern[
           FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
            Blank[]], SquareMatrixQ]], 
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`rest, 
          BlankNullSequence[]]] :> 
       FunctionRepo`conditionedMultinormalDistribution[
         Inactive[MultinormalDistribution][
          ConstantArray[0, 
           Length[
           FunctionRepo`conditionedMultinormalDistribution`Private`cov]], 
          FunctionRepo`conditionedMultinormalDistribution`Private`cov], 
         FunctionRepo`conditionedMultinormalDistribution`Private`rest], 
       FunctionRepo`conditionedMultinormalDistribution[
         Alternatives[
          PatternTest[
           Pattern[
           FunctionRepo`conditionedMultinormalDistribution`Private`head, 
            MultinormalDistribution][
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             Blank[]], 
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
             Blank[]]], DistributionParameterQ], 
          Condition[
           Pattern[
           FunctionRepo`conditionedMultinormalDistribution`Private`head, 
            Inactive[MultinormalDistribution]][
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             Blank[]], 
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
             Blank[]]], 
           
           With[{FunctionRepo`conditionedMultinormalDistribution`Private`lm = 
             Length[FunctionRepo`conditionedMultinormalDistribution`Private`\
mu]}, 
            And[
            FunctionRepo`conditionedMultinormalDistribution`Private`lm === 
             Length[FunctionRepo`conditionedMultinormalDistribution`Private`\
cov], FunctionRepo`conditionedMultinormalDistribution`Private`lm > 1]]]], 
         Pattern[
         FunctionRepo`conditionedMultinormalDistribution`Private`rules, {
           Repeated[Blank[Integer] -> Blank[]]}], 
         Optional[
          Pattern[
          FunctionRepo`conditionedMultinormalDistribution`Private`marginals, 
           Alternatives[
            Blank[Integer], {
             BlankSequence[Integer]}, All]], All]] :> 
       With[{FunctionRepo`conditionedMultinormalDistribution`Private`eval = 
          FunctionRepo`conditionedMultinormalDistribution[{
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             FunctionRepo`conditionedMultinormalDistribution`Private`cov}, 
            FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
            FunctionRepo`conditionedMultinormalDistribution`Private`marginals]\
}, 
         Condition[
          Replace[
           
           FunctionRepo`conditionedMultinormalDistribution[{
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             FunctionRepo`conditionedMultinormalDistribution`Private`cov}, 
            FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
            FunctionRepo`conditionedMultinormalDistribution`Private`marginals]\
, {{
              PatternTest[
               Pattern[
               FunctionRepo`conditionedMultinormalDistribution`Private`m, 
                Blank[]], VectorQ], 
              PatternTest[
               Pattern[
               FunctionRepo`conditionedMultinormalDistribution`Private`c, 
                Blank[]], MatrixQ]} :> 
            FunctionRepo`conditionedMultinormalDistribution`Private`head[
             FunctionRepo`conditionedMultinormalDistribution`Private`m, 
              FunctionRepo`conditionedMultinormalDistribution`Private`c], {
              Pattern[
              FunctionRepo`conditionedMultinormalDistribution`Private`m, 
               Blank[]], 
              Pattern[
              FunctionRepo`conditionedMultinormalDistribution`Private`var, 
               Blank[]]} :> 
            NormalDistribution[
             FunctionRepo`conditionedMultinormalDistribution`Private`m, 
              Sqrt[
              FunctionRepo`conditionedMultinormalDistribution`Private`var]]}], 
          ListQ[
          FunctionRepo`conditionedMultinormalDistribution`Private`eval]]], 
       Condition[
         FunctionRepo`conditionedMultinormalDistribution[{
           PatternTest[
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             Blank[]], VectorQ], 
           PatternTest[
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
             Blank[]], SquareMatrixQ]}, 
          Pattern[
          FunctionRepo`conditionedMultinormalDistribution`Private`rules, {
            Repeated[Blank[Integer] -> Blank[]]}], 
          Optional[
           Pattern[
           FunctionRepo`conditionedMultinormalDistribution`Private`marginals, 
            Alternatives[
             Blank[Integer], {
              BlankSequence[Integer]}, All]], All]], 
         Replace[
          DuplicateFreeQ[
           Flatten[{
             Part[
             FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
              All, 1], 
             FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals}]], False :> (Message[
             MessageName[
             FunctionRepo`conditionedMultinormalDistribution, "dupIndex"], 
             Part[
             FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
              All, 1], 
             FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals]; False)]] :> 
       Module[{FunctionRepo`conditionedMultinormalDistribution`Private`dim = 
          Length[FunctionRepo`conditionedMultinormalDistribution`Private`mu], 
          FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep, 
          FunctionRepo`conditionedMultinormalDistribution`Private`indexDrop, 
          
          FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu, 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 
          FunctionRepo`conditionedMultinormalDistribution`Private`rulesNoDup, 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues, 
          FunctionRepo`conditionedMultinormalDistribution`Private`inv22, 
          FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          FunctionRepo`conditionedMultinormalDistribution`Private`sparseQ, 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ, 
          FunctionRepo`conditionedMultinormalDistribution`Private`numericQ}, 
         Condition[
         FunctionRepo`conditionedMultinormalDistribution`Private`sparseQ = 
           Head[FunctionRepo`conditionedMultinormalDistribution`Private`cov] === 
            SparseArray; 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ = 
           Head[FunctionRepo`conditionedMultinormalDistribution`Private`cov] === 
            StructuredArray; 
          FunctionRepo`conditionedMultinormalDistribution`Private`rulesNoDup = 
           AssociationThread[
             Mod[
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
               All, 1], 
              FunctionRepo`conditionedMultinormalDistribution`Private`dim, 1], 
             Part[
             FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
              All, 2]]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`indexDrop = 
           Keys[FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues = 
           Values[FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`numericQ = 
           And[
             MatrixQ[
             FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
              NumericQ], 
             VectorQ[
             FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues, NumericQ]]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep = 
           Replace[FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals, {All :> Complement[
                Range[
                FunctionRepo`conditionedMultinormalDistribution`Private`dim], 
                FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop], Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`i, 
                Blank[Integer]] :> {
                Mod[
                FunctionRepo`conditionedMultinormalDistribution`Private`i, 
                 FunctionRepo`conditionedMultinormalDistribution`Private`dim, 
                 1]}, Pattern[
               FunctionRepo`conditionedMultinormalDistribution`Private`ints, 
                Blank[List]] :> 
              Mod[FunctionRepo`conditionedMultinormalDistribution`Private`\
ints, FunctionRepo`conditionedMultinormalDistribution`Private`dim, 1]}]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu = 
           Map[Part[
             FunctionRepo`conditionedMultinormalDistribution`Private`mu, #]& \
, {FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep, 
              FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop}]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov = {{
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep, FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep], 
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop]}, {
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop, FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep], 
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
               
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop]}}; 
          FunctionRepo`conditionedMultinormalDistribution`Private`inv22 = 
           Which[
             And[
             FunctionRepo`conditionedMultinormalDistribution`Private`numericQ,
               FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ], 
             LinearSolve[
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 2]], 
             And[
             FunctionRepo`conditionedMultinormalDistribution`Private`numericQ,
               FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ], 
             LinearSolve[
              SparseArray[
               Part[
               FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 2]]], True, 
             
             With[{FunctionRepo`conditionedMultinormalDistribution`Private`\
inv = Inverse[
                 Part[
                 FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 2]]}, Dot[
              FunctionRepo`conditionedMultinormalDistribution`Private`inv, #]& \
]]; FunctionRepo`conditionedMultinormalDistribution`Private`dist = 
           Quiet[{Part[
               FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu, 1] + Dot[
                Part[
                FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 1, 2], 
                FunctionRepo`conditionedMultinormalDistribution`Private`inv22[
                 Subtract[
                 FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues, 
                  Part[
                  FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu, 2]]]], 
              Replace[
               Subtract[
                Part[
                FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 1, 1], 
                Dot[
                 Part[
                 FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 1, 2], 
                 If[
                 FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ, 
                  SparseArray[
                   
                   FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22[
                    Part[
                    FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 1]]], 
                  
                  FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22[
                   Part[
                   FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 1]]]]], PatternTest[
                 Pattern[
                 FunctionRepo`conditionedMultinormalDistribution`Private`m, 
                  Blank[]], MatrixQ[#, NumericQ]& ] :> 
               Divide[Transpose[
                  FunctionRepo`conditionedMultinormalDistribution`Private`m] + 
                 FunctionRepo`conditionedMultinormalDistribution`Private`m, 
                 2]]}, 
             MessageName[LinearSolve, "exanexb"]]; If[
            IntegerQ[
            FunctionRepo`conditionedMultinormalDistribution`Private`marginals]\
, 
            Flatten[
            FunctionRepo`conditionedMultinormalDistribution`Private`dist], 
            If[
            FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ, 
             MapAt[SymmetrizedArray[#, Automatic, 
               Symmetric[{1, 2}]]& , 
              FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
              2], FunctionRepo`conditionedMultinormalDistribution`Private`\
dist]], 
          And[
           Replace[
           Length[FunctionRepo`conditionedMultinormalDistribution`Private`\
rules] < FunctionRepo`conditionedMultinormalDistribution`Private`dim, 
            False :> (Message[
               MessageName[
               FunctionRepo`conditionedMultinormalDistribution, "noDim"], 
               Part[
               FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
                All, 1]]; False)], 
           Length[FunctionRepo`conditionedMultinormalDistribution`Private`cov]\
 === FunctionRepo`conditionedMultinormalDistribution`Private`dim]]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`conditionedMultinormalDistribution"], False]]], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"3f070ae8-aabb-4d22-a028-8ce0035ffc7f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["convertDataFormat", \
"Subsection",ExpressionUUID->"dfd7d28f-35f2-42af-a9b6-5ec9a729667f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "convertDataFormat"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"33b38c0c-05f4-47b4-b352-aef21b1b7a2b"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"convertDataFormat[data, type] attempts to convert \
machine learning data to a different format to make it easier to switch out \
fitting methods.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" DownValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DownValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DownValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    RowBox[{
                    "_", "?", 
                    "FunctionRepo`convertDataFormat`Private`emptyDataQ"}], 
                    ",", 
                    
                    RowBox[{"\<\"Matrix\"\>", "|", "\<\"Vector\"\>", 
                    "|", "\<\"ListOfRules\"\>"}]}], "]"}], ":=", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    RowBox[{
                    "_", "?", 
                    "FunctionRepo`convertDataFormat`Private`emptyDataQ"}], 
                    ",", "\<\"RuleOfLists\"\>"}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", "}"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    RowBox[{
                    "_", "?", 
                    "FunctionRepo`convertDataFormat`Private`emptyDataQ"}], 
                    ",", "\<\"Assocation\"\>"}], "]"}], ":=", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\<\"Input\"\>", "\[Rule]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{"\<\"Output\"\>", "\[Rule]", 
                    RowBox[{"{", "}"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`data_", ",", 
                    "FunctionRepo`convertDataFormat`Private`typeOut_String"}],
                     "]"}], "/;", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`convertDataFormat`Private`$dataTypes", 
                    "]"}], ",", 
                    "FunctionRepo`convertDataFormat`Private`typeOut"}], 
                    "]"}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`typeIn", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{"KeyValueMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`data", ",", 
                    "#2"}], "]"}], ",", 
                    RowBox[{"Throw", "[", "#1", "]"}]}], "]"}], "&"}], ",", 
                    "FunctionRepo`convertDataFormat`Private`$dataTypes"}], 
                    "]"}], "]"}]}], ",", 
                    "FunctionRepo`convertDataFormat`Private`dataOut"}], "}"}],
                     ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`typeIn", "===", 
                    "FunctionRepo`convertDataFormat`Private`typeOut"}], ",", 
                    RowBox[{
                    "Return", "[", 
                    "FunctionRepo`convertDataFormat`Private`data", "]"}]}], 
                    "]"}], ";", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", "=", 
                    RowBox[{"Developer`ToPackedArray", "/@", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`\
convertToRuleOfLists", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`data", ",", 
                    "FunctionRepo`convertDataFormat`Private`typeIn"}], 
                    "]"}]}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"UnsameQ", "@@", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`convertDataFormat`Private`dataOut"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"convertDataFormat", "::", "uneqLen"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`typeOut", ",", 
                    RowBox[{"\<\"Matrix\"\>", "|", "\<\"Vector\"\>"}]}], 
                    "]"}], "&&", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", ",", 
                    RowBox[{"_", "\[Rule]", 
                    RowBox[{"_", "?", "MatrixQ"}]}]}], "]"}], "&&", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", 
                    "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", ">", "1"}], "&"}], ")"}]}]}], "}"}]}], 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"convertDataFormat", "::", "outDim"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", "=", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`\
convertToTargetType", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", ",", 
                    "FunctionRepo`convertDataFormat`Private`typeOut"}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", ",", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`$dataTypes", "[", 
                    "FunctionRepo`convertDataFormat`Private`typeOut", "]"}]}],
                     "]"}], ",", 
                    "FunctionRepo`convertDataFormat`Private`dataOut", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"convertDataFormat", "::", "convertFail"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`convertDataFormat`Private`typeIn", ",", 
                    "FunctionRepo`convertDataFormat`Private`typeOut"}], "]"}],
                     ";", "$Failed"}]}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    "StringQ", "[", 
                    "FunctionRepo`convertDataFormat`Private`typeIn", 
                    "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    "_", ",", "FunctionRepo`convertDataFormat`Private`out_"}],
                     "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"convertDataFormat", "::", "notImplemented"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`convertDataFormat`Private`out"}], "]"}], 
                    ";", "$Failed"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "convertDataFormat", "[", 
                    "FunctionRepo`convertDataFormat`Private`type_String", 
                    "]"}], "[", 
                    "FunctionRepo`convertDataFormat`Private`data_", "]"}], ":=", 
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`data", ",", 
                    "FunctionRepo`convertDataFormat`Private`type"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`convertDataFormat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"convertDataFormat[data, type] attempts to convert \
machine learning data to a different format to make it easier to switch out \
fitting methods.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "convertDataFormat[data, type] attempts to convert machine learning data \
to a different format to make it easier to switch out fitting methods.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`convertDataFormat, {
      FunctionRepo`convertDataFormat[
         PatternTest[
          Blank[], FunctionRepo`convertDataFormat`Private`emptyDataQ], 
         Alternatives["Matrix", "Vector", "ListOfRules"]] :> {}, 
       FunctionRepo`convertDataFormat[
         PatternTest[
          Blank[], FunctionRepo`convertDataFormat`Private`emptyDataQ], 
         "RuleOfLists"] :> ({} -> {}), FunctionRepo`convertDataFormat[
         PatternTest[
          Blank[], FunctionRepo`convertDataFormat`Private`emptyDataQ], 
         "Assocation"] :> Association["Input" -> {}, "Output" -> {}], 
       Condition[
         FunctionRepo`convertDataFormat[
          Pattern[FunctionRepo`convertDataFormat`Private`data, 
           Blank[]], 
          Pattern[FunctionRepo`convertDataFormat`Private`typeOut, 
           Blank[String]]], 
         MemberQ[
          Keys[FunctionRepo`convertDataFormat`Private`$dataTypes], 
          FunctionRepo`convertDataFormat`Private`typeOut]] :> 
       Module[{FunctionRepo`convertDataFormat`Private`typeIn = Catch[
            KeyValueMap[If[
              MatchQ[FunctionRepo`convertDataFormat`Private`data, #2], 
              Throw[#]]& , 
             FunctionRepo`convertDataFormat`Private`$dataTypes]], 
          FunctionRepo`convertDataFormat`Private`dataOut}, 
         Condition[
         If[FunctionRepo`convertDataFormat`Private`typeIn === 
            FunctionRepo`convertDataFormat`Private`typeOut, 
            Return[FunctionRepo`convertDataFormat`Private`data]]; 
          FunctionRepo`convertDataFormat`Private`dataOut = 
           Map[Developer`ToPackedArray, 
             FunctionRepo`convertDataFormat`Private`convertToRuleOfLists[
             FunctionRepo`convertDataFormat`Private`data, 
              FunctionRepo`convertDataFormat`Private`typeIn]]; If[
            Apply[UnsameQ, 
             Map[Length, FunctionRepo`convertDataFormat`Private`dataOut]], 
            Message[
              MessageName[FunctionRepo`convertDataFormat, "uneqLen"]]; 
            Return[$Failed]]; If[
            And[
             MatchQ[FunctionRepo`convertDataFormat`Private`typeOut, 
              Alternatives["Matrix", "Vector"]], 
             MatchQ[
             FunctionRepo`convertDataFormat`Private`dataOut, Blank[] -> 
              PatternTest[
                Blank[], MatrixQ]], 
             MatchQ[
              Dimensions[
               Part[FunctionRepo`convertDataFormat`Private`dataOut, 2]], {
               Blank[], 
               PatternTest[
                Blank[], # > 1& ]}]], Message[
              MessageName[FunctionRepo`convertDataFormat, "outDim"]]; 
            Return[$Failed]]; 
          FunctionRepo`convertDataFormat`Private`dataOut = 
           FunctionRepo`convertDataFormat`Private`convertToTargetType[
            FunctionRepo`convertDataFormat`Private`dataOut, 
             FunctionRepo`convertDataFormat`Private`typeOut]; If[
            MatchQ[FunctionRepo`convertDataFormat`Private`dataOut, 
             FunctionRepo`convertDataFormat`Private`$dataTypes[
             FunctionRepo`convertDataFormat`Private`typeOut]], 
            FunctionRepo`convertDataFormat`Private`dataOut, Message[
              MessageName[FunctionRepo`convertDataFormat, "convertFail"], 
              FunctionRepo`convertDataFormat`Private`typeIn, 
              FunctionRepo`convertDataFormat`Private`typeOut]; $Failed], 
          StringQ[FunctionRepo`convertDataFormat`Private`typeIn]]], 
       FunctionRepo`convertDataFormat[
         Blank[], 
         Pattern[FunctionRepo`convertDataFormat`Private`out, 
          Blank[]]] :> (Message[
          MessageName[FunctionRepo`convertDataFormat, "notImplemented"], 
          FunctionRepo`convertDataFormat`Private`out]; $Failed)}], 
    "SubValues" -> 
    Information`InformationValueForm[
     SubValues, FunctionRepo`convertDataFormat, {
      FunctionRepo`convertDataFormat[
         Pattern[FunctionRepo`convertDataFormat`Private`type, 
          Blank[String]]][
         Pattern[FunctionRepo`convertDataFormat`Private`data, 
          Blank[]]] :> 
       FunctionRepo`convertDataFormat[
        FunctionRepo`convertDataFormat`Private`data, 
         FunctionRepo`convertDataFormat`Private`type]}], "DefaultValues" -> 
    None, "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "FunctionRepo`convertDataFormat"], 
   False]]], "Output",
 CellLabel->"Out[11]=",ExpressionUUID->"74421e74-d4ae-4a42-84d9-cea0c5ece203"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["crossValidateModel", \
"Subsection",ExpressionUUID->"e35e1810-89ab-4aef-9e34-ee0d65c9d9ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "crossValidateModel"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"98de2084-dd51-4c5b-be4b-75e6154c6586"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"crossValidateModel[data, fitFunction] repeatedly \
splits the data into training/validation subsets; then fits a model using \
fitFunction on the training set and validates the result with the validation \
set.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data_", ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dist_", "?", 
                    "DistributionParameterQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data", ",", 
                    RowBox[{
                    RowBox[{"EstimatedDistribution", "[", 
                    RowBox[{
                    "#1", ",", 
                    "FunctionRepo`crossValidateModel`Private`dist"}], "]"}], 
                    "&"}], ",", 
                    "FunctionRepo`crossValidateModel`Private`opts"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data_", ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dists_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ListQ", "[", "#1", "]"}], "||", 
                    RowBox[{"AssociationQ", "[", "#1", "]"}]}], "&"}], 
                    ")"}]}], "/;", 
                    RowBox[{"AllTrue", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dists", ",", 
                    "DistributionParameterQ"}], "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data", ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`crossValidateModel`Private`dists", "]"}], 
                    ",", "Map", ",", "AssociationMap"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dist", ",", 
                    RowBox[{
                    RowBox[{"EstimatedDistribution", "[", 
                    RowBox[{"#1", ",", 
                    "FunctionRepo`crossValidateModel`Private`dist"}], "]"}], 
                    "&"}]}], "]"}], ",", 
                    "FunctionRepo`crossValidateModel`Private`dists"}], "]"}], 
                    ",", "FunctionRepo`crossValidateModel`Private`opts"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data", ":", 
                    RowBox[{"_List", "|", "_Rule", "|", 
                    RowBox[{"_", "?", "AssociationQ"}]}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`trainingFun", 
                    ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`method", ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`nDat", "=", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dataSize", "[", 
                    "FunctionRepo`crossValidateModel`Private`data", "]"}]}], 
                    ",", "FunctionRepo`crossValidateModel`Private`rules", ",",
                     "FunctionRepo`crossValidateModel`Private`methodFun", ",",
                     "FunctionRepo`crossValidateModel`Private`\
validationFunction"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`method", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"OptionValue", "[", "Method", "]"}], "}"}], "]"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"LeaveOneOut\"\>", ",", 
                    "FunctionRepo`crossValidateModel`Private`rest___"}], 
                    "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"\<\"KFold\"\>", ",", 
                    
                    RowBox[{"\<\"Folds\"\>", "\[Rule]", 
                    "FunctionRepo`crossValidateModel`Private`nDat"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`crossValidateModel`Private`rest", 
                    "}"}], ",", 
                    RowBox[{"Except", "[", "\<\"Folds\"\>", "]"}]}], 
                    "]"}]}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"BootStrap\"\>", ",", 
                    "FunctionRepo`crossValidateModel`Private`rest___"}], 
                    "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"\<\"RandomSubSampling\"\>", ",", 
                    RowBox[{"\<\"SamplingFunction\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\<\"BootStrap\"\>", ",", 
                    RowBox[{"Lookup", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`crossValidateModel`Private`rest", 
                    "}"}], ",", "\<\"BootStrapSize\"\>", ",", 
                    "FunctionRepo`crossValidateModel`Private`nDat"}], "]"}]}],
                     "}"}]}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`crossValidateModel`Private`rest", 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"Runs\"\>", ",", "\<\"ParallelQ\"\>"}], 
                    "}"}]}], "]"}]}]}], "}"}]}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`rules", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{
                    "Rest", "[", 
                    "FunctionRepo`crossValidateModel`Private`method", "]"}], 
                    ",", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`crossValidateModel`Private`opts", 
                    "}"}], ",", 
                    RowBox[{"{", "\<\"ParallelQ\"\>", "}"}]}], "]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`methodFun", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    "First", "[", 
                    "FunctionRepo`crossValidateModel`Private`method", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"\<\"KFold\"\>", "\[RuleDelayed]", 
                    "FunctionRepo`crossValidateModel`Private`kFoldValidation"}\
], ",", 
                    
                    RowBox[{"\<\"RandomSubSampling\"\>", "\[RuleDelayed]", 
                    "FunctionRepo`crossValidateModel`Private`\
subSamplingValidation"}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`other_", 
                    "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"crossValidateModel", "::", "unknownMethod"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`crossValidateModel`Private`other"}], "]"}], 
                    ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}], ")"}]}]}], 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    "OptionValue", "[", "\<\"ValidationFunction\"\>", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`assoc_", "?", 
                    "AssociationQ"}], "\[RuleDelayed]", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
parseValidationOption", "/@", 
                    "FunctionRepo`crossValidateModel`Private`assoc"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`other_", 
                    "\[RuleDelayed]", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
parseValidationOption", "[", "FunctionRepo`crossValidateModel`Private`other", 
                    "]"}]}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`crossValidateModel`Private`trainingFun", 
                    "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "&"}], ")"}], "/@", 
                    "FunctionRepo`crossValidateModel`Private`trainingFun"}]}],
                     ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "=", 
                    RowBox[{"AssociationThread", "[", 
                    RowBox[{
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`crossValidateModel`Private`trainingFun", 
                    "]"}], ",", 
                    RowBox[{"Lookup", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", ",", 
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`crossValidateModel`Private`trainingFun", 
                    "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
defaultValidationFunction", "[", "]"}]}], "]"}]}], "]"}]}]}], "]"}]}], "]"}], 
                    ";", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`methodFun", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data", ",", 
                    "FunctionRepo`crossValidateModel`Private`nDat", ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`quietReporting", 
                    "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`listOperator1", 
                    "[", "FunctionRepo`crossValidateModel`Private`\
trainingFun", "]"}], "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`listOperator2", 
                    "[", "FunctionRepo`crossValidateModel`Private`\
validationFunction", "]"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`rules", ",", 
                    RowBox[{
                    "Options", "[", 
                    "FunctionRepo`crossValidateModel`Private`methodFun", 
                    "]"}]}], "]"}]}]}], "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Method", "\[Rule]", "\<\"KFold\"\>"}], ",", 
                    
                    RowBox[{"\<\"ValidationFunction\"\>", "\[Rule]", 
                    "Automatic"}], ",", 
                    RowBox[{"\<\"ParallelQ\"\>", "\[Rule]", "False"}]}], 
                    "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`crossValidateModel\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"crossValidateModel[data, fitFunction] repeatedly \
splits the data into training/validation subsets; then fits a model using \
fitFunction on the training set and validates the result with the validation \
set.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "crossValidateModel[data, fitFunction] repeatedly splits the data into \
training/validation subsets; then fits a model using fitFunction on the \
training set and validates the result with the validation set.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`crossValidateModel, {
      FunctionRepo`crossValidateModel[
         Pattern[FunctionRepo`crossValidateModel`Private`data, 
          Blank[]], 
         PatternTest[
          Pattern[FunctionRepo`crossValidateModel`Private`dist, 
           Blank[]], DistributionParameterQ], 
         Pattern[FunctionRepo`crossValidateModel`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`crossValidateModel[
        FunctionRepo`crossValidateModel`Private`data, 
         EstimatedDistribution[#, 
          FunctionRepo`crossValidateModel`Private`dist]& , 
         FunctionRepo`crossValidateModel`Private`opts], 
       FunctionRepo`crossValidateModel[
         Pattern[FunctionRepo`crossValidateModel`Private`data, 
          Blank[]], 
         Condition[
          PatternTest[
           Pattern[FunctionRepo`crossValidateModel`Private`dists, 
            Blank[]], Or[
            ListQ[#], 
            AssociationQ[#]]& ], 
          AllTrue[
          FunctionRepo`crossValidateModel`Private`dists, 
           DistributionParameterQ]], 
         Pattern[FunctionRepo`crossValidateModel`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`crossValidateModel[
        FunctionRepo`crossValidateModel`Private`data, 
         If[
          AssociationQ[FunctionRepo`crossValidateModel`Private`dists], Map, 
          AssociationMap][
          Function[
          FunctionRepo`crossValidateModel`Private`dist, 
           EstimatedDistribution[#, 
            FunctionRepo`crossValidateModel`Private`dist]& ], 
          FunctionRepo`crossValidateModel`Private`dists], 
         FunctionRepo`crossValidateModel`Private`opts], 
       FunctionRepo`crossValidateModel[
         Pattern[FunctionRepo`crossValidateModel`Private`data, 
          Alternatives[
           Blank[List], 
           Blank[Rule], 
           PatternTest[
            Blank[], AssociationQ]]], 
         Pattern[FunctionRepo`crossValidateModel`Private`trainingFun, 
          Except[
           Blank[List]]], 
         Pattern[FunctionRepo`crossValidateModel`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`crossValidateModel`Private`method, 
          FunctionRepo`crossValidateModel`Private`nDat = 
          FunctionRepo`crossValidateModel`Private`dataSize[
           FunctionRepo`crossValidateModel`Private`data], 
          FunctionRepo`crossValidateModel`Private`rules, 
          FunctionRepo`crossValidateModel`Private`methodFun, 
          FunctionRepo`crossValidateModel`Private`validationFunction}, 
         FunctionRepo`crossValidateModel`Private`method = Replace[
            Flatten[{
              OptionValue[Method]}], {{"LeaveOneOut", 
               Pattern[FunctionRepo`crossValidateModel`Private`rest, 
                BlankNullSequence[]]} :> {
              "KFold", "Folds" -> 
               FunctionRepo`crossValidateModel`Private`nDat, 
               Apply[Sequence, 
                FilterRules[{FunctionRepo`crossValidateModel`Private`rest}, 
                 Except["Folds"]]]}, {"BootStrap", 
               Pattern[FunctionRepo`crossValidateModel`Private`rest, 
                BlankNullSequence[]]} :> {
              "RandomSubSampling", "SamplingFunction" -> {"BootStrap", 
                 
                 Lookup[{FunctionRepo`crossValidateModel`Private`rest}, 
                  "BootStrapSize", 
                  FunctionRepo`crossValidateModel`Private`nDat]}, 
               Apply[Sequence, 
                
                FilterRules[{FunctionRepo`crossValidateModel`Private`rest}, {
                 "Runs", "ParallelQ"}]]}}]; 
         FunctionRepo`crossValidateModel`Private`rules = Join[
            Rest[FunctionRepo`crossValidateModel`Private`method], 
            
            FilterRules[{FunctionRepo`crossValidateModel`Private`opts}, {
             "ParallelQ"}]]; 
         FunctionRepo`crossValidateModel`Private`methodFun = Replace[
            First[FunctionRepo`crossValidateModel`Private`method], {
            "KFold" :> 
             FunctionRepo`crossValidateModel`Private`kFoldValidation, 
             "RandomSubSampling" :> 
             FunctionRepo`crossValidateModel`Private`subSamplingValidation, 
             Pattern[FunctionRepo`crossValidateModel`Private`other, 
               Blank[]] :> (Message[
                MessageName[FunctionRepo`crossValidateModel, "unknownMethod"],
                 FunctionRepo`crossValidateModel`Private`other]; 
              Return[$Failed])}]; 
         FunctionRepo`crossValidateModel`Private`validationFunction = Replace[
            OptionValue["ValidationFunction"], {PatternTest[
               Pattern[FunctionRepo`crossValidateModel`Private`assoc, 
                Blank[]], AssociationQ] :> 
             Map[FunctionRepo`crossValidateModel`Private`\
parseValidationOption, FunctionRepo`crossValidateModel`Private`assoc], 
             Pattern[FunctionRepo`crossValidateModel`Private`other, 
               Blank[]] :> 
             FunctionRepo`crossValidateModel`Private`parseValidationOption[
              FunctionRepo`crossValidateModel`Private`other]}]; If[
           AssociationQ[FunctionRepo`crossValidateModel`Private`trainingFun], 
           If[
            Not[
             AssociationQ[
             FunctionRepo`crossValidateModel`Private`validationFunction]], 
            FunctionRepo`crossValidateModel`Private`validationFunction = 
            Map[FunctionRepo`crossValidateModel`Private`validationFunction& , 
              FunctionRepo`crossValidateModel`Private`trainingFun], 
            FunctionRepo`crossValidateModel`Private`validationFunction = 
            AssociationThread[
              Keys[FunctionRepo`crossValidateModel`Private`trainingFun], 
              Lookup[
              FunctionRepo`crossValidateModel`Private`validationFunction, 
               Keys[FunctionRepo`crossValidateModel`Private`trainingFun], 
               
               FunctionRepo`crossValidateModel`Private`\
defaultValidationFunction[]]]]]; 
         FunctionRepo`crossValidateModel`Private`methodFun[
          FunctionRepo`crossValidateModel`Private`data, 
           FunctionRepo`crossValidateModel`Private`nDat, 
           FunctionRepo`crossValidateModel`Private`quietReporting[
            FunctionRepo`crossValidateModel`Private`listOperator1[
            FunctionRepo`crossValidateModel`Private`trainingFun]], 
           FunctionRepo`crossValidateModel`Private`listOperator2[
           FunctionRepo`crossValidateModel`Private`validationFunction], 
           Apply[Sequence, 
            FilterRules[FunctionRepo`crossValidateModel`Private`rules, 
             Options[FunctionRepo`crossValidateModel`Private`methodFun]]]]]}],
     "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     Method -> "KFold", "ValidationFunction" -> Automatic, "ParallelQ" -> 
      False}, "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`crossValidateModel"], False]]], "Output",
 CellLabel->"Out[12]=",ExpressionUUID->"88661fef-2937-4720-beb7-6d5df1da73c8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["deleteContainedStrings", \
"Subsection",ExpressionUUID->"da8a948a-8e77-4887-90f5-94bf9f9dd812"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "deleteContainedStrings"}]], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"37e1ff57-ee62-4bff-ab0e-875919154b44"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"deleteContainedStrings[{str1, str2, ...}] deletes \
every string that is a substring of at least one other string in the list. \
Preserves ordering.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`deleteContainedStrings\"\
\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"deleteContainedStrings[{str1, str2, ...}] deletes \
every string that is a substring of at least one other string in the list. \
Preserves ordering.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "deleteContainedStrings[{str1, str2, ...}] deletes every string that is a \
substring of at least one other string in the list. Preserves ordering.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "FunctionRepo`deleteContainedStrings"], 
   False]]], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"84fb8ff9-a95f-441e-9057-4da2aad98987"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["firstMatchingValue", \
"Subsection",ExpressionUUID->"f0081c56-07a8-467c-89b8-c381ea514997"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "firstMatchingValue"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"583296a0-bd1e-4d8a-ba59-9b25c158a6f4"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"firstMatchingValue[{expr_1, expr_2, ...}, pattern] \
evalutates held expr_i in turn, returning the value of the first expression \
that evaluates to a result matching the pattern.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`patt_", ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`opt", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr", ",", 
                    "FunctionRepo`firstMatchingValue`Private`patt", ",", 
                    RowBox[{"Missing", "[", "\<\"NotFound\"\>", "]"}], ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    "FunctionRepo`firstMatchingValue`Private`opt"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`patt_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`default_", ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`opt", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr", ",", 
                    "FunctionRepo`firstMatchingValue`Private`patt", ",", 
                    "FunctionRepo`firstMatchingValue`Private`default", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    "FunctionRepo`firstMatchingValue`Private`opt"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr_", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`head", ":", 
                    RowBox[{"Rule", "|", "RuleDelayed"}]}], ")"}], "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`patt_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`transformation_"}\
], "]"}], ",", "FunctionRepo`firstMatchingValue`Private`default_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`lvl_", ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`firstMatchingValue`Private`matched", 
                    "}"}], ",", 
                    RowBox[{"FirstCase", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", 
                    "FunctionRepo`firstMatchingValue`Private`expr", "]"}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`possibleMatch_", 
                    "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`try", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`matched", "=", 
                    "True"}], ";", 
                    "FunctionRepo`firstMatchingValue`Private`possibleMatch"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`head", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`patt", ",", 
                    "FunctionRepo`firstMatchingValue`Private`transformation"}]\
, "]"}], ",", 
                    RowBox[{"_", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`matched", "=", 
                    "False"}], ")"}]}]}], "}"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"FunctionRepo`firstMatchingValue`Private`try", "/;", 
                    RowBox[{
                    "TrueQ", "[", 
                    "FunctionRepo`firstMatchingValue`Private`matched", 
                    "]"}]}]}], "]"}]}], ",", 
                    "FunctionRepo`firstMatchingValue`Private`default", ",", 
                    "FunctionRepo`firstMatchingValue`Private`lvl", ",", 
                    "FunctionRepo`firstMatchingValue`Private`opts"}], "]"}]}],
                     "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`otherPattern_", 
                    ",", "FunctionRepo`firstMatchingValue`Private`default_", 
                    ",", "FunctionRepo`firstMatchingValue`Private`lvl_", ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"FirstCase", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", 
                    "FunctionRepo`firstMatchingValue`Private`expr", "]"}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`possibleMatch_", 
                    "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`try", "=", 
                    "FunctionRepo`firstMatchingValue`Private`possibleMatch"}],
                     "}"}], ",", 
                    RowBox[{"FunctionRepo`firstMatchingValue`Private`try", "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`try", ",", 
                    "FunctionRepo`firstMatchingValue`Private`otherPattern"}], 
                    "]"}]}]}], "]"}]}], ",", 
                    "FunctionRepo`firstMatchingValue`Private`default", ",", 
                    "FunctionRepo`firstMatchingValue`Private`lvl", ",", 
                    "FunctionRepo`firstMatchingValue`Private`opts"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"Heads", "\[Rule]", "False"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "HoldAll", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`firstMatchingValue\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"firstMatchingValue[{expr_1, expr_2, ...}, pattern] \
evalutates held expr_i in turn, returning the value of the first expression \
that evaluates to a result matching the pattern.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "firstMatchingValue[{expr_1, expr_2, ...}, pattern] evalutates held \
expr_i in turn, returning the value of the first expression that evaluates to \
a result matching the pattern.", "Documentation" -> None, "OwnValues" -> None,
     "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`firstMatchingValue, {
      FunctionRepo`firstMatchingValue[
         Pattern[FunctionRepo`firstMatchingValue`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`patt, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`opt, 
          OptionsPattern[]]] :> 
       FunctionRepo`firstMatchingValue[
        FunctionRepo`firstMatchingValue`Private`expr, 
         FunctionRepo`firstMatchingValue`Private`patt, 
         Missing["NotFound"], {1}, 
         FunctionRepo`firstMatchingValue`Private`opt], 
       FunctionRepo`firstMatchingValue[
         Pattern[FunctionRepo`firstMatchingValue`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`patt, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`default, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`opt, 
          OptionsPattern[]]] :> 
       FunctionRepo`firstMatchingValue[
        FunctionRepo`firstMatchingValue`Private`expr, 
         FunctionRepo`firstMatchingValue`Private`patt, 
         FunctionRepo`firstMatchingValue`Private`default, {1}, 
         FunctionRepo`firstMatchingValue`Private`opt], 
       FunctionRepo`firstMatchingValue[
         Pattern[FunctionRepo`firstMatchingValue`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`head, 
          Alternatives[Rule, RuleDelayed]][
          Pattern[FunctionRepo`firstMatchingValue`Private`patt, 
           Blank[]], 
          Pattern[FunctionRepo`firstMatchingValue`Private`transformation, 
           Blank[]]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`default, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`lvl, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`firstMatchingValue`Private`matched}, 
         FirstCase[
          Unevaluated[FunctionRepo`firstMatchingValue`Private`expr], 
          Pattern[FunctionRepo`firstMatchingValue`Private`possibleMatch, 
            Blank[]] :> 
          With[{FunctionRepo`firstMatchingValue`Private`try = 
             Replace[FunctionRepo`firstMatchingValue`Private`matched = True; 
               FunctionRepo`firstMatchingValue`Private`possibleMatch, {
                FunctionRepo`firstMatchingValue`Private`head[
                FunctionRepo`firstMatchingValue`Private`patt, 
                 FunctionRepo`firstMatchingValue`Private`transformation], 
                Blank[] :> (FunctionRepo`firstMatchingValue`Private`matched = 
                 False)}]}, 
            Condition[FunctionRepo`firstMatchingValue`Private`try, 
             TrueQ[FunctionRepo`firstMatchingValue`Private`matched]]], 
          FunctionRepo`firstMatchingValue`Private`default, 
          FunctionRepo`firstMatchingValue`Private`lvl, 
          FunctionRepo`firstMatchingValue`Private`opts]], 
       FunctionRepo`firstMatchingValue[
         Pattern[FunctionRepo`firstMatchingValue`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`otherPattern, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`default, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`lvl, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`opts, 
          OptionsPattern[]]] :> FirstCase[
         Unevaluated[FunctionRepo`firstMatchingValue`Private`expr], 
         Pattern[FunctionRepo`firstMatchingValue`Private`possibleMatch, 
           Blank[]] :> 
         With[{FunctionRepo`firstMatchingValue`Private`try = 
            FunctionRepo`firstMatchingValue`Private`possibleMatch}, 
           Condition[FunctionRepo`firstMatchingValue`Private`try, 
            MatchQ[
            FunctionRepo`firstMatchingValue`Private`try, 
             FunctionRepo`firstMatchingValue`Private`otherPattern]]], 
         FunctionRepo`firstMatchingValue`Private`default, 
         FunctionRepo`firstMatchingValue`Private`lvl, 
         FunctionRepo`firstMatchingValue`Private`opts]}], "SubValues" -> None,
     "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {Heads -> False}, "Attributes" -> {HoldAll}, "FullName" -> 
    "FunctionRepo`firstMatchingValue"], False]]], "Output",
 CellLabel->"Out[16]=",ExpressionUUID->"43b72268-6591-42c5-ad86-3399c06878cc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["kullbackLeiblerDivergence", \
"Subsection",ExpressionUUID->"e2779f55-4ae5-4ebd-b5b6-3be2e30b7a6c"],

Cell[BoxData[
 RowBox[{"?", 
  "kullbackLeiblerDivergence"}]], \
"Input",ExpressionUUID->"18686fd2-517c-4c38-b65b-acb472f6cf45"]
}, Open  ]],

Cell[CellGroupData[{

Cell["maximumSpacingEstimation", \
"Subsection",ExpressionUUID->"e7f25d6e-d412-498b-92a0-f28a46aa5a37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "maximumSpacingEstimation"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"5dc8f8f8-a1f2-4148-9fe6-38ff79eeffe3"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"maximumSpacingEstimation[data, dist] fits dist to \
data using the maximum spacing estimation method.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"maximumSpacingEstimation", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`data_", 
                    "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"VectorQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`dist_", 
                    "?", "Statistics`Library`UnivariateDistributionQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`expr", "=", 
                    RowBox[{"Inactivate", "[", 
                    RowBox[{
                    RowBox[{"Mean", "[", 
                    RowBox[{"Log", "[", 
                    RowBox[{"Differences", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"CDF", "[", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`dist", ",", 
                    RowBox[{
                    "Sort", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`data", 
                    "]"}]}], "]"}], ",", "1"}], "}"}], "]"}], "]"}], "]"}], 
                    "]"}], ",", 
                    RowBox[{"Except", "[", "Sort", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`cons", "=", 
                    RowBox[{
                    "DistributionParameterAssumptions", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`dist", 
                    "]"}]}], ",", 
                    "FunctionRepo`maximumSpacingEstimation`Private`result"}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`result", 
                    "=", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Indeterminate", "=", 
                    RowBox[{"-", "Statistics`Library`MachineInfinity"}]}], 
                    "}"}], ",", 
                    RowBox[{"NMaximize", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`expr", ",", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`cons", "&&", 
                    RowBox[{"OptionValue", "[", "Assumptions", "]"}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{
                    "Statistics`Library`GetDistributionParameters", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`dist", 
                    "]"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`maximumSpacingEstimation`Private`opts",
                     "}"}], ",", 
                    RowBox[{"Options", "[", "NMaximize", "]"}]}], "]"}]}]}], 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`result", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"{", "__Rule", "}"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"\<\"Distribution\"\>", "\[Rule]", 
                    "FunctionRepo`maximumSpacingEstimation`Private`dist"}], "/.",
                     "\[VeryThinSpace]", 
                    RowBox[{
                    "Last", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`result", 
                    "]"}]}], ",", 
                    RowBox[{"\<\"MaxSpacingEstimate\"\>", "\[Rule]", 
                    RowBox[{
                    "First", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`result", 
                    "]"}]}]}], "]"}], ",", "$Failed"}], "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   PaneSelectorBox[{True->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    False),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"], False->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    True),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]]], 
                   PaneSelectorBox[{True->GridBox[{
                    {
                    RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"EvaluationMonitor", "\[Rule]", "None"}]},
                    {
                    RowBox[{"MaxIterations", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Method", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"PrecisionGoal", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"StepMonitor", "\[Rule]", "None"}]},
                    {
                    RowBox[{
                    "WorkingPrecision", "\[Rule]", "MachinePrecision"}]},
                    {
                    RowBox[{"Assumptions", "\[RuleDelayed]", "$Assumptions"}]},
                    {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","8","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.}}}], False->
                    RowBox[{
                    RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}], 
                    "\[ThinSpace]", 
                    StyleBox["\<\"\[Ellipsis]\"\>", "InformationRowOpener",
                    StripOnInput->False], "\[ThinSpace]", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","8","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]],
                    BaselinePosition->Baseline,
                    ImageSize->Automatic]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`maximumSpacingEstimation\
\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"maximumSpacingEstimation[data, dist] fits dist to \
data using the maximum spacing estimation method.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "maximumSpacingEstimation[data, dist] fits dist to data using the maximum \
spacing estimation method.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`maximumSpacingEstimation, {
      FunctionRepo`maximumSpacingEstimation[
         PatternTest[
          Pattern[FunctionRepo`maximumSpacingEstimation`Private`data, 
           Blank[]], VectorQ[#, NumericQ]& ], 
         PatternTest[
          Pattern[FunctionRepo`maximumSpacingEstimation`Private`dist, 
           Blank[]], Statistics`Library`UnivariateDistributionQ], 
         Pattern[FunctionRepo`maximumSpacingEstimation`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`maximumSpacingEstimation`Private`expr = Inactivate[
            Mean[
             Log[
              Differences[
               Flatten[{0, 
                 CDF[FunctionRepo`maximumSpacingEstimation`Private`dist, 
                  Sort[FunctionRepo`maximumSpacingEstimation`Private`data]], 
                 1}]]]], 
            Except[Sort]], FunctionRepo`maximumSpacingEstimation`Private`cons = 
          DistributionParameterAssumptions[
           FunctionRepo`maximumSpacingEstimation`Private`dist], 
          FunctionRepo`maximumSpacingEstimation`Private`result}, 
         FunctionRepo`maximumSpacingEstimation`Private`result = 
          Block[{Indeterminate = -Statistics`Library`MachineInfinity}, 
            NMaximize[{FunctionRepo`maximumSpacingEstimation`Private`expr, 
              Simplify[
               And[FunctionRepo`maximumSpacingEstimation`Private`cons, 
                OptionValue[Assumptions]]]}, 
             Statistics`Library`GetDistributionParameters[
             FunctionRepo`maximumSpacingEstimation`Private`dist], 
             Apply[Sequence, 
              
              FilterRules[{
               FunctionRepo`maximumSpacingEstimation`Private`opts}, 
               Options[NMaximize]]]]]; If[
           MatchQ[FunctionRepo`maximumSpacingEstimation`Private`result, {
             Blank[], {
              BlankSequence[Rule]}}], 
           Association[
            ReplaceAll[
            "Distribution" -> 
             FunctionRepo`maximumSpacingEstimation`Private`dist, 
             Last[FunctionRepo`maximumSpacingEstimation`Private`result]], 
            "MaxSpacingEstimate" -> 
            First[FunctionRepo`maximumSpacingEstimation`Private`result]], \
$Failed]]}], "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     AccuracyGoal -> Automatic, EvaluationMonitor -> None, MaxIterations -> 
      Automatic, Method -> Automatic, PrecisionGoal -> Automatic, StepMonitor -> 
      None, WorkingPrecision -> MachinePrecision, 
      Assumptions :> $Assumptions}, "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`maximumSpacingEstimation"], False]]], "Output",
 CellLabel->"Out[19]=",ExpressionUUID->"e3b51bc5-9fc8-42b2-9be1-88de7668ce81"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["multiNonlinearModelFit", \
"Subsection",ExpressionUUID->"b0f9ea23-866e-4cac-9997-19632af0abfe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "multiNonlinearModelFit"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"6efeacfa-38f2-467c-826b-25397978554a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"multiNonlinearModelFit[{dat1, dat2, ...}, {fun1, \
fun2, ...}, params, vars] fits fun_i to data_i simultaneously.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`datasets_", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`form_", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`fitParams_", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`independents", 
                    ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`datasets", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`form", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`fitParams", ",", 
                    RowBox[{
                    "{", "FunctionRepo`tukeyMedianPolish`Private`\
independents", "}"}], ",", "FunctionRepo`tukeyMedianPolish`Private`opts"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`datasets_", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`form", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"{", "__Rule", "}"}], ",", "_List"}], "]"}]}], 
                    ",", "FunctionRepo`tukeyMedianPolish`Private`fitParams_", 
                    ",", "FunctionRepo`tukeyMedianPolish`Private`independents_\
", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`datasets", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    
                    RowBox[{"\<\"Expressions\"\>", "\[Rule]", 
                    "FunctionRepo`tukeyMedianPolish`Private`form"}], ",", 
                    RowBox[{"\<\"Constraints\"\>", "\[Rule]", "True"}]}], 
                    "]"}], ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`fitParams", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`independents", 
                    ",", "FunctionRepo`tukeyMedianPolish`Private`opts"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`datasets", ":", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    "}"}]}], ",", 
                    RowBox[{"KeyValuePattern", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"\<\"Expressions\"\>", "\[Rule]", 
                    "FunctionRepo`tukeyMedianPolish`Private`expressions_List"}\
], ",", 
                    
                    RowBox[{"\<\"Constraints\"\>", "\[Rule]", 
                    "FunctionRepo`tukeyMedianPolish`Private`constraints_"}]}],
                     "}"}], "]"}], ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`fitParams_List", 
                    ",", "FunctionRepo`tukeyMedianPolish`Private`independents_\
List", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`fitfun", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`weights", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`numSets", "=", 
                    RowBox[{"Length", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`expressions", 
                    "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`augmentedData", 
                    "=", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"N", "[", "#2", "]"}], ",", 
                    RowBox[{"Length", "[", "#1", "]"}]}], "]"}], ",", "#1", 
                    ",", "2"}], "]"}], "&"}], ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`datasets"}], 
                    "]"}]}]}], ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`indexSymbol", "=", 
                    RowBox[{
                    "OptionValue", "[", "\<\"DatasetIndexSymbol\"\>", 
                    "]"}]}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`fitfun", "=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`conditions", "=", 
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`expressions", 
                    "\[LeftDoubleBracket]", "#1", "\[RightDoubleBracket]"}]}],
                     "}"}], "&"}], ")"}], "/@", 
                    RowBox[{
                    "Range", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`numSets", 
                    "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"Switch", "@@", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`conditions", ",", 
                    RowBox[{
                    "Round", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`indexSymbol", 
                    "]"}]}], "]"}]}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`weights", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "Weights", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`list_List", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"VectorQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], "/;", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`list", "]"}], "===",
                     "FunctionRepo`tukeyMedianPolish`Private`numSets"}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"ConstantArray", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`list", ",", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`tukeyMedianPolish`Private`datasets"}]}], 
                    "}"}]}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`list", ":", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"VectorQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    "}"}]}], "/;", 
                    RowBox[{
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`tukeyMedianPolish`Private`list"}], "===", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`tukeyMedianPolish`Private`datasets"}]}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    "Join", "@@", 
                    "FunctionRepo`tukeyMedianPolish`Private`list"}]}], ",", 
                    RowBox[{"\<\"InverseLengthWeights\"\>", "\[RuleDelayed]", 
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    FractionBox["1.`", "#1"], ",", "#1"}], "]"}], "&"}], 
                    ")"}], "/@", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`tukeyMedianPolish`Private`datasets"}]}]}]}]}\
], "}"}]}], "]"}]}], ";", 
                    RowBox[{"NonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`augmentedData", 
                    ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "TrueQ", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`constraints", 
                    "]"}], ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`fitfun", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`fitfun", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`constraints"}], 
                    "}"}]}], "]"}], ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`fitParams", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`indexSymbol", ",",
                     "FunctionRepo`tukeyMedianPolish`Private`independents"}], 
                    "}"}], "]"}], ",", 
                    RowBox[{
                    "Weights", "\[Rule]", 
                    "FunctionRepo`tukeyMedianPolish`Private`weights"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`tukeyMedianPolish`Private`opts", "}"}],
                     ",", 
                    RowBox[{"Options", "[", "NonlinearModelFit", "]"}]}], 
                    "]"}]}]}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`numSets", "===", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`datasets", 
                    "]"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   PaneSelectorBox[{True->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    False),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"], False->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    True),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]]], 
                   PaneSelectorBox[{True->GridBox[{
                    {
                    RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"ConfidenceLevel", "\[Rule]", 
                    FractionBox["19", "20"]}]},
                    {
                    RowBox[{"EvaluationMonitor", "\[Rule]", "None"}]},
                    {
                    RowBox[{"Gradient", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"MaxIterations", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Method", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"PrecisionGoal", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"StepMonitor", "\[Rule]", "None"}]},
                    {
                    RowBox[{"Tolerance", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{
                    "VarianceEstimatorFunction", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Weights", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"WorkingPrecision", "\[Rule]", "Automatic"}]},
                    {
                    
                    RowBox[{"\<\"DatasetIndexSymbol\"\>", "\[Rule]", 
                    "\[FormalN]"}]},
                    {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","13","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.}}}], False->
                    RowBox[{
                    RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}], 
                    "\[ThinSpace]", 
                    StyleBox["\<\"\[Ellipsis]\"\>", "InformationRowOpener",
                    StripOnInput->False], "\[ThinSpace]", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","13","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]],
                    BaselinePosition->Baseline,
                    ImageSize->Automatic]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`multiNonlinearModelFit\"\
\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"multiNonlinearModelFit[{dat1, dat2, ...}, {fun1, \
fun2, ...}, params, vars] fits fun_i to data_i simultaneously.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "multiNonlinearModelFit[{dat1, dat2, ...}, {fun1, fun2, ...}, params, \
vars] fits fun_i to data_i simultaneously.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`multiNonlinearModelFit, {
      FunctionRepo`multiNonlinearModelFit[
         Pattern[FunctionRepo`tukeyMedianPolish`Private`datasets, 
          Blank[]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`form, 
          Blank[]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`fitParams, 
          Blank[]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`independents, 
          Except[
           Blank[List]]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`multiNonlinearModelFit[
        FunctionRepo`tukeyMedianPolish`Private`datasets, 
         FunctionRepo`tukeyMedianPolish`Private`form, 
         FunctionRepo`tukeyMedianPolish`Private`fitParams, {
         FunctionRepo`tukeyMedianPolish`Private`independents}, 
         FunctionRepo`tukeyMedianPolish`Private`opts], 
       FunctionRepo`multiNonlinearModelFit[
         Pattern[FunctionRepo`tukeyMedianPolish`Private`datasets, 
          Blank[]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`form, 
          Except[{
            BlankSequence[Rule]}, 
           Blank[List]]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`fitParams, 
          Blank[]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`independents, 
          Blank[]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`multiNonlinearModelFit[
        FunctionRepo`tukeyMedianPolish`Private`datasets, 
         Association[
         "Expressions" -> FunctionRepo`tukeyMedianPolish`Private`form, 
          "Constraints" -> True], 
         FunctionRepo`tukeyMedianPolish`Private`fitParams, 
         FunctionRepo`tukeyMedianPolish`Private`independents, 
         FunctionRepo`tukeyMedianPolish`Private`opts], 
       FunctionRepo`multiNonlinearModelFit[
         Pattern[FunctionRepo`tukeyMedianPolish`Private`datasets, {
           PatternTest[
            BlankSequence[], MatrixQ[#, NumericQ]& ]}], 
         KeyValuePattern[{
          "Expressions" -> 
           Pattern[FunctionRepo`tukeyMedianPolish`Private`expressions, 
             Blank[List]], "Constraints" -> 
           Pattern[FunctionRepo`tukeyMedianPolish`Private`constraints, 
             Blank[]]}], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`fitParams, 
          Blank[List]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`independents, 
          Blank[List]], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`tukeyMedianPolish`Private`fitfun, 
          FunctionRepo`tukeyMedianPolish`Private`weights, 
          FunctionRepo`tukeyMedianPolish`Private`numSets = 
          Length[FunctionRepo`tukeyMedianPolish`Private`expressions], 
          FunctionRepo`tukeyMedianPolish`Private`augmentedData = Apply[Join, 
            MapIndexed[Join[
              ConstantArray[
               N[#2], 
               Length[#]], #, 2]& , 
             FunctionRepo`tukeyMedianPolish`Private`datasets]], 
          FunctionRepo`tukeyMedianPolish`Private`indexSymbol = 
          OptionValue["DatasetIndexSymbol"]}, 
         Condition[
         FunctionRepo`tukeyMedianPolish`Private`fitfun = 
           With[{
             FunctionRepo`tukeyMedianPolish`Private`conditions = Apply[Join, 
                Map[{#, 
                  Part[
                  FunctionRepo`tukeyMedianPolish`Private`expressions, #]}& , 
                 Range[FunctionRepo`tukeyMedianPolish`Private`numSets]]]}, 
             Apply[Switch, 
              Prepend[FunctionRepo`tukeyMedianPolish`Private`conditions, 
               Round[FunctionRepo`tukeyMedianPolish`Private`indexSymbol]]]]; 
          FunctionRepo`tukeyMedianPolish`Private`weights = Replace[
             OptionValue[Weights], {Condition[
                PatternTest[
                 Pattern[FunctionRepo`tukeyMedianPolish`Private`list, 
                  Blank[List]], VectorQ[#, NumericQ]& ], 
                Length[FunctionRepo`tukeyMedianPolish`Private`list] === 
                FunctionRepo`tukeyMedianPolish`Private`numSets] :> Apply[Join, 
                MapThread[
                ConstantArray, {FunctionRepo`tukeyMedianPolish`Private`list, 
                  Map[
                  Length, FunctionRepo`tukeyMedianPolish`Private`datasets]}]],
               Condition[
                Pattern[FunctionRepo`tukeyMedianPolish`Private`list, {
                  PatternTest[
                   BlankSequence[], VectorQ[#, NumericQ]& ]}], 
                Map[Length, FunctionRepo`tukeyMedianPolish`Private`list] === 
                Map[Length, FunctionRepo`tukeyMedianPolish`Private`datasets]] :> 
              Apply[Join, FunctionRepo`tukeyMedianPolish`Private`list], 
              "InverseLengthWeights" :> Apply[Join, 
                Map[ConstantArray[1./#, #]& , 
                 Map[
                 Length, FunctionRepo`tukeyMedianPolish`Private`datasets]]]}]; 
          NonlinearModelFit[
           FunctionRepo`tukeyMedianPolish`Private`augmentedData, 
            If[
             TrueQ[FunctionRepo`tukeyMedianPolish`Private`constraints], 
             FunctionRepo`tukeyMedianPolish`Private`fitfun, {
             FunctionRepo`tukeyMedianPolish`Private`fitfun, 
              FunctionRepo`tukeyMedianPolish`Private`constraints}], 
            FunctionRepo`tukeyMedianPolish`Private`fitParams, 
            Flatten[{
             FunctionRepo`tukeyMedianPolish`Private`indexSymbol, 
              FunctionRepo`tukeyMedianPolish`Private`independents}], Weights -> 
            FunctionRepo`tukeyMedianPolish`Private`weights, 
            Apply[Sequence, 
             FilterRules[{FunctionRepo`tukeyMedianPolish`Private`opts}, 
              Options[NonlinearModelFit]]]], 
          FunctionRepo`tukeyMedianPolish`Private`numSets === 
          Length[FunctionRepo`tukeyMedianPolish`Private`datasets]]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     AccuracyGoal -> Automatic, ConfidenceLevel -> Rational[19, 20], 
      EvaluationMonitor -> None, Gradient -> Automatic, MaxIterations -> 
      Automatic, Method -> Automatic, PrecisionGoal -> Automatic, StepMonitor -> 
      None, Tolerance -> Automatic, VarianceEstimatorFunction -> Automatic, 
      Weights -> Automatic, WorkingPrecision -> Automatic, 
      "DatasetIndexSymbol" -> \[FormalN]}, "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`multiNonlinearModelFit"], False]]], "Output",
 CellLabel->"Out[21]=",ExpressionUUID->"c21d3af5-b9e8-4267-853a-381bdebe462b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["sparseAssociation", \
"Subsection",ExpressionUUID->"26e3ab04-da92-4478-8bd1-7bbb8b6a2afc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "sparseAssociation"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"2d8ddbf0-decb-4a5e-b02b-e61a020df293"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "___"}], "]"}], ":=", 
                    RowBox[{"Association", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`array_", "?", 
                    "ArrayQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`keys", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"{", "__List", "}"}], ",", "_List"}], "]"}]}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`default", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_List", "|", "_Rule"}], "]"}], ":", "0"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`array", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`keys", ",", 
                    RowBox[{
                    "ArrayDepth", "[", 
                    "FunctionRepo`sparseAssociation`Private`array", "]"}]}], 
                    "]"}], ",", 
                    "FunctionRepo`sparseAssociation`Private`default", ",", 
                    "FunctionRepo`sparseAssociation`Private`opts"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`array_", "?", 
                    "ArrayQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`keys", ":", 
                    RowBox[{"{", "__List", "}"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`default", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_List", "|", "_Rule"}], "]"}], ":", "0"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`dims", "=", 
                    RowBox[{
                    "Dimensions", "[", 
                    "FunctionRepo`sparseAssociation`Private`array", "]"}]}], 
                    ",", 
                    RowBox[{"FunctionRepo`sparseAssociation`Private`lvl", "=", 
                    RowBox[{"OptionValue", "[", "\<\"Level\"\>", "]"}]}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`\
isparseAssociation", "[", 
                    RowBox[{
                    RowBox[{"ArrayRules", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`array", ",", 
                    "FunctionRepo`sparseAssociation`Private`default"}], "]"}],
                     ",", "FunctionRepo`sparseAssociation`Private`keys"}], 
                    "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`lvl", "===", 
                    "Automatic"}], "&&", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`checkKeyDims", 
                    "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`dims", ",", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`sparseAssociation`Private`keys"}]}], 
                    "]"}]}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`array_", "?", 
                    "ArrayQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`default_", ":", 
                    "0"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"FunctionRepo`sparseAssociation`Private`lvl", "=", 
                    RowBox[{"OptionValue", "[", "\<\"Level\"\>", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`\
isparseAssociation", "[", 
                    RowBox[{"ArrayRules", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`array", ",", 
                    "FunctionRepo`sparseAssociation`Private`default"}], "]"}],
                     "]"}], "/;", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`lvl", "===", 
                    "Automatic"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`expr_", ",", 
                    "FunctionRepo`sparseAssociation`Private`keys_List", ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`default_", ":", 
                    "0"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`level", "=", 
                    RowBox[{"OptionValue", "[", "\<\"Level\"\>", "]"}]}], ",",
                     "FunctionRepo`sparseAssociation`Private`assoc", ",", 
                    "FunctionRepo`sparseAssociation`Private`keyList"}], "}"}],
                     ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`keyList", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`keys", ",", 
                    RowBox[{
                    RowBox[{"FunctionRepo`sparseAssociation`Private`l", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"{", "__List", "}"}], "]"}]}], "\[RuleDelayed]", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`l", ",", 
                    "FunctionRepo`sparseAssociation`Private`level"}], 
                    "]"}]}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`assoc", "=", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`\
positionAssociation", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`expr", ",", 
                    RowBox[{
                    "Except", "[", 
                    "FunctionRepo`sparseAssociation`Private`default", "]"}], 
                    ",", 
                    RowBox[{
                    "{", "FunctionRepo`sparseAssociation`Private`level", 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`sparseAssociation`Private`assoc", "]"}], "&&", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`checkKeyDims", 
                    "[", 
                    RowBox[{
                    RowBox[{"Activate", "[", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"Inactive", "[", "Max", "]"}], "@@", 
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`sparseAssociation`Private`assoc", "]"}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`sparseAssociation`Private`keyList"}]}], 
                    "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`\
isparseAssociation", "[", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{
                    "Normal", "[", 
                    "FunctionRepo`sparseAssociation`Private`assoc", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"{", "_", "}"}], "\[Rule]", 
                    "FunctionRepo`sparseAssociation`Private`default"}]}], 
                    "]"}], ",", 
                    "FunctionRepo`sparseAssociation`Private`keyList"}], "]"}],
                     ",", "$Failed"}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    "IntegerQ", "[", 
                    "FunctionRepo`sparseAssociation`Private`level", "]"}]}]}],
                     "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"sparseAssociation", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`expr_", ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`default_", ":", 
                    "0"}], ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`level", "=", 
                    RowBox[{"OptionValue", "[", "\<\"Level\"\>", "]"}]}], ",",
                     "FunctionRepo`sparseAssociation`Private`assoc"}], "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`assoc", "=", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`\
positionAssociation", "[", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`expr", ",", 
                    RowBox[{
                    "Except", "[", 
                    "FunctionRepo`sparseAssociation`Private`default", "]"}], 
                    ",", 
                    RowBox[{
                    "{", "FunctionRepo`sparseAssociation`Private`level", 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`sparseAssociation`Private`assoc", "]"}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`sparseAssociation`Private`\
isparseAssociation", "[", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{
                    "Normal", "[", 
                    "FunctionRepo`sparseAssociation`Private`assoc", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"{", "_", "}"}], "\[Rule]", 
                    "FunctionRepo`sparseAssociation`Private`default"}]}], 
                    "]"}], "]"}], ",", "$Failed"}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    "IntegerQ", "[", 
                    "FunctionRepo`sparseAssociation`Private`level", "]"}]}]}],
                     "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"\<\"Level\"\>", "\[Rule]", "Automatic"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`sparseAssociation\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> "", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`sparseAssociation, {
      FunctionRepo`sparseAssociation[{}, 
         BlankNullSequence[]] :> Association[], FunctionRepo`sparseAssociation[
         PatternTest[
          Pattern[FunctionRepo`sparseAssociation`Private`array, 
           Blank[]], ArrayQ], 
         Pattern[FunctionRepo`sparseAssociation`Private`keys, 
          Except[{
            BlankSequence[List]}, 
           Blank[List]]], 
         Optional[
          Pattern[FunctionRepo`sparseAssociation`Private`default, 
           Except[
            Alternatives[
             Blank[List], 
             Blank[Rule]]]], 0], 
         Pattern[FunctionRepo`sparseAssociation`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`sparseAssociation[
        FunctionRepo`sparseAssociation`Private`array, 
         ConstantArray[FunctionRepo`sparseAssociation`Private`keys, 
          ArrayDepth[FunctionRepo`sparseAssociation`Private`array]], 
         FunctionRepo`sparseAssociation`Private`default, 
         FunctionRepo`sparseAssociation`Private`opts], 
       FunctionRepo`sparseAssociation[
         PatternTest[
          Pattern[FunctionRepo`sparseAssociation`Private`array, 
           Blank[]], ArrayQ], 
         Pattern[FunctionRepo`sparseAssociation`Private`keys, {
           BlankSequence[List]}], 
         Optional[
          Pattern[FunctionRepo`sparseAssociation`Private`default, 
           Except[
            Alternatives[
             Blank[List], 
             Blank[Rule]]]], 0], 
         Pattern[FunctionRepo`sparseAssociation`Private`opts, 
          OptionsPattern[]]] :> 
       With[{FunctionRepo`sparseAssociation`Private`dims = 
          Dimensions[FunctionRepo`sparseAssociation`Private`array], 
          FunctionRepo`sparseAssociation`Private`lvl = OptionValue["Level"]}, 
         Condition[
          FunctionRepo`sparseAssociation`Private`isparseAssociation[
           ArrayRules[
           FunctionRepo`sparseAssociation`Private`array, 
            FunctionRepo`sparseAssociation`Private`default], 
           FunctionRepo`sparseAssociation`Private`keys], 
          And[FunctionRepo`sparseAssociation`Private`lvl === Automatic, 
           FunctionRepo`sparseAssociation`Private`checkKeyDims[
           FunctionRepo`sparseAssociation`Private`dims, 
            Map[Length, FunctionRepo`sparseAssociation`Private`keys]]]]], 
       FunctionRepo`sparseAssociation[
         PatternTest[
          Pattern[FunctionRepo`sparseAssociation`Private`array, 
           Blank[]], ArrayQ], 
         Optional[
          Pattern[FunctionRepo`sparseAssociation`Private`default, 
           Blank[]], 0], 
         Pattern[FunctionRepo`sparseAssociation`Private`opts, 
          OptionsPattern[]]] :> 
       With[{FunctionRepo`sparseAssociation`Private`lvl = 
          OptionValue["Level"]}, 
         Condition[
          FunctionRepo`sparseAssociation`Private`isparseAssociation[
           ArrayRules[
           FunctionRepo`sparseAssociation`Private`array, 
            FunctionRepo`sparseAssociation`Private`default]], 
          FunctionRepo`sparseAssociation`Private`lvl === Automatic]], 
       FunctionRepo`sparseAssociation[
         Pattern[FunctionRepo`sparseAssociation`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`sparseAssociation`Private`keys, 
          Blank[List]], 
         Optional[
          Pattern[FunctionRepo`sparseAssociation`Private`default, 
           Blank[]], 0], 
         Pattern[FunctionRepo`sparseAssociation`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`sparseAssociation`Private`level = 
          OptionValue["Level"], FunctionRepo`sparseAssociation`Private`assoc, 
          FunctionRepo`sparseAssociation`Private`keyList}, 
         Condition[
         FunctionRepo`sparseAssociation`Private`keyList = 
           Replace[FunctionRepo`sparseAssociation`Private`keys, 
             Pattern[FunctionRepo`sparseAssociation`Private`l, 
               Except[{
                 BlankSequence[List]}]] :> 
             ConstantArray[
              FunctionRepo`sparseAssociation`Private`l, 
               FunctionRepo`sparseAssociation`Private`level]]; 
          FunctionRepo`sparseAssociation`Private`assoc = 
           FunctionRepo`sparseAssociation`Private`positionAssociation[
            FunctionRepo`sparseAssociation`Private`expr, 
             Except[FunctionRepo`sparseAssociation`Private`default], {
             FunctionRepo`sparseAssociation`Private`level}]; If[
            And[
             AssociationQ[FunctionRepo`sparseAssociation`Private`assoc], 
             FunctionRepo`sparseAssociation`Private`checkKeyDims[
              Activate[
               Thread[
                Apply[
                 Inactive[Max], 
                 Keys[FunctionRepo`sparseAssociation`Private`assoc]]]], 
              Map[Length, FunctionRepo`sparseAssociation`Private`keyList]]], 
            FunctionRepo`sparseAssociation`Private`isparseAssociation[
             Append[
              Normal[FunctionRepo`sparseAssociation`Private`assoc], {
                Blank[]} -> FunctionRepo`sparseAssociation`Private`default], 
             FunctionRepo`sparseAssociation`Private`keyList], $Failed], 
          IntegerQ[FunctionRepo`sparseAssociation`Private`level]]], 
       FunctionRepo`sparseAssociation[
         Pattern[FunctionRepo`sparseAssociation`Private`expr, 
          Blank[]], 
         Optional[
          Pattern[FunctionRepo`sparseAssociation`Private`default, 
           Blank[]], 0], 
         Pattern[FunctionRepo`sparseAssociation`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`sparseAssociation`Private`level = 
          OptionValue["Level"], FunctionRepo`sparseAssociation`Private`assoc}, 
         Condition[
         FunctionRepo`sparseAssociation`Private`assoc = 
           FunctionRepo`sparseAssociation`Private`positionAssociation[
            FunctionRepo`sparseAssociation`Private`expr, 
             Except[FunctionRepo`sparseAssociation`Private`default], {
             FunctionRepo`sparseAssociation`Private`level}]; If[
            AssociationQ[FunctionRepo`sparseAssociation`Private`assoc], 
            FunctionRepo`sparseAssociation`Private`isparseAssociation[
             Append[
              Normal[FunctionRepo`sparseAssociation`Private`assoc], {
                Blank[]} -> 
              FunctionRepo`sparseAssociation`Private`default]], $Failed], 
          IntegerQ[FunctionRepo`sparseAssociation`Private`level]]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> {"Level" -> Automatic}, 
    "Attributes" -> {}, "FullName" -> "FunctionRepo`sparseAssociation"], 
   False]]], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"451b139f-1f00-42b2-816c-6c8b74835882"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["tukeyMedianPolish", \
"Subsection",ExpressionUUID->"e9e75c8c-5552-4968-99ba-f046fd15b3b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "tukeyMedianPolish"}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"5da7d7b8-e171-4eca-a0c1-852ad28cf372"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"tukeyMedianPolish[mat] performs the Tukey median \
polish algorithm to find row and column effects in a data matrix.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" DownValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DownValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DownValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
mat_List", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
outputType", ":", 
                    
                    RowBox[{"\<\"Matrix\"\>", 
                    "|", "\<\"PropertyAssociation\"\>"}], 
                    ":", "\<\"Matrix\"\>"}], ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
try", "=", 
                    RowBox[{
                    RowBox[{
                    "tukeyMedianPolish", "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", "]"}], "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
mat", "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
try", ",", 
                    RowBox[{
                    "_", "?", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
validOutputQ"}]}], "]"}], ",", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
outputType", ",", "\[IndentingNewLine]", "\<\"PropertyAssociation\"\>", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
propAssoc", "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
try", "]"}], ",", "\[IndentingNewLine]", "_", ",", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
try"}], "]"}], ",", "$Failed"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
compilationOpts", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"OptionValue", "[", "Compiled", "]"}], "}"}], 
                    "]"}]}], ",", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
cf"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
fun", "=", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish", "[", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`\
Private`opts", "}"}], ",", 
                    RowBox[{
                    "Options", "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish", "]"}]}], "]"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
cf", "=", 
                    RowBox[{"Compile", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
m", ",", "_Real", ",", "2"}], "}"}], "}"}], ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
fun", "[", "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`m", 
                    "]"}], ",", 
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
compilationOpts", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}]}], "]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
cf", "[", 
                    RowBox[{"RandomReal", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}]}], "]"}], "]"}], ",", 
                    "NumericQ"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    "tukeyMedianPolish", "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", "]"}], "=", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
cf"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"tukeyMedianPolish", "::", "compileFail"}], 
                    "MessageName"], "]"}], ";", "$Failed"}]}], "]"}]}]}], 
                    "]"}], "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
compilationOpts", ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], 
                    "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
mat_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    "]"}], "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{
                    "Dimensions", "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
mat", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "Positive"}], ",", 
                    RowBox[{"_Integer", "?", "Positive"}]}], "}"}]}], "]"}]}],
                     ":=", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish", "[", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`\
Private`opts", "}"}], ",", 
                    RowBox[{
                    "Options", "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish", "]"}]}], "]"}]}], "]"}], "[", 
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
mat", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], "|", 
                    RowBox[{"_", "?", "MatrixQ"}]}], "]"}], ":=", 
                    RowBox[{"{", 
                    RowBox[{"{", "}"}], "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", "_", 
                    "]"}], ":=", "$Failed"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   PaneSelectorBox[{True->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    False),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"], False->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    True),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]]], 
                   PaneSelectorBox[{True->GridBox[{
                    {
                    RowBox[{"MaxIterations", "\[Rule]", "100"}]},
                    {
                    
                    RowBox[{"\<\"ConvergenceTest\"\>", "\[Rule]", 
                    "Automatic"}]},
                    {
                    RowBox[{"Tolerance", "\[Rule]", 
                    RowBox[{"Scaled", "[", "0.0001`", "]"}]}]},
                    {
                    
                    RowBox[{"\<\"LocationEstimator\"\>", "\[Rule]", 
                    "Median"}]},
                    {
                    RowBox[{"Compiled", "\[Rule]", "False"}]},
                    {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","5","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.}}}], False->
                    RowBox[{
                    RowBox[{"MaxIterations", "\[Rule]", "100"}], 
                    "\[ThinSpace]", 
                    StyleBox["\<\"\[Ellipsis]\"\>", "InformationRowOpener",
                    StripOnInput->False], "\[ThinSpace]", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","5","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]],
                    BaselinePosition->Baseline,
                    ImageSize->Automatic]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`tukeyMedianPolish\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"tukeyMedianPolish[mat] performs the Tukey median \
polish algorithm to find row and column effects in a data matrix.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "tukeyMedianPolish[mat] performs the Tukey median polish algorithm to \
find row and column effects in a data matrix.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`tukeyMedianPolish, {
      FunctionRepo`tukeyMedianPolish[
         Pattern[FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`mat, 
          Blank[List]], 
         Optional[
          Pattern[
          FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`outputType, 
           Alternatives["Matrix", "PropertyAssociation"]], "Matrix"], 
         Pattern[
         FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]] :> 
       With[{FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`try = 
          FunctionRepo`tukeyMedianPolish[
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts][
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`mat]}, 
         If[
          MatchQ[FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`try, 
           PatternTest[
            Blank[], 
            FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
validOutputQ]], 
          Switch[
          FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`outputType,
            "PropertyAssociation", 
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`propAssoc[
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`try], 
           Blank[], 
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`try], \
$Failed]], FunctionRepo`tukeyMedianPolish[
         Pattern[
         FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
compilationOpts = Flatten[{
             OptionValue[Compiled]}], 
          FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`cf}, 
         Condition[
          
          With[{FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`fun = 
            FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish[
              Apply[Sequence, 
               
               FilterRules[{
                FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts}\
, 
                Options[
                FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish]]]]}, 
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`cf = 
            Compile[{{
               FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`m, 
                Blank[Real], 2}}, 
              FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`fun[
              FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`m], 
              Evaluate[
               Apply[Sequence, 
                Cases[
                FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
compilationOpts, 
                 OptionsPattern[]]]]]; If[
             MatrixQ[
              FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`cf[
               RandomReal[1, {3, 3}]], NumericQ], 
             FunctionRepo`tukeyMedianPolish[
              FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts] = 
             FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`cf, 
             Message[
               MessageName[
               FunctionRepo`tukeyMedianPolish, "compileFail"]]; $Failed]], 
          MatchQ[
          FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
compilationOpts, {True, 
            OptionsPattern[]}]]]}], "SubValues" -> 
    Information`InformationValueForm[
     SubValues, FunctionRepo`tukeyMedianPolish, {Condition[
         FunctionRepo`tukeyMedianPolish[
          Pattern[
          FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts, 
           OptionsPattern[]]][
          PatternTest[
           Pattern[
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`mat, 
            Blank[]], MatrixQ[#, NumericQ]& ]], 
         MatchQ[
          Dimensions[
          FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`mat], {
           PatternTest[
            Blank[Integer], Positive], 
           PatternTest[
            Blank[Integer], Positive]}]] :> 
       FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish[
         Apply[Sequence, 
          
          FilterRules[{
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts}, 
           Options[
           FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`\
itukeyMedianPolish]]]][
        FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`mat], 
       FunctionRepo`tukeyMedianPolish[
         Pattern[
         FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]][
         Alternatives[{}, 
          PatternTest[
           Blank[], MatrixQ]]] :> {{}}, FunctionRepo`tukeyMedianPolish[
         Pattern[
         FunctionRepo`tukeyMedianPolish`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]][
         Blank[]] :> $Failed}], "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     MaxIterations -> 100, "ConvergenceTest" -> Automatic, Tolerance -> 
      Scaled[0.0001], "LocationEstimator" -> Median, Compiled -> False}, 
    "Attributes" -> {}, "FullName" -> "FunctionRepo`tukeyMedianPolish"], 
   False]]], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"6c76b9ec-7c94-4ecd-8345-4ccc5db21da1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["1*^-4"], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"c192ab1d-e421-475c-a1a5-81ce1a9a1263"],

Cell[BoxData[
 FractionBox["1", "10000"]], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"8cee5416-ffa0-40b9-abac-a50175acedda"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1810, 888},
WindowMargins->{{Automatic, 44}, {31, Automatic}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
ShowGroupOpener->True,
TrackCellChangeTimes->False,
Magnification:>1.3 Inherited,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]

