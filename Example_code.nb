Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"<<", "FunctionRepo`"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[3]:=",ExpressionUUID->"db0bf3fb-3968-4b36-8211-5cb1fa482ae8"],

Cell[CellGroupData[{

Cell["conditionedMultinormalDistribution", \
"Subsection",ExpressionUUID->"d74078a0-641e-4aa0-a1a8-445f4149fb05"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "conditionedMultinormalDistribution"}]], "Input",
 CellLabel->"In[52]:=",ExpressionUUID->"0784d209-d22f-45cd-b95f-ceab89a70fef"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"conditionedMultinormalDistribution[dist, {i1 -> \
val1, ...}, {j1, j2, ...}] gives the {j1, j2, ...} marginal of dist when the \
indices {i1, ...} are conditioned to values {val1, ...}\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist_", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ":=", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist"}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist_", ",", 
                    RowBox[{"{", "}"}], ",", "All"}], "]"}], ":=", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist"}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist_", ",", 
                    RowBox[{"{", "}"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals_"}], "]"}], ":=", 
                    RowBox[{"MarginalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist_", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rule_Rule", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rest___"}], "]"}], ":=", 
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "Thread", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rule", "]"}], "}"}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rest"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"MultinormalDistribution"},
                    "InactiveHead",
                    BaseStyle->"Inactive",
                    SyntaxForm->"Symbol",
                    Tooltip->"Inactive[MultinormalDistribution]"], "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov_", "?", "SquareMatrixQ"}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rest___"}], "]"}], ":=", 
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"MultinormalDistribution"},
                    "InactiveHead",
                    BaseStyle->"Inactive",
                    SyntaxForm->"Symbol",
                    Tooltip->"Inactive[MultinormalDistribution]"], "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}]}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov"}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rest"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
head", ":", "MultinormalDistribution"}], ")"}], "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu_", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`cov_"}], 
                    "]"}], ")"}], "?", "DistributionParameterQ"}], "|", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
head", ":", 
                    RowBox[{
                    "Inactive", "[", "MultinormalDistribution", "]"}]}], 
                    ")"}], "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu_", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`cov_"}], 
                    "]"}], "/;", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
lm", "=", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
lm", "===", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}]}], "&&", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
lm", ">", "1"}]}]}], "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Integer", "\[Rule]", "_"}], ")"}], ".."}], 
                    "}"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals", ":", 
                    RowBox[{"_Integer", "|", 
                    RowBox[{"{", "__Integer", "}"}], "|", "All"}], ":", 
                    "All"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
eval", "=", 
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`cov"}], 
                    "}"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`cov"}], 
                    "}"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m_", "?", "VectorQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
c_", "?", "MatrixQ"}]}], "}"}], "\[RuleDelayed]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
head", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`c"}], 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m_", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`var_"}], 
                    "}"}], "\[RuleDelayed]", 
                    RowBox[{"NormalDistribution", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m", ",", 
                    SqrtBox[
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
var"]}], "]"}]}]}], "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "ListQ", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
eval", "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"conditionedMultinormalDistribution", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu_", "?", "VectorQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov_", "?", "SquareMatrixQ"}]}], "}"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Integer", "\[Rule]", "_"}], ")"}], ".."}], 
                    "}"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals", ":", 
                    RowBox[{"_Integer", "|", 
                    RowBox[{"{", "__Integer", "}"}], "|", "All"}], ":", 
                    "All"}]}], "]"}], "/;", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"DuplicateFreeQ", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",",
                     "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "}"}], "]"}], "]"}], ",", 
                    RowBox[{"False", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    "conditionedMultinormalDistribution", "::", "dupIndex"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",",
                     "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals"}], "]"}], ";", "False"}], ")"}]}]}], "]"}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim", "=", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", "]"}]}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`dist", 
                    ",", "FunctionRepo`conditionedMultinormalDistribution`\
Private`sparseQ", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
numericQ"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ", "=", 
                    RowBox[{
                    RowBox[{
                    "Head", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}], "===", "SparseArray"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ", "=", 
                    RowBox[{
                    RowBox[{
                    "Head", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}], "===", "StructuredArray"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup", "=", 
                    RowBox[{"AssociationThread", "[", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",",
                     "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim", ",", "1"}], "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop", "=", 
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup", "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues", "=", 
                    RowBox[{
                    "Values", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup", "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
numericQ", "=", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", ",", "NumericQ"}], "]"}], "&&", 
                    RowBox[{"VectorQ", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues", ",", "NumericQ"}], "]"}]}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"All", "\[RuleDelayed]", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{
                    "Range", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim", "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop"}], "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
i_Integer", "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
i", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`dim", ",", 
                    "1"}], "]"}], "}"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
ints_List", "\[RuleDelayed]", 
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
ints", ",", "FunctionRepo`conditionedMultinormalDistribution`Private`dim", 
                    ",", "1"}], "]"}]}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
mu", "\[LeftDoubleBracket]", "#1", "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop"}], "}"}]}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop"}], "\[RightDoubleBracket]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop", ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop"}], "\[RightDoubleBracket]"}]}], "}"}]}], "}"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", "=", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
numericQ", "&&", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ"}], ",", 
                    RowBox[{"LinearSolve", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], "]"}],
                     ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
numericQ", "&&", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ"}], ",", 
                    RowBox[{"LinearSolve", "[", 
                    RowBox[{"SparseArray", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], "]"}],
                     "]"}], ",", "True", ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv", "=", 
                    RowBox[{"Inverse", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv", ".", "#1"}], "&"}]}], "]"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", "=", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ".", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues", "-", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
                    "]"}]}]}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ".", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ", ",", 
                    RowBox[{"SparseArray", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], "]"}],
                     "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], 
                    "]"}]}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    "\[RuleDelayed]", 
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    "Transpose", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
m", "]"}], "+", "FunctionRepo`conditionedMultinormalDistribution`Private`m"}],
                     "2"]}]}], "]"}]}], "}"}], ",", 
                    StyleBox[
                    RowBox[{"LinearSolve", "::", "exanexb"}], 
                    "MessageName"]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerQ", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals", "]"}], ",", 
                    RowBox[{
                    "Flatten", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ", ",", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SymmetrizedArray", "[", 
                    RowBox[{"#1", ",", "Automatic", ",", 
                    RowBox[{"Symmetric", "[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "]"}], "&"}], 
                    ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist", ",", "2"}], "]"}], ",", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dist"}], "]"}]}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "]"}], "<", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim"}], ",", 
                    RowBox[{"False", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    "conditionedMultinormalDistribution", "::", "noDim"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
rules", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
                    "]"}], ";", "False"}], ")"}]}]}], "]"}], "&&", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
cov", "]"}], "===", 
                    "FunctionRepo`conditionedMultinormalDistribution`Private`\
dim"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"FunctionRepo`conditionedMultinormalDistribution\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"conditionedMultinormalDistribution[dist, {i1 -> \
val1, ...}, {j1, j2, ...}] gives the {j1, j2, ...} marginal of dist when the \
indices {i1, ...} are conditioned to values {val1, ...}\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "conditionedMultinormalDistribution[dist, {i1 -> val1, ...}, {j1, j2, \
...}] gives the {j1, j2, ...} marginal of dist when the indices {i1, ...} are \
conditioned to values {val1, ...}", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`conditionedMultinormalDistribution, {
      FunctionRepo`conditionedMultinormalDistribution[
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          Blank[]], {}] :> 
       FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
       FunctionRepo`conditionedMultinormalDistribution[
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          Blank[]], {}, All] :> 
       FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
       FunctionRepo`conditionedMultinormalDistribution[
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          Blank[]], {}, 
         Pattern[
         FunctionRepo`conditionedMultinormalDistribution`Private`marginals, 
          Blank[]]] :> 
       MarginalDistribution[
        FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
         FunctionRepo`conditionedMultinormalDistribution`Private`marginals], 
       FunctionRepo`conditionedMultinormalDistribution[
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          Blank[]], 
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`rule, 
          Blank[Rule]], 
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`rest, 
          BlankNullSequence[]]] :> 
       FunctionRepo`conditionedMultinormalDistribution[
        FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
         Flatten[{
           Thread[
           FunctionRepo`conditionedMultinormalDistribution`Private`rule]}], 
         FunctionRepo`conditionedMultinormalDistribution`Private`rest], 
       FunctionRepo`conditionedMultinormalDistribution[
         Inactive[MultinormalDistribution][
          PatternTest[
           Pattern[
           FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
            Blank[]], SquareMatrixQ]], 
         Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`rest, 
          BlankNullSequence[]]] :> 
       FunctionRepo`conditionedMultinormalDistribution[
         Inactive[MultinormalDistribution][
          ConstantArray[0, 
           Length[
           FunctionRepo`conditionedMultinormalDistribution`Private`cov]], 
          FunctionRepo`conditionedMultinormalDistribution`Private`cov], 
         FunctionRepo`conditionedMultinormalDistribution`Private`rest], 
       FunctionRepo`conditionedMultinormalDistribution[
         Alternatives[
          PatternTest[
           Pattern[
           FunctionRepo`conditionedMultinormalDistribution`Private`head, 
            MultinormalDistribution][
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             Blank[]], 
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
             Blank[]]], DistributionParameterQ], 
          Condition[
           Pattern[
           FunctionRepo`conditionedMultinormalDistribution`Private`head, 
            Inactive[MultinormalDistribution]][
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             Blank[]], 
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
             Blank[]]], 
           
           With[{FunctionRepo`conditionedMultinormalDistribution`Private`lm = 
             Length[FunctionRepo`conditionedMultinormalDistribution`Private`\
mu]}, 
            And[
            FunctionRepo`conditionedMultinormalDistribution`Private`lm === 
             Length[FunctionRepo`conditionedMultinormalDistribution`Private`\
cov], FunctionRepo`conditionedMultinormalDistribution`Private`lm > 1]]]], 
         Pattern[
         FunctionRepo`conditionedMultinormalDistribution`Private`rules, {
           Repeated[Blank[Integer] -> Blank[]]}], 
         Optional[
          Pattern[
          FunctionRepo`conditionedMultinormalDistribution`Private`marginals, 
           Alternatives[
            Blank[Integer], {
             BlankSequence[Integer]}, All]], All]] :> 
       With[{FunctionRepo`conditionedMultinormalDistribution`Private`eval = 
          FunctionRepo`conditionedMultinormalDistribution[{
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             FunctionRepo`conditionedMultinormalDistribution`Private`cov}, 
            FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
            FunctionRepo`conditionedMultinormalDistribution`Private`marginals]\
}, 
         Condition[
          Replace[
           
           FunctionRepo`conditionedMultinormalDistribution[{
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             FunctionRepo`conditionedMultinormalDistribution`Private`cov}, 
            FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
            FunctionRepo`conditionedMultinormalDistribution`Private`marginals]\
, {{
              PatternTest[
               Pattern[
               FunctionRepo`conditionedMultinormalDistribution`Private`m, 
                Blank[]], VectorQ], 
              PatternTest[
               Pattern[
               FunctionRepo`conditionedMultinormalDistribution`Private`c, 
                Blank[]], MatrixQ]} :> 
            FunctionRepo`conditionedMultinormalDistribution`Private`head[
             FunctionRepo`conditionedMultinormalDistribution`Private`m, 
              FunctionRepo`conditionedMultinormalDistribution`Private`c], {
              Pattern[
              FunctionRepo`conditionedMultinormalDistribution`Private`m, 
               Blank[]], 
              Pattern[
              FunctionRepo`conditionedMultinormalDistribution`Private`var, 
               Blank[]]} :> 
            NormalDistribution[
             FunctionRepo`conditionedMultinormalDistribution`Private`m, 
              Sqrt[
              FunctionRepo`conditionedMultinormalDistribution`Private`var]]}], 
          ListQ[
          FunctionRepo`conditionedMultinormalDistribution`Private`eval]]], 
       Condition[
         FunctionRepo`conditionedMultinormalDistribution[{
           PatternTest[
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`mu, 
             Blank[]], VectorQ], 
           PatternTest[
            Pattern[
            FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
             Blank[]], SquareMatrixQ]}, 
          Pattern[
          FunctionRepo`conditionedMultinormalDistribution`Private`rules, {
            Repeated[Blank[Integer] -> Blank[]]}], 
          Optional[
           Pattern[
           FunctionRepo`conditionedMultinormalDistribution`Private`marginals, 
            Alternatives[
             Blank[Integer], {
              BlankSequence[Integer]}, All]], All]], 
         Replace[
          DuplicateFreeQ[
           Flatten[{
             Part[
             FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
              All, 1], 
             FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals}]], False :> (Message[
             MessageName[
             FunctionRepo`conditionedMultinormalDistribution, "dupIndex"], 
             Part[
             FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
              All, 1], 
             FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals]; False)]] :> 
       Module[{FunctionRepo`conditionedMultinormalDistribution`Private`dim = 
          Length[FunctionRepo`conditionedMultinormalDistribution`Private`mu], 
          FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep, 
          FunctionRepo`conditionedMultinormalDistribution`Private`indexDrop, 
          
          FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu, 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 
          FunctionRepo`conditionedMultinormalDistribution`Private`rulesNoDup, 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues, 
          FunctionRepo`conditionedMultinormalDistribution`Private`inv22, 
          FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
          FunctionRepo`conditionedMultinormalDistribution`Private`sparseQ, 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ, 
          FunctionRepo`conditionedMultinormalDistribution`Private`numericQ}, 
         Condition[
         FunctionRepo`conditionedMultinormalDistribution`Private`sparseQ = 
           Head[FunctionRepo`conditionedMultinormalDistribution`Private`cov] === 
            SparseArray; 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ = 
           Head[FunctionRepo`conditionedMultinormalDistribution`Private`cov] === 
            StructuredArray; 
          FunctionRepo`conditionedMultinormalDistribution`Private`rulesNoDup = 
           AssociationThread[
             Mod[
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
               All, 1], 
              FunctionRepo`conditionedMultinormalDistribution`Private`dim, 1], 
             Part[
             FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
              All, 2]]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`indexDrop = 
           Keys[FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues = 
           Values[FunctionRepo`conditionedMultinormalDistribution`Private`\
rulesNoDup]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`numericQ = 
           And[
             MatrixQ[
             FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
              NumericQ], 
             VectorQ[
             FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues, NumericQ]]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep = 
           Replace[FunctionRepo`conditionedMultinormalDistribution`Private`\
marginals, {All :> Complement[
                Range[
                FunctionRepo`conditionedMultinormalDistribution`Private`dim], 
                FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop], Pattern[FunctionRepo`conditionedMultinormalDistribution`Private`i, 
                Blank[Integer]] :> {
                Mod[
                FunctionRepo`conditionedMultinormalDistribution`Private`i, 
                 FunctionRepo`conditionedMultinormalDistribution`Private`dim, 
                 1]}, Pattern[
               FunctionRepo`conditionedMultinormalDistribution`Private`ints, 
                Blank[List]] :> 
              Mod[FunctionRepo`conditionedMultinormalDistribution`Private`\
ints, FunctionRepo`conditionedMultinormalDistribution`Private`dim, 1]}]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu = 
           Map[Part[
             FunctionRepo`conditionedMultinormalDistribution`Private`mu, #]& \
, {FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep, 
              FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop}]; 
          FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov = {{
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep, FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep], 
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexKeep, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop]}, {
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop, FunctionRepo`conditionedMultinormalDistribution`Private`indexKeep], 
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`cov, 
               
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop, 
               FunctionRepo`conditionedMultinormalDistribution`Private`\
indexDrop]}}; 
          FunctionRepo`conditionedMultinormalDistribution`Private`inv22 = 
           Which[
             And[
             FunctionRepo`conditionedMultinormalDistribution`Private`numericQ,
               FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ], 
             LinearSolve[
              Part[
              FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 2]], 
             And[
             FunctionRepo`conditionedMultinormalDistribution`Private`numericQ,
               FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ], 
             LinearSolve[
              SparseArray[
               Part[
               FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 2]]], True, 
             
             With[{FunctionRepo`conditionedMultinormalDistribution`Private`\
inv = Inverse[
                 Part[
                 FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 2]]}, Dot[
              FunctionRepo`conditionedMultinormalDistribution`Private`inv, #]& \
]]; FunctionRepo`conditionedMultinormalDistribution`Private`dist = 
           Quiet[{Part[
               FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu, 1] + Dot[
                Part[
                FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 1, 2], 
                FunctionRepo`conditionedMultinormalDistribution`Private`inv22[
                 Subtract[
                 FunctionRepo`conditionedMultinormalDistribution`Private`\
conditionValues, 
                  Part[
                  FunctionRepo`conditionedMultinormalDistribution`Private`\
partitionedMu, 2]]]], 
              Replace[
               Subtract[
                Part[
                FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 1, 1], 
                Dot[
                 Part[
                 FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 1, 2], 
                 If[
                 FunctionRepo`conditionedMultinormalDistribution`Private`\
sparseQ, 
                  SparseArray[
                   
                   FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22[
                    Part[
                    FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 1]]], 
                  
                  FunctionRepo`conditionedMultinormalDistribution`Private`\
inv22[
                   Part[
                   FunctionRepo`conditionedMultinormalDistribution`Private`\
partionedCov, 2, 1]]]]], PatternTest[
                 Pattern[
                 FunctionRepo`conditionedMultinormalDistribution`Private`m, 
                  Blank[]], MatrixQ[#, NumericQ]& ] :> 
               Divide[Transpose[
                  FunctionRepo`conditionedMultinormalDistribution`Private`m] + 
                 FunctionRepo`conditionedMultinormalDistribution`Private`m, 
                 2]]}, 
             MessageName[LinearSolve, "exanexb"]]; If[
            IntegerQ[
            FunctionRepo`conditionedMultinormalDistribution`Private`marginals]\
, 
            Flatten[
            FunctionRepo`conditionedMultinormalDistribution`Private`dist], 
            If[
            FunctionRepo`conditionedMultinormalDistribution`Private`\
symmetrizedQ, 
             MapAt[SymmetrizedArray[#, Automatic, 
               Symmetric[{1, 2}]]& , 
              FunctionRepo`conditionedMultinormalDistribution`Private`dist, 
              2], FunctionRepo`conditionedMultinormalDistribution`Private`\
dist]], 
          And[
           Replace[
           Length[FunctionRepo`conditionedMultinormalDistribution`Private`\
rules] < FunctionRepo`conditionedMultinormalDistribution`Private`dim, 
            False :> (Message[
               MessageName[
               FunctionRepo`conditionedMultinormalDistribution, "noDim"], 
               Part[
               FunctionRepo`conditionedMultinormalDistribution`Private`rules, 
                All, 1]]; False)], 
           Length[FunctionRepo`conditionedMultinormalDistribution`Private`cov]\
 === FunctionRepo`conditionedMultinormalDistribution`Private`dim]]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`conditionedMultinormalDistribution"], False]]], "Output",
 CellLabel->"Out[52]=",ExpressionUUID->"a5642afc-4346-4103-a484-0eaaad5c7243"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dist", "=", 
   RowBox[{"MultinormalDistribution", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Mu]1", ",", "\[Mu]2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[CapitalSigma]11", ",", "\[CapitalSigma]12"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\[CapitalSigma]12", ",", "\[CapitalSigma]22"}], "}"}]}], 
      "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"conditionedMultinormalDistribution", "[", 
  RowBox[{"dist", ",", 
   RowBox[{"2", "\[Rule]", "x2"}]}], "]"}]}], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"60977677-8764-4ab8-b907-4aa8c97ceadb"],

Cell[BoxData[
 RowBox[{"MultinormalDistribution", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Mu]1", "+", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x2", "-", "\[Mu]2"}], ")"}], " ", "\[CapitalSigma]12"}], 
      "\[CapitalSigma]22"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"\[CapitalSigma]11", "-", 
      FractionBox[
       SuperscriptBox["\[CapitalSigma]12", "2"], "\[CapitalSigma]22"]}], 
     "}"}], "}"}]}], "]"}]], "Output",
 CellLabel->"Out[54]=",ExpressionUUID->"c5889b6b-3dba-46f4-be1c-114700a723c0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"conditionedMultinormalDistribution", "[", 
  RowBox[{"dist", ",", 
   RowBox[{"2", "\[Rule]", "x2"}], ",", "1"}], "]"}]], "Input",
 CellLabel->"In[55]:=",ExpressionUUID->"9f2fdb92-19fe-40ec-8bd4-e9ba6c55a6f9"],

Cell[BoxData[
 RowBox[{"NormalDistribution", "[", 
  RowBox[{
   RowBox[{"\[Mu]1", "+", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x2", "-", "\[Mu]2"}], ")"}], " ", "\[CapitalSigma]12"}], 
     "\[CapitalSigma]22"]}], ",", 
   SqrtBox[
    RowBox[{"\[CapitalSigma]11", "-", 
     FractionBox[
      SuperscriptBox["\[CapitalSigma]12", "2"], "\[CapitalSigma]22"]}]]}], 
  "]"}]], "Output",
 CellLabel->"Out[55]=",ExpressionUUID->"0c960114-2fad-49ea-9f55-8c581f841232"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["convertDataFormat", \
"Subsection",ExpressionUUID->"dfd7d28f-35f2-42af-a9b6-5ec9a729667f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "convertDataFormat"}]], "Input",
 CellLabel->"In[56]:=",ExpressionUUID->"33b38c0c-05f4-47b4-b352-aef21b1b7a2b"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"convertDataFormat[data, type] attempts to convert \
machine learning data to a different format to make it easier to switch out \
fitting methods.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" DownValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DownValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DownValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    RowBox[{
                    "_", "?", 
                    "FunctionRepo`convertDataFormat`Private`emptyDataQ"}], 
                    ",", 
                    
                    RowBox[{"\<\"Matrix\"\>", "|", "\<\"Vector\"\>", 
                    "|", "\<\"ListOfRules\"\>"}]}], "]"}], ":=", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    RowBox[{
                    "_", "?", 
                    "FunctionRepo`convertDataFormat`Private`emptyDataQ"}], 
                    ",", "\<\"RuleOfLists\"\>"}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", "}"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    RowBox[{
                    "_", "?", 
                    "FunctionRepo`convertDataFormat`Private`emptyDataQ"}], 
                    ",", "\<\"Assocation\"\>"}], "]"}], ":=", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\<\"Input\"\>", "\[Rule]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{"\<\"Output\"\>", "\[Rule]", 
                    RowBox[{"{", "}"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`data_", ",", 
                    "FunctionRepo`convertDataFormat`Private`typeOut_String"}],
                     "]"}], "/;", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`convertDataFormat`Private`$dataTypes", 
                    "]"}], ",", 
                    "FunctionRepo`convertDataFormat`Private`typeOut"}], 
                    "]"}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`typeIn", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{"KeyValueMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`data", ",", 
                    "#2"}], "]"}], ",", 
                    RowBox[{"Throw", "[", "#1", "]"}]}], "]"}], "&"}], ",", 
                    "FunctionRepo`convertDataFormat`Private`$dataTypes"}], 
                    "]"}], "]"}]}], ",", 
                    "FunctionRepo`convertDataFormat`Private`dataOut"}], "}"}],
                     ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`typeIn", "===", 
                    "FunctionRepo`convertDataFormat`Private`typeOut"}], ",", 
                    RowBox[{
                    "Return", "[", 
                    "FunctionRepo`convertDataFormat`Private`data", "]"}]}], 
                    "]"}], ";", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", "=", 
                    RowBox[{"Developer`ToPackedArray", "/@", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`\
convertToRuleOfLists", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`data", ",", 
                    "FunctionRepo`convertDataFormat`Private`typeIn"}], 
                    "]"}]}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"UnsameQ", "@@", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`convertDataFormat`Private`dataOut"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"convertDataFormat", "::", "uneqLen"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`typeOut", ",", 
                    RowBox[{"\<\"Matrix\"\>", "|", "\<\"Vector\"\>"}]}], 
                    "]"}], "&&", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", ",", 
                    RowBox[{"_", "\[Rule]", 
                    RowBox[{"_", "?", "MatrixQ"}]}]}], "]"}], "&&", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", 
                    "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", ">", "1"}], "&"}], ")"}]}]}], "}"}]}], 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"convertDataFormat", "::", "outDim"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", "=", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`\
convertToTargetType", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", ",", 
                    "FunctionRepo`convertDataFormat`Private`typeOut"}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`dataOut", ",", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`$dataTypes", "[", 
                    "FunctionRepo`convertDataFormat`Private`typeOut", "]"}]}],
                     "]"}], ",", 
                    "FunctionRepo`convertDataFormat`Private`dataOut", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"convertDataFormat", "::", "convertFail"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`convertDataFormat`Private`typeIn", ",", 
                    "FunctionRepo`convertDataFormat`Private`typeOut"}], "]"}],
                     ";", "$Failed"}]}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    "StringQ", "[", 
                    "FunctionRepo`convertDataFormat`Private`typeIn", 
                    "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    "_", ",", "FunctionRepo`convertDataFormat`Private`out_"}],
                     "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"convertDataFormat", "::", "notImplemented"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`convertDataFormat`Private`out"}], "]"}], 
                    ";", "$Failed"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "convertDataFormat", "[", 
                    "FunctionRepo`convertDataFormat`Private`type_String", 
                    "]"}], "[", 
                    "FunctionRepo`convertDataFormat`Private`data_", "]"}], ":=", 
                    RowBox[{"convertDataFormat", "[", 
                    RowBox[{
                    "FunctionRepo`convertDataFormat`Private`data", ",", 
                    "FunctionRepo`convertDataFormat`Private`type"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`convertDataFormat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"convertDataFormat[data, type] attempts to convert \
machine learning data to a different format to make it easier to switch out \
fitting methods.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "convertDataFormat[data, type] attempts to convert machine learning data \
to a different format to make it easier to switch out fitting methods.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`convertDataFormat, {
      FunctionRepo`convertDataFormat[
         PatternTest[
          Blank[], FunctionRepo`convertDataFormat`Private`emptyDataQ], 
         Alternatives["Matrix", "Vector", "ListOfRules"]] :> {}, 
       FunctionRepo`convertDataFormat[
         PatternTest[
          Blank[], FunctionRepo`convertDataFormat`Private`emptyDataQ], 
         "RuleOfLists"] :> ({} -> {}), FunctionRepo`convertDataFormat[
         PatternTest[
          Blank[], FunctionRepo`convertDataFormat`Private`emptyDataQ], 
         "Assocation"] :> Association["Input" -> {}, "Output" -> {}], 
       Condition[
         FunctionRepo`convertDataFormat[
          Pattern[FunctionRepo`convertDataFormat`Private`data, 
           Blank[]], 
          Pattern[FunctionRepo`convertDataFormat`Private`typeOut, 
           Blank[String]]], 
         MemberQ[
          Keys[FunctionRepo`convertDataFormat`Private`$dataTypes], 
          FunctionRepo`convertDataFormat`Private`typeOut]] :> 
       Module[{FunctionRepo`convertDataFormat`Private`typeIn = Catch[
            KeyValueMap[If[
              MatchQ[FunctionRepo`convertDataFormat`Private`data, #2], 
              Throw[#]]& , 
             FunctionRepo`convertDataFormat`Private`$dataTypes]], 
          FunctionRepo`convertDataFormat`Private`dataOut}, 
         Condition[
         If[FunctionRepo`convertDataFormat`Private`typeIn === 
            FunctionRepo`convertDataFormat`Private`typeOut, 
            Return[FunctionRepo`convertDataFormat`Private`data]]; 
          FunctionRepo`convertDataFormat`Private`dataOut = 
           Map[Developer`ToPackedArray, 
             FunctionRepo`convertDataFormat`Private`convertToRuleOfLists[
             FunctionRepo`convertDataFormat`Private`data, 
              FunctionRepo`convertDataFormat`Private`typeIn]]; If[
            Apply[UnsameQ, 
             Map[Length, FunctionRepo`convertDataFormat`Private`dataOut]], 
            Message[
              MessageName[FunctionRepo`convertDataFormat, "uneqLen"]]; 
            Return[$Failed]]; If[
            And[
             MatchQ[FunctionRepo`convertDataFormat`Private`typeOut, 
              Alternatives["Matrix", "Vector"]], 
             MatchQ[
             FunctionRepo`convertDataFormat`Private`dataOut, Blank[] -> 
              PatternTest[
                Blank[], MatrixQ]], 
             MatchQ[
              Dimensions[
               Part[FunctionRepo`convertDataFormat`Private`dataOut, 2]], {
               Blank[], 
               PatternTest[
                Blank[], # > 1& ]}]], Message[
              MessageName[FunctionRepo`convertDataFormat, "outDim"]]; 
            Return[$Failed]]; 
          FunctionRepo`convertDataFormat`Private`dataOut = 
           FunctionRepo`convertDataFormat`Private`convertToTargetType[
            FunctionRepo`convertDataFormat`Private`dataOut, 
             FunctionRepo`convertDataFormat`Private`typeOut]; If[
            MatchQ[FunctionRepo`convertDataFormat`Private`dataOut, 
             FunctionRepo`convertDataFormat`Private`$dataTypes[
             FunctionRepo`convertDataFormat`Private`typeOut]], 
            FunctionRepo`convertDataFormat`Private`dataOut, Message[
              MessageName[FunctionRepo`convertDataFormat, "convertFail"], 
              FunctionRepo`convertDataFormat`Private`typeIn, 
              FunctionRepo`convertDataFormat`Private`typeOut]; $Failed], 
          StringQ[FunctionRepo`convertDataFormat`Private`typeIn]]], 
       FunctionRepo`convertDataFormat[
         Blank[], 
         Pattern[FunctionRepo`convertDataFormat`Private`out, 
          Blank[]]] :> (Message[
          MessageName[FunctionRepo`convertDataFormat, "notImplemented"], 
          FunctionRepo`convertDataFormat`Private`out]; $Failed)}], 
    "SubValues" -> 
    Information`InformationValueForm[
     SubValues, FunctionRepo`convertDataFormat, {
      FunctionRepo`convertDataFormat[
         Pattern[FunctionRepo`convertDataFormat`Private`type, 
          Blank[String]]][
         Pattern[FunctionRepo`convertDataFormat`Private`data, 
          Blank[]]] :> 
       FunctionRepo`convertDataFormat[
        FunctionRepo`convertDataFormat`Private`data, 
         FunctionRepo`convertDataFormat`Private`type]}], "DefaultValues" -> 
    None, "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "FunctionRepo`convertDataFormat"], 
   False]]], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"a0d9bbdb-8c89-4397-bbdc-38b7ef1f08db"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["crossValidateModel", \
"Subsection",ExpressionUUID->"e35e1810-89ab-4aef-9e34-ee0d65c9d9ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "crossValidateModel"}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"98de2084-dd51-4c5b-be4b-75e6154c6586"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"crossValidateModel[data, fitFunction] repeatedly \
splits the data into training/validation subsets; then fits a model using \
fitFunction on the training set and validates the result with the validation \
set.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data_", ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dist_", "?", 
                    "DistributionParameterQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data", ",", 
                    RowBox[{
                    RowBox[{"EstimatedDistribution", "[", 
                    RowBox[{
                    "#1", ",", 
                    "FunctionRepo`crossValidateModel`Private`dist"}], "]"}], 
                    "&"}], ",", 
                    "FunctionRepo`crossValidateModel`Private`opts"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data_", ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dists_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ListQ", "[", "#1", "]"}], "||", 
                    RowBox[{"AssociationQ", "[", "#1", "]"}]}], "&"}], 
                    ")"}]}], "/;", 
                    RowBox[{"AllTrue", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dists", ",", 
                    "DistributionParameterQ"}], "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data", ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`crossValidateModel`Private`dists", "]"}], 
                    ",", "Map", ",", "AssociationMap"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dist", ",", 
                    RowBox[{
                    RowBox[{"EstimatedDistribution", "[", 
                    RowBox[{
                    "#1", ",", 
                    "FunctionRepo`crossValidateModel`Private`dist"}], "]"}], 
                    "&"}]}], "]"}], ",", 
                    "FunctionRepo`crossValidateModel`Private`dists"}], "]"}], 
                    ",", "FunctionRepo`crossValidateModel`Private`opts"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"crossValidateModel", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data", ":", 
                    RowBox[{"_List", "|", "_Rule", "|", 
                    RowBox[{"_", "?", "AssociationQ"}]}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`trainingFun", 
                    ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`method", ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`nDat", "=", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`dataSize", "[", 
                    "FunctionRepo`crossValidateModel`Private`data", "]"}]}], 
                    ",", "FunctionRepo`crossValidateModel`Private`rules", ",",
                     "FunctionRepo`crossValidateModel`Private`methodFun", ",",
                     "FunctionRepo`crossValidateModel`Private`\
validationFunction"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`method", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"OptionValue", "[", "Method", "]"}], "}"}], "]"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"LeaveOneOut\"\>", ",", 
                    "FunctionRepo`crossValidateModel`Private`rest___"}], 
                    "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"\<\"KFold\"\>", ",", 
                    
                    RowBox[{"\<\"Folds\"\>", "\[Rule]", 
                    "FunctionRepo`crossValidateModel`Private`nDat"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`crossValidateModel`Private`rest", 
                    "}"}], ",", 
                    RowBox[{"Except", "[", "\<\"Folds\"\>", "]"}]}], 
                    "]"}]}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"BootStrap\"\>", ",", 
                    "FunctionRepo`crossValidateModel`Private`rest___"}], 
                    "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"\<\"RandomSubSampling\"\>", ",", 
                    RowBox[{"\<\"SamplingFunction\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\<\"BootStrap\"\>", ",", 
                    RowBox[{"Lookup", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`crossValidateModel`Private`rest", 
                    "}"}], ",", "\<\"BootStrapSize\"\>", ",", 
                    "FunctionRepo`crossValidateModel`Private`nDat"}], "]"}]}],
                     "}"}]}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`crossValidateModel`Private`rest", 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"Runs\"\>", ",", "\<\"ParallelQ\"\>"}], 
                    "}"}]}], "]"}]}]}], "}"}]}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`rules", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{
                    "Rest", "[", 
                    "FunctionRepo`crossValidateModel`Private`method", "]"}], 
                    ",", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`crossValidateModel`Private`opts", 
                    "}"}], ",", 
                    RowBox[{"{", "\<\"ParallelQ\"\>", "}"}]}], "]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`methodFun", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    "First", "[", 
                    "FunctionRepo`crossValidateModel`Private`method", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"\<\"KFold\"\>", "\[RuleDelayed]", 
                    "FunctionRepo`crossValidateModel`Private`kFoldValidation"}\
], ",", 
                    
                    RowBox[{"\<\"RandomSubSampling\"\>", "\[RuleDelayed]", 
                    "FunctionRepo`crossValidateModel`Private`\
subSamplingValidation"}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`other_", 
                    "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"crossValidateModel", "::", "unknownMethod"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`crossValidateModel`Private`other"}], "]"}], 
                    ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}], ")"}]}]}], 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    "OptionValue", "[", "\<\"ValidationFunction\"\>", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`assoc_", "?", 
                    "AssociationQ"}], "\[RuleDelayed]", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
parseValidationOption", "/@", 
                    "FunctionRepo`crossValidateModel`Private`assoc"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`other_", 
                    "\[RuleDelayed]", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
parseValidationOption", "[", "FunctionRepo`crossValidateModel`Private`other", 
                    "]"}]}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`crossValidateModel`Private`trainingFun", 
                    "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{
                    "AssociationQ", "[", 
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "&"}], ")"}], "/@", 
                    "FunctionRepo`crossValidateModel`Private`trainingFun"}]}],
                     ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", "=", 
                    RowBox[{"AssociationThread", "[", 
                    RowBox[{
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`crossValidateModel`Private`trainingFun", 
                    "]"}], ",", 
                    RowBox[{"Lookup", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
validationFunction", ",", 
                    RowBox[{
                    "Keys", "[", 
                    "FunctionRepo`crossValidateModel`Private`trainingFun", 
                    "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`\
defaultValidationFunction", "[", "]"}]}], "]"}]}], "]"}]}]}], "]"}]}], "]"}], 
                    ";", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`methodFun", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`data", ",", 
                    "FunctionRepo`crossValidateModel`Private`nDat", ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`quietReporting", 
                    "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`listOperator1", 
                    "[", "FunctionRepo`crossValidateModel`Private`\
trainingFun", "]"}], "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`listOperator2", 
                    "[", "FunctionRepo`crossValidateModel`Private`\
validationFunction", "]"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    "FunctionRepo`crossValidateModel`Private`rules", ",", 
                    RowBox[{
                    "Options", "[", 
                    "FunctionRepo`crossValidateModel`Private`methodFun", 
                    "]"}]}], "]"}]}]}], "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Method", "\[Rule]", "\<\"KFold\"\>"}], ",", 
                    
                    RowBox[{"\<\"ValidationFunction\"\>", "\[Rule]", 
                    "Automatic"}], ",", 
                    RowBox[{"\<\"ParallelQ\"\>", "\[Rule]", "False"}]}], 
                    "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`crossValidateModel\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"crossValidateModel[data, fitFunction] repeatedly \
splits the data into training/validation subsets; then fits a model using \
fitFunction on the training set and validates the result with the validation \
set.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "crossValidateModel[data, fitFunction] repeatedly splits the data into \
training/validation subsets; then fits a model using fitFunction on the \
training set and validates the result with the validation set.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`crossValidateModel, {
      FunctionRepo`crossValidateModel[
         Pattern[FunctionRepo`crossValidateModel`Private`data, 
          Blank[]], 
         PatternTest[
          Pattern[FunctionRepo`crossValidateModel`Private`dist, 
           Blank[]], DistributionParameterQ], 
         Pattern[FunctionRepo`crossValidateModel`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`crossValidateModel[
        FunctionRepo`crossValidateModel`Private`data, 
         EstimatedDistribution[#, 
          FunctionRepo`crossValidateModel`Private`dist]& , 
         FunctionRepo`crossValidateModel`Private`opts], 
       FunctionRepo`crossValidateModel[
         Pattern[FunctionRepo`crossValidateModel`Private`data, 
          Blank[]], 
         Condition[
          PatternTest[
           Pattern[FunctionRepo`crossValidateModel`Private`dists, 
            Blank[]], Or[
            ListQ[#], 
            AssociationQ[#]]& ], 
          AllTrue[
          FunctionRepo`crossValidateModel`Private`dists, 
           DistributionParameterQ]], 
         Pattern[FunctionRepo`crossValidateModel`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`crossValidateModel[
        FunctionRepo`crossValidateModel`Private`data, 
         If[
          AssociationQ[FunctionRepo`crossValidateModel`Private`dists], Map, 
          AssociationMap][
          Function[
          FunctionRepo`crossValidateModel`Private`dist, 
           EstimatedDistribution[#, 
            FunctionRepo`crossValidateModel`Private`dist]& ], 
          FunctionRepo`crossValidateModel`Private`dists], 
         FunctionRepo`crossValidateModel`Private`opts], 
       FunctionRepo`crossValidateModel[
         Pattern[FunctionRepo`crossValidateModel`Private`data, 
          Alternatives[
           Blank[List], 
           Blank[Rule], 
           PatternTest[
            Blank[], AssociationQ]]], 
         Pattern[FunctionRepo`crossValidateModel`Private`trainingFun, 
          Except[
           Blank[List]]], 
         Pattern[FunctionRepo`crossValidateModel`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`crossValidateModel`Private`method, 
          FunctionRepo`crossValidateModel`Private`nDat = 
          FunctionRepo`crossValidateModel`Private`dataSize[
           FunctionRepo`crossValidateModel`Private`data], 
          FunctionRepo`crossValidateModel`Private`rules, 
          FunctionRepo`crossValidateModel`Private`methodFun, 
          FunctionRepo`crossValidateModel`Private`validationFunction}, 
         FunctionRepo`crossValidateModel`Private`method = Replace[
            Flatten[{
              OptionValue[Method]}], {{"LeaveOneOut", 
               Pattern[FunctionRepo`crossValidateModel`Private`rest, 
                BlankNullSequence[]]} :> {
              "KFold", "Folds" -> 
               FunctionRepo`crossValidateModel`Private`nDat, 
               Apply[Sequence, 
                FilterRules[{FunctionRepo`crossValidateModel`Private`rest}, 
                 Except["Folds"]]]}, {"BootStrap", 
               Pattern[FunctionRepo`crossValidateModel`Private`rest, 
                BlankNullSequence[]]} :> {
              "RandomSubSampling", "SamplingFunction" -> {"BootStrap", 
                 
                 Lookup[{FunctionRepo`crossValidateModel`Private`rest}, 
                  "BootStrapSize", 
                  FunctionRepo`crossValidateModel`Private`nDat]}, 
               Apply[Sequence, 
                
                FilterRules[{FunctionRepo`crossValidateModel`Private`rest}, {
                 "Runs", "ParallelQ"}]]}}]; 
         FunctionRepo`crossValidateModel`Private`rules = Join[
            Rest[FunctionRepo`crossValidateModel`Private`method], 
            
            FilterRules[{FunctionRepo`crossValidateModel`Private`opts}, {
             "ParallelQ"}]]; 
         FunctionRepo`crossValidateModel`Private`methodFun = Replace[
            First[FunctionRepo`crossValidateModel`Private`method], {
            "KFold" :> 
             FunctionRepo`crossValidateModel`Private`kFoldValidation, 
             "RandomSubSampling" :> 
             FunctionRepo`crossValidateModel`Private`subSamplingValidation, 
             Pattern[FunctionRepo`crossValidateModel`Private`other, 
               Blank[]] :> (Message[
                MessageName[FunctionRepo`crossValidateModel, "unknownMethod"],
                 FunctionRepo`crossValidateModel`Private`other]; 
              Return[$Failed])}]; 
         FunctionRepo`crossValidateModel`Private`validationFunction = Replace[
            OptionValue["ValidationFunction"], {PatternTest[
               Pattern[FunctionRepo`crossValidateModel`Private`assoc, 
                Blank[]], AssociationQ] :> 
             Map[FunctionRepo`crossValidateModel`Private`\
parseValidationOption, FunctionRepo`crossValidateModel`Private`assoc], 
             Pattern[FunctionRepo`crossValidateModel`Private`other, 
               Blank[]] :> 
             FunctionRepo`crossValidateModel`Private`parseValidationOption[
              FunctionRepo`crossValidateModel`Private`other]}]; If[
           AssociationQ[FunctionRepo`crossValidateModel`Private`trainingFun], 
           If[
            Not[
             AssociationQ[
             FunctionRepo`crossValidateModel`Private`validationFunction]], 
            FunctionRepo`crossValidateModel`Private`validationFunction = 
            Map[FunctionRepo`crossValidateModel`Private`validationFunction& , 
              FunctionRepo`crossValidateModel`Private`trainingFun], 
            FunctionRepo`crossValidateModel`Private`validationFunction = 
            AssociationThread[
              Keys[FunctionRepo`crossValidateModel`Private`trainingFun], 
              Lookup[
              FunctionRepo`crossValidateModel`Private`validationFunction, 
               Keys[FunctionRepo`crossValidateModel`Private`trainingFun], 
               
               FunctionRepo`crossValidateModel`Private`\
defaultValidationFunction[]]]]]; 
         FunctionRepo`crossValidateModel`Private`methodFun[
          FunctionRepo`crossValidateModel`Private`data, 
           FunctionRepo`crossValidateModel`Private`nDat, 
           FunctionRepo`crossValidateModel`Private`quietReporting[
            FunctionRepo`crossValidateModel`Private`listOperator1[
            FunctionRepo`crossValidateModel`Private`trainingFun]], 
           FunctionRepo`crossValidateModel`Private`listOperator2[
           FunctionRepo`crossValidateModel`Private`validationFunction], 
           Apply[Sequence, 
            FilterRules[FunctionRepo`crossValidateModel`Private`rules, 
             Options[FunctionRepo`crossValidateModel`Private`methodFun]]]]]}],
     "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     Method -> "KFold", "ValidationFunction" -> Automatic, "ParallelQ" -> 
      False}, "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`crossValidateModel"], False]]], "Output",
 CellLabel->"Out[57]=",ExpressionUUID->"f5e1b2e4-8cd7-4112-9450-4c2f4cceb29f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"PoissonDistribution", "[", "2", "]"}], ",", "100"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Histogram", "[", 
  RowBox[{"data", ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.781610902284114*^9, 3.7816109277192287`*^9}, {
  3.781611173709198*^9, 3.781611180206622*^9}, {3.7816116711764913`*^9, 
  3.781611675183671*^9}, {3.7816117183975105`*^9, 3.781611728390929*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"8528c3aa-c63e-44f6-8859-92cd72a89101"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.644], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.644], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-0.5, 0}, {0.5, 11.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{26.19213370696558, 80.69921937550042}, {
           36.16909458644571, 122.80666073838327`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 11]& ,
        TagBoxNote->"11"],
       StyleBox["11", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[11, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.5, 0}, {1.5, 33.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{80.04921937550041, 
           134.55630504403524`}, {-135.80603771742938`, 122.80666073838326`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 33]& ,
        TagBoxNote->"33"],
       StyleBox["33", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[33, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{1.5, 0}, {2.5, 27.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{133.90630504403526`, 
           188.4133907125701}, {-88.90372890728165, 122.80666073838327`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 27]& ,
        TagBoxNote->"27"],
       StyleBox["27", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[27, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{2.5, 0}, {3.5, 14.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{187.76339071257007`, 242.27047638110497`}, {
           12.71794018137183, 122.80666073838327`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 14]& ,
        TagBoxNote->"14"],
       StyleBox["14", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[14, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{3.5, 0}, {4.5, 11.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{241.62047638110494`, 296.1275620496398}, {
           36.16909458644571, 122.80666073838327`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 11]& ,
        TagBoxNote->"11"],
       StyleBox["11", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[11, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{4.5, 0}, {5.5, 3.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{295.47756204963974`, 349.98464771817464`}, {
           98.70550633330939, 122.80666073838327`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{6.5, 0}, {7.5, 1.}, "RoundingRadius" -> 0]},
          ImageSizeCache->{{403.1917333867094, 457.69881905524426`}, {
           114.3396092700253, 122.80666073838327`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.66, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{-0.5, 7.5}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[59]=",ExpressionUUID->"c49933cf-851a-4942-8a52-ea8594a5cb0f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"val", "=", 
   RowBox[{"crossValidateModel", "[", 
    RowBox[{"data", ",", 
     RowBox[{"PoissonDistribution", "[", "\[Lambda]", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"val", "//", "TableForm"}]}], "Input",
 CellLabel->"In[60]:=",ExpressionUUID->"c7566495-73d8-4323-bcb1-fa905a691565"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"FittedModel\"\>", "\[Rule]", 
         RowBox[{"PoissonDistribution", "[", "1.9875`", "]"}]}], ",", 
        RowBox[{"\<\"ValidationResult\"\>", "\[Rule]", 
         "1.577064268974675`"}]}], "\[RightAssociation]"}]},
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"FittedModel\"\>", "\[Rule]", 
         RowBox[{"PoissonDistribution", "[", "1.7875`", "]"}]}], ",", 
        RowBox[{"\<\"ValidationResult\"\>", "\[Rule]", 
         "2.011551270422792`"}]}], "\[RightAssociation]"}]},
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"FittedModel\"\>", "\[Rule]", 
         RowBox[{"PoissonDistribution", "[", "1.9625`", "]"}]}], ",", 
        RowBox[{"\<\"ValidationResult\"\>", "\[Rule]", 
         "1.6146264694175652`"}]}], "\[RightAssociation]"}]},
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"FittedModel\"\>", "\[Rule]", 
         RowBox[{"PoissonDistribution", "[", "2.025`", "]"}]}], ",", 
        RowBox[{"\<\"ValidationResult\"\>", "\[Rule]", 
         "1.4964207601480601`"}]}], "\[RightAssociation]"}]},
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"FittedModel\"\>", "\[Rule]", 
         RowBox[{"PoissonDistribution", "[", "1.9875`", "]"}]}], ",", 
        RowBox[{"\<\"ValidationResult\"\>", "\[Rule]", 
         "1.7045365275209536`"}]}], "\[RightAssociation]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[61]//TableForm=",ExpressionUUID->"dae8d752-42df-479c-b756-0834db41405a"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["deleteContainedStrings", \
"Subsection",ExpressionUUID->"da8a948a-8e77-4887-90f5-94bf9f9dd812"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "deleteContainedStrings"}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"37e1ff57-ee62-4bff-ab0e-875919154b44"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"deleteContainedStrings[{str1, str2, ...}] deletes \
every string that is a substring of at least one other string in the list. \
Preserves ordering.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"deleteContainedStrings", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "___"}], "]"}], ":=", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{"deleteContainedStrings", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`deleteContainedStrings`Private`strings", 
                    ":", 
                    RowBox[{"{", "__String", "}"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`deleteContainedStrings`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`deleteContainedStrings`Private`sorted", "=", 
                    RowBox[{"ReverseSortBy", "[", 
                    RowBox[{
                    "FunctionRepo`deleteContainedStrings`Private`strings", 
                    ",", "StringLength"}], "]"}]}], "}"}], ",", 
                    RowBox[{"SortBy", "[", 
                    RowBox[{
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{
                    "FunctionRepo`deleteContainedStrings`Private`sorted", ",", 
                    RowBox[{
                    RowBox[{"StringContainsQ", "[", 
                    RowBox[{
                    "##1", ",", 
                    "FunctionRepo`deleteContainedStrings`Private`opts"}], 
                    "]"}], "&"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"FirstPosition", "[", 
                    RowBox[{
                    "FunctionRepo`deleteContainedStrings`Private`strings", 
                    ",", "#1", ",", 
                    RowBox[{"Missing", "[", "]"}], ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}], "&"}]}], 
                    "]"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IgnoreCase", "\[Rule]", "False"}], ",", 
                    RowBox[{"MetaCharacters", "\[Rule]", "None"}]}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`deleteContainedStrings\"\
\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"deleteContainedStrings[{str1, str2, ...}] deletes \
every string that is a substring of at least one other string in the list. \
Preserves ordering.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "deleteContainedStrings[{str1, str2, ...}] deletes every string that is a \
substring of at least one other string in the list. Preserves ordering.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`deleteContainedStrings, {
      FunctionRepo`deleteContainedStrings[{}, 
         BlankNullSequence[]] :> {}, FunctionRepo`deleteContainedStrings[
         Pattern[FunctionRepo`deleteContainedStrings`Private`strings, {
           BlankSequence[String]}], 
         Pattern[FunctionRepo`deleteContainedStrings`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`deleteContainedStrings`Private`sorted = 
          ReverseSortBy[
           FunctionRepo`deleteContainedStrings`Private`strings, 
            StringLength]}, 
         SortBy[
          DeleteDuplicates[
          FunctionRepo`deleteContainedStrings`Private`sorted, StringContainsQ[
            SlotSequence[1], 
            FunctionRepo`deleteContainedStrings`Private`opts]& ], 
          FirstPosition[
          FunctionRepo`deleteContainedStrings`Private`strings, #, 
           Missing[], {1}, Heads -> False]& ]]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {IgnoreCase -> False, MetaCharacters -> None}, 
    "Attributes" -> {}, "FullName" -> "FunctionRepo`deleteContainedStrings"], 
   False]]], "Output",
 CellLabel->"Out[62]=",ExpressionUUID->"f9c49e16-3f7a-4eb9-bf75-f1086dab4a62"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["firstMatchingValue", \
"Subsection",ExpressionUUID->"f0081c56-07a8-467c-89b8-c381ea514997"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "firstMatchingValue"}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"583296a0-bd1e-4d8a-ba59-9b25c158a6f4"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"firstMatchingValue[{expr_1, expr_2, ...}, pattern] \
evalutates held expr_i in turn, returning the value of the first expression \
that evaluates to a result matching the pattern.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`patt_", ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`opt", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr", ",", 
                    "FunctionRepo`firstMatchingValue`Private`patt", ",", 
                    RowBox[{"Missing", "[", "\<\"NotFound\"\>", "]"}], ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    "FunctionRepo`firstMatchingValue`Private`opt"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`patt_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`default_", ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`opt", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr", ",", 
                    "FunctionRepo`firstMatchingValue`Private`patt", ",", 
                    "FunctionRepo`firstMatchingValue`Private`default", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    "FunctionRepo`firstMatchingValue`Private`opt"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr_", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`head", ":", 
                    RowBox[{"Rule", "|", "RuleDelayed"}]}], ")"}], "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`patt_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`transformation_"}\
], "]"}], ",", "FunctionRepo`firstMatchingValue`Private`default_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`lvl_", ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`firstMatchingValue`Private`matched", 
                    "}"}], ",", 
                    RowBox[{"FirstCase", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", 
                    "FunctionRepo`firstMatchingValue`Private`expr", "]"}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`possibleMatch_", 
                    "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`try", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`matched", "=", 
                    "True"}], ";", 
                    "FunctionRepo`firstMatchingValue`Private`possibleMatch"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`head", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`patt", ",", 
                    "FunctionRepo`firstMatchingValue`Private`transformation"}]\
, "]"}], ",", 
                    RowBox[{"_", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`matched", "=", 
                    "False"}], ")"}]}]}], "}"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"FunctionRepo`firstMatchingValue`Private`try", "/;", 
                    RowBox[{
                    "TrueQ", "[", 
                    "FunctionRepo`firstMatchingValue`Private`matched", 
                    "]"}]}]}], "]"}]}], ",", 
                    "FunctionRepo`firstMatchingValue`Private`default", ",", 
                    "FunctionRepo`firstMatchingValue`Private`lvl", ",", 
                    "FunctionRepo`firstMatchingValue`Private`opts"}], "]"}]}],
                     "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"firstMatchingValue", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`expr_", ",", 
                    "FunctionRepo`firstMatchingValue`Private`otherPattern_", 
                    ",", "FunctionRepo`firstMatchingValue`Private`default_", 
                    ",", "FunctionRepo`firstMatchingValue`Private`lvl_", ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"FirstCase", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", 
                    "FunctionRepo`firstMatchingValue`Private`expr", "]"}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`possibleMatch_", 
                    "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`try", "=", 
                    "FunctionRepo`firstMatchingValue`Private`possibleMatch"}],
                     "}"}], ",", 
                    RowBox[{"FunctionRepo`firstMatchingValue`Private`try", "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`firstMatchingValue`Private`try", ",", 
                    "FunctionRepo`firstMatchingValue`Private`otherPattern"}], 
                    "]"}]}]}], "]"}]}], ",", 
                    "FunctionRepo`firstMatchingValue`Private`default", ",", 
                    "FunctionRepo`firstMatchingValue`Private`lvl", ",", 
                    "FunctionRepo`firstMatchingValue`Private`opts"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"Heads", "\[Rule]", "False"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "HoldAll", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`firstMatchingValue\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"firstMatchingValue[{expr_1, expr_2, ...}, pattern] \
evalutates held expr_i in turn, returning the value of the first expression \
that evaluates to a result matching the pattern.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "firstMatchingValue[{expr_1, expr_2, ...}, pattern] evalutates held \
expr_i in turn, returning the value of the first expression that evaluates to \
a result matching the pattern.", "Documentation" -> None, "OwnValues" -> None,
     "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`firstMatchingValue, {
      FunctionRepo`firstMatchingValue[
         Pattern[FunctionRepo`firstMatchingValue`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`patt, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`opt, 
          OptionsPattern[]]] :> 
       FunctionRepo`firstMatchingValue[
        FunctionRepo`firstMatchingValue`Private`expr, 
         FunctionRepo`firstMatchingValue`Private`patt, 
         Missing["NotFound"], {1}, 
         FunctionRepo`firstMatchingValue`Private`opt], 
       FunctionRepo`firstMatchingValue[
         Pattern[FunctionRepo`firstMatchingValue`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`patt, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`default, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`opt, 
          OptionsPattern[]]] :> 
       FunctionRepo`firstMatchingValue[
        FunctionRepo`firstMatchingValue`Private`expr, 
         FunctionRepo`firstMatchingValue`Private`patt, 
         FunctionRepo`firstMatchingValue`Private`default, {1}, 
         FunctionRepo`firstMatchingValue`Private`opt], 
       FunctionRepo`firstMatchingValue[
         Pattern[FunctionRepo`firstMatchingValue`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`head, 
          Alternatives[Rule, RuleDelayed]][
          Pattern[FunctionRepo`firstMatchingValue`Private`patt, 
           Blank[]], 
          Pattern[FunctionRepo`firstMatchingValue`Private`transformation, 
           Blank[]]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`default, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`lvl, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`firstMatchingValue`Private`matched}, 
         FirstCase[
          Unevaluated[FunctionRepo`firstMatchingValue`Private`expr], 
          Pattern[FunctionRepo`firstMatchingValue`Private`possibleMatch, 
            Blank[]] :> 
          With[{FunctionRepo`firstMatchingValue`Private`try = 
             Replace[FunctionRepo`firstMatchingValue`Private`matched = True; 
               FunctionRepo`firstMatchingValue`Private`possibleMatch, {
                FunctionRepo`firstMatchingValue`Private`head[
                FunctionRepo`firstMatchingValue`Private`patt, 
                 FunctionRepo`firstMatchingValue`Private`transformation], 
                Blank[] :> (FunctionRepo`firstMatchingValue`Private`matched = 
                 False)}]}, 
            Condition[FunctionRepo`firstMatchingValue`Private`try, 
             TrueQ[FunctionRepo`firstMatchingValue`Private`matched]]], 
          FunctionRepo`firstMatchingValue`Private`default, 
          FunctionRepo`firstMatchingValue`Private`lvl, 
          FunctionRepo`firstMatchingValue`Private`opts]], 
       FunctionRepo`firstMatchingValue[
         Pattern[FunctionRepo`firstMatchingValue`Private`expr, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`otherPattern, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`default, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`lvl, 
          Blank[]], 
         Pattern[FunctionRepo`firstMatchingValue`Private`opts, 
          OptionsPattern[]]] :> FirstCase[
         Unevaluated[FunctionRepo`firstMatchingValue`Private`expr], 
         Pattern[FunctionRepo`firstMatchingValue`Private`possibleMatch, 
           Blank[]] :> 
         With[{FunctionRepo`firstMatchingValue`Private`try = 
            FunctionRepo`firstMatchingValue`Private`possibleMatch}, 
           Condition[FunctionRepo`firstMatchingValue`Private`try, 
            MatchQ[
            FunctionRepo`firstMatchingValue`Private`try, 
             FunctionRepo`firstMatchingValue`Private`otherPattern]]], 
         FunctionRepo`firstMatchingValue`Private`default, 
         FunctionRepo`firstMatchingValue`Private`lvl, 
         FunctionRepo`firstMatchingValue`Private`opts]}], "SubValues" -> None,
     "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {Heads -> False}, "Attributes" -> {HoldAll}, "FullName" -> 
    "FunctionRepo`firstMatchingValue"], False]]], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"72386168-2f0f-485a-a101-4144340ae02d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"firstMatchingValue", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Print", "[", "\"\<before\>\"", "]"}], ",", "10", ",", 
     RowBox[{"Print", "[", "\"\<after\>\"", "]"}]}], "}"}], ",", "_Integer"}],
   "]"}]], "Input",
 CellLabel->"In[64]:=",ExpressionUUID->"f41e503d-739e-4e0b-af4a-51a8b40b9b1b"],

Cell[BoxData["\<\"before\"\>"], "Print",
 CellLabel->
  "During evaluation of \
In[64]:=",ExpressionUUID->"f134c028-5d30-480a-99dd-a64ab9ec99f6"],

Cell[BoxData["10"], "Output",
 CellLabel->"Out[64]=",ExpressionUUID->"7d55a529-1542-424d-992b-3f698afa1ac9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", "2"}], ";"}], "\n", 
 RowBox[{"{", 
  RowBox[{"x", ",", "\[IndentingNewLine]", 
   RowBox[{"firstMatchingValue", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "2", ",", 
       RowBox[{"++", "x"}], ",", 
       RowBox[{"1", "+", "3"}], ",", "5"}], "}"}], ",", 
     RowBox[{"_Integer", "?", "OddQ"}]}], "]"}], ",", "\[IndentingNewLine]", 
   "x"}], "}"}]}], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"29421cbc-f709-476c-b19c-f1a36aa67e57"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "3"}], "}"}]], "Output",
 CellLabel->"Out[66]=",ExpressionUUID->"20b08824-0298-4b26-ae98-1ff2732f3356"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["kullbackLeiblerDivergence", \
"Subsection",ExpressionUUID->"e2779f55-4ae5-4ebd-b5b6-3be2e30b7a6c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "kullbackLeiblerDivergence"}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"18686fd2-517c-4c38-b65b-acb472f6cf45"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"kullbackLeiblerDivergence[P, Q] computes the \
Kullback-Leibler divergence from distribution Q to P\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"kullbackLeiblerDivergence", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p_", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    "0"}]},
                    {
                    RowBox[{
                    RowBox[{"kullbackLeiblerDivergence", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p_", "?", 
                    "DistributionParameterQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q_", "?", 
                    "DistributionParameterQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`opts", 
                    ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"$Assumptions", "=", 
                    RowBox[{"OptionValue", "[", "Assumptions", "]"}]}], "}"}],
                     ",", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
methodSpec", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "Method", "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`sym", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], "\[RuleDelayed]", 
                    RowBox[{
                    "{", "FunctionRepo`kullbackLeiblerDivergence`Private`sym",
                     "}"}]}]}], "]"}]}], ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`\
methodOpts", ",", "FunctionRepo`kullbackLeiblerDivergence`Private`domainp", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`\
domainq", ",", "FunctionRepo`kullbackLeiblerDivergence`Private`assumptions", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`rv", 
                    ",", "x"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q"}], 
                    "}"}], ",", "\[FormalX]"}], "]"}], ",", 
                    RowBox[{"x", "=", "\[FormalX]"}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`\
methodOpts"}], "}"}], "=", 
                    RowBox[{"TakeDrop", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
methodSpec", ",", "1"}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method", 
                    "=", 
                    RowBox[{
                    "First", "[", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method", 
                    "]"}]}], ";", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method", 
                    ",", "\[IndentingNewLine]", "Expectation", ",", "Null", 
                    ",", "\[IndentingNewLine]", "NExpectation", ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`rand", 
                    "=", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"RandomVariate", "[", 
                    RowBox[{"#1", ",", "5"}], "]"}], "&"}], ")"}], "/@", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q"}], 
                    "}"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"AllTrue", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`rand", 
                    ",", "ArrayQ"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    "kullbackLeiblerDivergence", "::", "randomSample"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q"}], 
                    "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}]}], 
                    "]"}], ",", "\[IndentingNewLine]", "_", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"kullbackLeiblerDivergence", "::", "method"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method"}],
                     "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`domainp", 
                    "=", 
                    RowBox[{
                    "DistributionDomain", "[", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", 
                    "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`domainq", 
                    "=", 
                    RowBox[{
                    "DistributionDomain", "[", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q", 
                    "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
assumptions", "=", 
                    RowBox[{"And", "@@", 
                    RowBox[{"DistributionParameterAssumptions", "/@", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q"}], 
                    "}"}]}]}]}], ";", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"Assuming", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
assumptions", ",", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
supportSubSetQ", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`domainp", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`\
domainq"}], "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", "True", ",", 
                    "Null", ",", "\[IndentingNewLine]", "False", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"kullbackLeiblerDivergence", "::", "supportPQ"}], 
                    "MessageName"], ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q"}], 
                    "]"}], ";", 
                    RowBox[{"Return", "[", "Undefined", "]"}]}], ",", 
                    "\[IndentingNewLine]", "_", ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    "kullbackLeiblerDivergence", "::", 
                    "supportValidationFail"}], "MessageName"], ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q"}], 
                    "]"}]}], "]"}], ";", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`rv", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`domainp", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`l", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
domainPattern", ".."}], "}"}]}], "\[RuleDelayed]", 
                    RowBox[{"Array", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`l", 
                    "]"}]}], "]"}]}], ",", 
                    RowBox[{"_", "\[Rule]", "x"}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
assumptions", "=", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
assumptions", "&&", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Statistics`Library`RealIntegerQ", "=", 
                    RowBox[{
                    RowBox[{"#1", "\[Element]", 
                    TemplateBox[{},
                    "Integers"]}], "&"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "ListQ", "[", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`rv", 
                    "]"}], ",", 
                    RowBox[{"And", "@@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    "Statistics`DistributionsCommonDump`DomainMemberQ", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`domainp", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`rv"}]\
, "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    "Statistics`DistributionsCommonDump`DomainMemberQ", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`domainp", 
                    ",", "FunctionRepo`kullbackLeiblerDivergence`Private`rv"}]\
, "]"}]}], "]"}]}], "]"}]}], "]"}]}], ";", 
                    RowBox[{"Assuming", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
assumptions", ",", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`method", 
                    "[", 
                    RowBox[{
                    RowBox[{"Refine", "[", 
                    RowBox[{
                    RowBox[{"LogLikelihood", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p", ",", 
                    RowBox[{
                    "{", "FunctionRepo`kullbackLeiblerDivergence`Private`rv", 
                    "}"}]}], "]"}], "-", 
                    RowBox[{"LogLikelihood", "[", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`q", ",", 
                    RowBox[{
                    "{", "FunctionRepo`kullbackLeiblerDivergence`Private`rv", 
                    "}"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{
                    "FunctionRepo`kullbackLeiblerDivergence`Private`rv", 
                    "\[Distributed]", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`p"}], ",", 
                    RowBox[{
                    "Sequence", "@@", 
                    "FunctionRepo`kullbackLeiblerDivergence`Private`\
methodOpts"}]}], "]"}], ",", 
                    RowBox[{"TimeConstraint", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "10"}], "}"}]}]}], "]"}]}], "]"}]}]}], 
                    "]"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Method", "\[Rule]", "Expectation"}], ",", 
                    RowBox[{
                    "Assumptions", "\[RuleDelayed]", "$Assumptions"}]}], 
                    "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"FunctionRepo`kullbackLeiblerDivergence\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"kullbackLeiblerDivergence[P, Q] computes the \
Kullback-Leibler divergence from distribution Q to P\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "kullbackLeiblerDivergence[P, Q] computes the Kullback-Leibler divergence \
from distribution Q to P", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`kullbackLeiblerDivergence, {
      FunctionRepo`kullbackLeiblerDivergence[
         Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`p, 
          Blank[]], 
         Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`p, 
          Blank[]], 
         OptionsPattern[]] :> 0, FunctionRepo`kullbackLeiblerDivergence[
         PatternTest[
          Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`p, 
           Blank[]], DistributionParameterQ], 
         PatternTest[
          Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`q, 
           Blank[]], DistributionParameterQ], 
         Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`opts, 
          OptionsPattern[]]] :> 
       Block[{$Assumptions = OptionValue[Assumptions]}, 
         Module[{
          FunctionRepo`kullbackLeiblerDivergence`Private`methodSpec = Replace[
             OptionValue[Method], 
             Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`sym, 
               Except[
                Blank[List]]] :> {
              FunctionRepo`kullbackLeiblerDivergence`Private`sym}], 
           FunctionRepo`kullbackLeiblerDivergence`Private`method, 
           FunctionRepo`kullbackLeiblerDivergence`Private`methodOpts, 
           FunctionRepo`kullbackLeiblerDivergence`Private`domainp, 
           FunctionRepo`kullbackLeiblerDivergence`Private`domainq, 
           FunctionRepo`kullbackLeiblerDivergence`Private`assumptions, 
           FunctionRepo`kullbackLeiblerDivergence`Private`rv, $CellContext`x},
           If[
            
            FreeQ[{FunctionRepo`kullbackLeiblerDivergence`Private`p, 
              FunctionRepo`kullbackLeiblerDivergence`Private`q}, \[FormalX]], \
$CellContext`x = \[FormalX]]; {
            FunctionRepo`kullbackLeiblerDivergence`Private`method, 
             FunctionRepo`kullbackLeiblerDivergence`Private`methodOpts} = 
           TakeDrop[
            FunctionRepo`kullbackLeiblerDivergence`Private`methodSpec, 1]; 
          FunctionRepo`kullbackLeiblerDivergence`Private`method = 
           First[FunctionRepo`kullbackLeiblerDivergence`Private`method]; 
          Switch[FunctionRepo`kullbackLeiblerDivergence`Private`method, 
            Expectation, Null, NExpectation, 
            With[{FunctionRepo`kullbackLeiblerDivergence`Private`rand = Quiet[
                Map[
                RandomVariate[#, 5]& , {
                 FunctionRepo`kullbackLeiblerDivergence`Private`p, 
                  FunctionRepo`kullbackLeiblerDivergence`Private`q}]]}, 
             If[
              Not[
               AllTrue[
               FunctionRepo`kullbackLeiblerDivergence`Private`rand, ArrayQ]], 
              Message[
                MessageName[
                FunctionRepo`kullbackLeiblerDivergence, "randomSample"], 
                FunctionRepo`kullbackLeiblerDivergence`Private`p, 
                FunctionRepo`kullbackLeiblerDivergence`Private`q]; 
              Return[$Failed]]], 
            Blank[], Message[
              MessageName[FunctionRepo`kullbackLeiblerDivergence, "method"], 
              FunctionRepo`kullbackLeiblerDivergence`Private`method]; 
            Return[$Failed]]; 
          FunctionRepo`kullbackLeiblerDivergence`Private`domainp = 
           DistributionDomain[
            FunctionRepo`kullbackLeiblerDivergence`Private`p]; 
          FunctionRepo`kullbackLeiblerDivergence`Private`domainq = 
           DistributionDomain[
            FunctionRepo`kullbackLeiblerDivergence`Private`q]; 
          FunctionRepo`kullbackLeiblerDivergence`Private`assumptions = 
           Apply[And, 
             Map[
             DistributionParameterAssumptions, {
              FunctionRepo`kullbackLeiblerDivergence`Private`p, 
               FunctionRepo`kullbackLeiblerDivergence`Private`q}]]; Switch[
            Assuming[
            FunctionRepo`kullbackLeiblerDivergence`Private`assumptions, 
             Simplify[
              FunctionRepo`kullbackLeiblerDivergence`Private`supportSubSetQ[
              FunctionRepo`kullbackLeiblerDivergence`Private`domainp, 
               FunctionRepo`kullbackLeiblerDivergence`Private`domainq]]], 
            True, Null, False, Message[
              MessageName[
              FunctionRepo`kullbackLeiblerDivergence, "supportPQ"], 
              FunctionRepo`kullbackLeiblerDivergence`Private`p, 
              FunctionRepo`kullbackLeiblerDivergence`Private`q]; 
            Return[Undefined], 
            Blank[], 
            Message[
             MessageName[
             FunctionRepo`kullbackLeiblerDivergence, "supportValidationFail"],
              FunctionRepo`kullbackLeiblerDivergence`Private`p, 
             FunctionRepo`kullbackLeiblerDivergence`Private`q]]; 
          FunctionRepo`kullbackLeiblerDivergence`Private`rv = 
           Replace[FunctionRepo`kullbackLeiblerDivergence`Private`domainp, {
             Pattern[FunctionRepo`kullbackLeiblerDivergence`Private`l, {
                 Repeated[
                 FunctionRepo`kullbackLeiblerDivergence`Private`domainPattern]\
}] :> Array[$CellContext`x, 
                Length[FunctionRepo`kullbackLeiblerDivergence`Private`l]], 
              Blank[] -> $CellContext`x}]; 
          FunctionRepo`kullbackLeiblerDivergence`Private`assumptions = 
           Simplify[
             And[FunctionRepo`kullbackLeiblerDivergence`Private`assumptions, 
              
              Block[{Statistics`Library`RealIntegerQ = 
                Element[#, Integers]& }, 
               If[
                ListQ[FunctionRepo`kullbackLeiblerDivergence`Private`rv], 
                Apply[And, 
                 MapThread[
                 Statistics`DistributionsCommonDump`DomainMemberQ, {
                  FunctionRepo`kullbackLeiblerDivergence`Private`domainp, 
                   FunctionRepo`kullbackLeiblerDivergence`Private`rv}]], 
                Statistics`DistributionsCommonDump`DomainMemberQ[
                FunctionRepo`kullbackLeiblerDivergence`Private`domainp, 
                 FunctionRepo`kullbackLeiblerDivergence`Private`rv]]]]]; 
          Assuming[FunctionRepo`kullbackLeiblerDivergence`Private`assumptions, 
            Simplify[
             FunctionRepo`kullbackLeiblerDivergence`Private`method[
              Refine[
              LogLikelihood[
                FunctionRepo`kullbackLeiblerDivergence`Private`p, {
                 FunctionRepo`kullbackLeiblerDivergence`Private`rv}] - 
               LogLikelihood[
               FunctionRepo`kullbackLeiblerDivergence`Private`q, {
                FunctionRepo`kullbackLeiblerDivergence`Private`rv}]], 
              Distributed[
              FunctionRepo`kullbackLeiblerDivergence`Private`rv, 
               FunctionRepo`kullbackLeiblerDivergence`Private`p], 
              Apply[
              Sequence, 
               FunctionRepo`kullbackLeiblerDivergence`Private`methodOpts]], 
             TimeConstraint -> {2, 10}]]]]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {Method -> Expectation, Assumptions :> $Assumptions}, 
    "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`kullbackLeiblerDivergence"], False]]], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"fce4a863-689b-4005-bc24-faba279337b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"kullbackLeiblerDivergence", "[", 
  RowBox[{
   RowBox[{"BinormalDistribution", "[", "\[Rho]1", "]"}], ",", 
   RowBox[{"BinormalDistribution", "[", "\[Rho]2", "]"}]}], "]"}]], "Input",
 CellLabel->"In[68]:=",ExpressionUUID->"5ec8fba7-2cf3-462f-ac44-3aa8b53c644c"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"2", " ", "\[Rho]1", " ", "\[Rho]2"}], "-", 
   RowBox[{"2", " ", 
    SuperscriptBox["\[Rho]2", "2"]}], "-", 
   RowBox[{
    SuperscriptBox["\[Rho]2", "2"], " ", 
    RowBox[{"Log", "[", 
     RowBox[{"1", "-", 
      SuperscriptBox["\[Rho]1", "2"]}], "]"}]}], "+", 
   RowBox[{
    SuperscriptBox["\[Rho]2", "2"], " ", 
    RowBox[{"Log", "[", 
     RowBox[{"1", "-", 
      SuperscriptBox["\[Rho]2", "2"]}], "]"}]}], "+", 
   RowBox[{"Log", "[", 
    FractionBox[
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      SuperscriptBox["\[Rho]1", "2"]}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      SuperscriptBox["\[Rho]2", "2"]}]], "]"}]}], 
  RowBox[{"2", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox["\[Rho]2", "2"]}], ")"}]}]]], "Output",
 CellLabel->"Out[68]=",ExpressionUUID->"ad4fdc61-2cca-4607-81b7-1d9034879309"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"kullbackLeiblerDivergence", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"EmpiricalDistribution", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<b\>\""}], "}"}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"EmpiricalDistribution", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], 
    "]"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->"In[69]:=",ExpressionUUID->"bca30795-b9dc-4999-ac8a-93a48394a5fe"],

Cell[BoxData[
 FractionBox[
  RowBox[{"2", " ", 
   RowBox[{"Log", "[", "2", "]"}]}], "3"]], "Output",
 CellLabel->"Out[69]=",ExpressionUUID->"c8e42858-38f1-48d8-ba86-d8a1049d0e05"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"kullbackLeiblerDivergence", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"BernoulliDistribution", "[", "p", "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"EmpiricalDistribution", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}], "]"}]}], "\[IndentingNewLine]",
   "]"}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"200811e0-9976-442e-8d63-800751e9f445"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "p"}], ")"}]}], " ", 
   RowBox[{"Log", "[", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["3", "2"]}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "p"}], ")"}]}], "]"}]}], "+", 
  RowBox[{"p", " ", 
   RowBox[{"Log", "[", 
    RowBox[{"3", " ", "p"}], "]"}]}]}]], "Output",
 CellLabel->"Out[70]=",ExpressionUUID->"a0855585-d02b-4b7c-9174-3537e70310f1"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["maximumSpacingEstimation", \
"Subsection",ExpressionUUID->"e7f25d6e-d412-498b-92a0-f28a46aa5a37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "maximumSpacingEstimation"}]], "Input",
 CellLabel->"In[71]:=",ExpressionUUID->"5dc8f8f8-a1f2-4148-9fe6-38ff79eeffe3"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"maximumSpacingEstimation[data, dist] fits dist to \
data using the maximum spacing estimation method.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"maximumSpacingEstimation", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`data_", 
                    "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"VectorQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    ",", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`dist_", 
                    "?", "Statistics`Library`UnivariateDistributionQ"}], ",", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`expr", "=", 
                    RowBox[{"Inactivate", "[", 
                    RowBox[{
                    RowBox[{"Mean", "[", 
                    RowBox[{"Log", "[", 
                    RowBox[{"Differences", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"CDF", "[", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`dist", ",", 
                    RowBox[{
                    "Sort", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`data", 
                    "]"}]}], "]"}], ",", "1"}], "}"}], "]"}], "]"}], "]"}], 
                    "]"}], ",", 
                    RowBox[{"Except", "[", "Sort", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`cons", "=", 
                    RowBox[{
                    "DistributionParameterAssumptions", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`dist", 
                    "]"}]}], ",", 
                    "FunctionRepo`maximumSpacingEstimation`Private`result"}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`result", 
                    "=", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Indeterminate", "=", 
                    RowBox[{"-", "Statistics`Library`MachineInfinity"}]}], 
                    "}"}], ",", 
                    RowBox[{"NMaximize", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`expr", ",", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`cons", "&&", 
                    RowBox[{"OptionValue", "[", "Assumptions", "]"}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{
                    "Statistics`Library`GetDistributionParameters", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`dist", 
                    "]"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`maximumSpacingEstimation`Private`opts",
                     "}"}], ",", 
                    RowBox[{"Options", "[", "NMaximize", "]"}]}], "]"}]}]}], 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`maximumSpacingEstimation`Private`result", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"{", "__Rule", "}"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"\<\"Distribution\"\>", "\[Rule]", 
                    "FunctionRepo`maximumSpacingEstimation`Private`dist"}], "/.",
                     "\[VeryThinSpace]", 
                    RowBox[{
                    "Last", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`result", 
                    "]"}]}], ",", 
                    RowBox[{"\<\"MaxSpacingEstimate\"\>", "\[Rule]", 
                    RowBox[{
                    "First", "[", 
                    "FunctionRepo`maximumSpacingEstimation`Private`result", 
                    "]"}]}]}], "]"}], ",", "$Failed"}], "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   PaneSelectorBox[{True->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    TemplateBox[{"\[ThickSpace]", "\"\[ThickSpace]\"", 
                    StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False], 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpener"]]},
                    "RowWithSeparators"], True->
                    TemplateBox[{"\[ThickSpace]", "\"\[ThickSpace]\"", 
                    StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False], 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    False),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"], False->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    TemplateBox[{"\[ThickSpace]", "\"\[ThickSpace]\"", 
                    StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False], 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpener"]]},
                    "RowWithSeparators"], True->
                    TemplateBox[{"\[ThickSpace]", "\"\[ThickSpace]\"", 
                    StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False], 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    True),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]]], 
                   PaneSelectorBox[{True->GridBox[{
                    {
                    RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"EvaluationMonitor", "\[Rule]", "None"}]},
                    {
                    RowBox[{"MaxIterations", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Method", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"PrecisionGoal", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"StepMonitor", "\[Rule]", "None"}]},
                    {
                    RowBox[{
                    "WorkingPrecision", "\[Rule]", "MachinePrecision"}]},
                    {
                    RowBox[{"Assumptions", "\[RuleDelayed]", "$Assumptions"}]},
                    {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[InvisibleSpace]\"", "8", "\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.}}}], False->
                    RowBox[{
                    RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}], 
                    "\[ThinSpace]", 
                    StyleBox["\<\"\[Ellipsis]\"\>", "InformationRowOpener",
                    StripOnInput->False], "\[ThinSpace]", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[InvisibleSpace]\"", "8", "\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]],
                    BaselinePosition->Baseline,
                    ImageSize->Automatic]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`maximumSpacingEstimation\
\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"maximumSpacingEstimation[data, dist] fits dist to \
data using the maximum spacing estimation method.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "maximumSpacingEstimation[data, dist] fits dist to data using the maximum \
spacing estimation method.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`maximumSpacingEstimation, {
      FunctionRepo`maximumSpacingEstimation[
         PatternTest[
          Pattern[FunctionRepo`maximumSpacingEstimation`Private`data, 
           Blank[]], VectorQ[#, NumericQ]& ], 
         PatternTest[
          Pattern[FunctionRepo`maximumSpacingEstimation`Private`dist, 
           Blank[]], Statistics`Library`UnivariateDistributionQ], 
         Pattern[FunctionRepo`maximumSpacingEstimation`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`maximumSpacingEstimation`Private`expr = Inactivate[
            Mean[
             Log[
              Differences[
               Flatten[{0, 
                 CDF[FunctionRepo`maximumSpacingEstimation`Private`dist, 
                  Sort[FunctionRepo`maximumSpacingEstimation`Private`data]], 
                 1}]]]], 
            Except[Sort]], FunctionRepo`maximumSpacingEstimation`Private`cons = 
          DistributionParameterAssumptions[
           FunctionRepo`maximumSpacingEstimation`Private`dist], 
          FunctionRepo`maximumSpacingEstimation`Private`result}, 
         FunctionRepo`maximumSpacingEstimation`Private`result = 
          Block[{Indeterminate = -Statistics`Library`MachineInfinity}, 
            NMaximize[{FunctionRepo`maximumSpacingEstimation`Private`expr, 
              Simplify[
               And[FunctionRepo`maximumSpacingEstimation`Private`cons, 
                OptionValue[Assumptions]]]}, 
             Statistics`Library`GetDistributionParameters[
             FunctionRepo`maximumSpacingEstimation`Private`dist], 
             Apply[Sequence, 
              
              FilterRules[{
               FunctionRepo`maximumSpacingEstimation`Private`opts}, 
               Options[NMaximize]]]]]; If[
           MatchQ[FunctionRepo`maximumSpacingEstimation`Private`result, {
             Blank[], {
              BlankSequence[Rule]}}], 
           Association[
            ReplaceAll[
            "Distribution" -> 
             FunctionRepo`maximumSpacingEstimation`Private`dist, 
             Last[FunctionRepo`maximumSpacingEstimation`Private`result]], 
            "MaxSpacingEstimate" -> 
            First[FunctionRepo`maximumSpacingEstimation`Private`result]], \
$Failed]]}], "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     AccuracyGoal -> Automatic, EvaluationMonitor -> None, MaxIterations -> 
      Automatic, Method -> Automatic, PrecisionGoal -> Automatic, StepMonitor -> 
      None, WorkingPrecision -> MachinePrecision, 
      Assumptions :> $Assumptions}, "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`maximumSpacingEstimation"], False]]], "Output",
 CellLabel->"Out[71]=",ExpressionUUID->"93980acd-2ef4-4690-b15b-37ba536c321d"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["multiNonlinearModelFit", \
"Subsection",ExpressionUUID->"b0f9ea23-866e-4cac-9997-19632af0abfe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "multiNonlinearModelFit"}]], "Input",
 CellLabel->"In[72]:=",ExpressionUUID->"6efeacfa-38f2-467c-826b-25397978554a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"multiNonlinearModelFit[{dat1, dat2, ...}, {fun1, \
fun2, ...}, params, vars] fits fun_i to data_i simultaneously.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`datasets_", 
                    ",", "FunctionRepo`multiNonlinearModelFit`Private`form_", 
                    ",", "FunctionRepo`multiNonlinearModelFit`Private`\
fitParams_", ",", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`\
independents", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`datasets", 
                    ",", "FunctionRepo`multiNonlinearModelFit`Private`form", 
                    ",", "FunctionRepo`multiNonlinearModelFit`Private`\
fitParams", ",", 
                    RowBox[{
                    "{", "FunctionRepo`multiNonlinearModelFit`Private`\
independents", "}"}], ",", 
                    "FunctionRepo`multiNonlinearModelFit`Private`opts"}], "]"}
                    ]}]},
                    {
                    RowBox[{
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`datasets_", 
                    ",", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`form", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"{", "__Rule", "}"}], ",", "_List"}], "]"}]}], 
                    ",", "FunctionRepo`multiNonlinearModelFit`Private`\
fitParams_", ",", "FunctionRepo`multiNonlinearModelFit`Private`independents_",
                     ",", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`datasets", 
                    ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    
                    RowBox[{"\<\"Expressions\"\>", "\[Rule]", 
                    "FunctionRepo`multiNonlinearModelFit`Private`form"}], ",", 
                    RowBox[{"\<\"Constraints\"\>", "\[Rule]", "True"}]}], 
                    "]"}], ",", 
                    "FunctionRepo`multiNonlinearModelFit`Private`fitParams", 
                    ",", "FunctionRepo`multiNonlinearModelFit`Private`\
independents", ",", "FunctionRepo`multiNonlinearModelFit`Private`opts"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"multiNonlinearModelFit", "[", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`datasets", 
                    ":", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    "}"}]}], ",", 
                    RowBox[{"KeyValuePattern", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"\<\"Expressions\"\>", "\[Rule]", 
                    "FunctionRepo`multiNonlinearModelFit`Private`expressions_\
List"}], ",", 
                    
                    RowBox[{"\<\"Constraints\"\>", "\[Rule]", 
                    "FunctionRepo`multiNonlinearModelFit`Private`constraints_\
"}]}], "}"}], "]"}], ",", 
                    "FunctionRepo`multiNonlinearModelFit`Private`fitParams_\
List", ",", "FunctionRepo`multiNonlinearModelFit`Private`independents_List", 
                    ",", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`fitfun", ",",
                     "FunctionRepo`multiNonlinearModelFit`Private`weights", 
                    ",", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`numSets", 
                    "=", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`multiNonlinearModelFit`Private`expressions",
                     "]"}]}], ",", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`\
augmentedData", "=", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"N", "[", "#2", "]"}], ",", 
                    RowBox[{"Length", "[", "#1", "]"}]}], "]"}], ",", "#1", 
                    ",", "2"}], "]"}], "&"}], ",", 
                    "FunctionRepo`multiNonlinearModelFit`Private`datasets"}], 
                    "]"}]}]}], ",", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`indexSymbol",
                     "=", 
                    RowBox[{
                    "OptionValue", "[", "\<\"DatasetIndexSymbol\"\>", 
                    "]"}]}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`fitfun", "=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`conditions", 
                    "=", 
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`expressions",
                     "\[LeftDoubleBracket]", "#1", 
                    "\[RightDoubleBracket]"}]}], "}"}], "&"}], ")"}], "/@", 
                    RowBox[{
                    "Range", "[", 
                    "FunctionRepo`multiNonlinearModelFit`Private`numSets", 
                    "]"}]}]}]}], "}"}], ",", 
                    RowBox[{"Switch", "@@", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`conditions", 
                    ",", 
                    RowBox[{
                    "Round", "[", 
                    "FunctionRepo`multiNonlinearModelFit`Private`indexSymbol",
                     "]"}]}], "]"}]}]}], "]"}]}], ";", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`weights", 
                    "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "Weights", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`list_List", 
                    "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"VectorQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], "/;", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`multiNonlinearModelFit`Private`list", "]"}],
                     "===", 
                    "FunctionRepo`multiNonlinearModelFit`Private`numSets"}]}],
                     "\[RuleDelayed]", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"ConstantArray", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`list", ",", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`multiNonlinearModelFit`Private`datasets"}]}]\
, "}"}]}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`list", ":", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"VectorQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    "}"}]}], "/;", 
                    RowBox[{
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`multiNonlinearModelFit`Private`list"}], "===", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`multiNonlinearModelFit`Private`datasets"}]}]\
}], "\[RuleDelayed]", 
                    RowBox[{
                    "Join", "@@", 
                    "FunctionRepo`multiNonlinearModelFit`Private`list"}]}], 
                    ",", 
                    RowBox[{"\<\"InverseLengthWeights\"\>", "\[RuleDelayed]", 
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    FractionBox["1.`", "#1"], ",", "#1"}], "]"}], "&"}], 
                    ")"}], "/@", 
                    RowBox[{
                    "Length", "/@", 
                    "FunctionRepo`multiNonlinearModelFit`Private`datasets"}]}]\
}]}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"NonlinearModelFit", "[", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`\
augmentedData", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "TrueQ", "[", 
                    "FunctionRepo`multiNonlinearModelFit`Private`constraints",
                     "]"}], ",", 
                    "FunctionRepo`multiNonlinearModelFit`Private`fitfun", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`fitfun", ",",
                     "FunctionRepo`multiNonlinearModelFit`Private`\
constraints"}], "}"}]}], "]"}], ",", 
                    "FunctionRepo`multiNonlinearModelFit`Private`fitParams", 
                    ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`indexSymbol",
                     ",", "FunctionRepo`multiNonlinearModelFit`Private`\
independents"}], "}"}], "]"}], ",", 
                    RowBox[{
                    "Weights", "\[Rule]", 
                    "FunctionRepo`multiNonlinearModelFit`Private`weights"}], 
                    ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`multiNonlinearModelFit`Private`opts", 
                    "}"}], ",", 
                    RowBox[{"Options", "[", "NonlinearModelFit", "]"}]}], 
                    "]"}]}]}], "]"}]}], ")"}], "/;", 
                    RowBox[{
                    "FunctionRepo`multiNonlinearModelFit`Private`numSets", "===", 
                    RowBox[{
                    "Length", "[", 
                    "FunctionRepo`multiNonlinearModelFit`Private`datasets", 
                    "]"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   PaneSelectorBox[{True->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    TemplateBox[{"\[ThickSpace]", "\"\[ThickSpace]\"", 
                    StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False], 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpener"]]},
                    "RowWithSeparators"], True->
                    TemplateBox[{"\[ThickSpace]", "\"\[ThickSpace]\"", 
                    StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False], 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    False),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"], False->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    TemplateBox[{"\[ThickSpace]", "\"\[ThickSpace]\"", 
                    StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False], 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpener"]]},
                    "RowWithSeparators"], True->
                    TemplateBox[{"\[ThickSpace]", "\"\[ThickSpace]\"", 
                    StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False], 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    True),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]]], 
                   PaneSelectorBox[{True->GridBox[{
                    {
                    RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"ConfidenceLevel", "\[Rule]", 
                    FractionBox["19", "20"]}]},
                    {
                    RowBox[{"EvaluationMonitor", "\[Rule]", "None"}]},
                    {
                    RowBox[{"Gradient", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"MaxIterations", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Method", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"PrecisionGoal", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"StepMonitor", "\[Rule]", "None"}]},
                    {
                    RowBox[{"Tolerance", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{
                    "VarianceEstimatorFunction", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Weights", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"WorkingPrecision", "\[Rule]", "Automatic"}]},
                    {
                    
                    RowBox[{"\<\"DatasetIndexSymbol\"\>", "\[Rule]", 
                    "\[FormalN]"}]},
                    {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[InvisibleSpace]\"", "13", "\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.}}}], False->
                    RowBox[{
                    RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}], 
                    "\[ThinSpace]", 
                    StyleBox["\<\"\[Ellipsis]\"\>", "InformationRowOpener",
                    StripOnInput->False], "\[ThinSpace]", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[InvisibleSpace]\"", "13", "\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]],
                    BaselinePosition->Baseline,
                    ImageSize->Automatic]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`multiNonlinearModelFit\"\
\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"multiNonlinearModelFit[{dat1, dat2, ...}, {fun1, \
fun2, ...}, params, vars] fits fun_i to data_i simultaneously.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "multiNonlinearModelFit[{dat1, dat2, ...}, {fun1, fun2, ...}, params, \
vars] fits fun_i to data_i simultaneously.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`multiNonlinearModelFit, {
      FunctionRepo`multiNonlinearModelFit[
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`datasets, 
          Blank[]], 
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`form, 
          Blank[]], 
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`fitParams, 
          Blank[]], 
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`independents, 
          Except[
           Blank[List]]], 
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`multiNonlinearModelFit[
        FunctionRepo`multiNonlinearModelFit`Private`datasets, 
         FunctionRepo`multiNonlinearModelFit`Private`form, 
         FunctionRepo`multiNonlinearModelFit`Private`fitParams, {
         FunctionRepo`multiNonlinearModelFit`Private`independents}, 
         FunctionRepo`multiNonlinearModelFit`Private`opts], 
       FunctionRepo`multiNonlinearModelFit[
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`datasets, 
          Blank[]], 
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`form, 
          Except[{
            BlankSequence[Rule]}, 
           Blank[List]]], 
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`fitParams, 
          Blank[]], 
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`independents, 
          Blank[]], 
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`opts, 
          OptionsPattern[]]] :> 
       FunctionRepo`multiNonlinearModelFit[
        FunctionRepo`multiNonlinearModelFit`Private`datasets, 
         Association[
         "Expressions" -> FunctionRepo`multiNonlinearModelFit`Private`form, 
          "Constraints" -> True], 
         FunctionRepo`multiNonlinearModelFit`Private`fitParams, 
         FunctionRepo`multiNonlinearModelFit`Private`independents, 
         FunctionRepo`multiNonlinearModelFit`Private`opts], 
       FunctionRepo`multiNonlinearModelFit[
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`datasets, {
           PatternTest[
            BlankSequence[], MatrixQ[#, NumericQ]& ]}], 
         KeyValuePattern[{
          "Expressions" -> 
           Pattern[FunctionRepo`multiNonlinearModelFit`Private`expressions, 
             Blank[List]], "Constraints" -> 
           Pattern[FunctionRepo`multiNonlinearModelFit`Private`constraints, 
             Blank[]]}], 
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`fitParams, 
          Blank[List]], 
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`independents, 
          Blank[List]], 
         Pattern[FunctionRepo`multiNonlinearModelFit`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`multiNonlinearModelFit`Private`fitfun, 
          FunctionRepo`multiNonlinearModelFit`Private`weights, 
          FunctionRepo`multiNonlinearModelFit`Private`numSets = 
          Length[FunctionRepo`multiNonlinearModelFit`Private`expressions], 
          FunctionRepo`multiNonlinearModelFit`Private`augmentedData = 
          Apply[Join, 
            MapIndexed[Join[
              ConstantArray[
               N[#2], 
               Length[#]], #, 2]& , 
             FunctionRepo`multiNonlinearModelFit`Private`datasets]], 
          FunctionRepo`multiNonlinearModelFit`Private`indexSymbol = 
          OptionValue["DatasetIndexSymbol"]}, 
         Condition[
         FunctionRepo`multiNonlinearModelFit`Private`fitfun = 
           With[{FunctionRepo`multiNonlinearModelFit`Private`conditions = 
              Apply[Join, 
                Map[{#, 
                  Part[
                  FunctionRepo`multiNonlinearModelFit`Private`expressions, \
#]}& , 
                 Range[
                 FunctionRepo`multiNonlinearModelFit`Private`numSets]]]}, 
             Apply[Switch, 
              Prepend[FunctionRepo`multiNonlinearModelFit`Private`conditions, 
               Round[
               FunctionRepo`multiNonlinearModelFit`Private`indexSymbol]]]]; 
          FunctionRepo`multiNonlinearModelFit`Private`weights = Replace[
             OptionValue[Weights], {Condition[
                PatternTest[
                 Pattern[FunctionRepo`multiNonlinearModelFit`Private`list, 
                  Blank[List]], VectorQ[#, NumericQ]& ], 
                Length[FunctionRepo`multiNonlinearModelFit`Private`list] === 
                FunctionRepo`multiNonlinearModelFit`Private`numSets] :> 
              Apply[Join, 
                MapThread[
                ConstantArray, {
                 FunctionRepo`multiNonlinearModelFit`Private`list, 
                  Map[
                  Length, 
                   FunctionRepo`multiNonlinearModelFit`Private`datasets]}]], 
              Condition[
                Pattern[FunctionRepo`multiNonlinearModelFit`Private`list, {
                  PatternTest[
                   BlankSequence[], VectorQ[#, NumericQ]& ]}], 
                Map[Length, FunctionRepo`multiNonlinearModelFit`Private`list] === 
                Map[Length, 
                  FunctionRepo`multiNonlinearModelFit`Private`datasets]] :> 
              Apply[Join, FunctionRepo`multiNonlinearModelFit`Private`list], 
              "InverseLengthWeights" :> Apply[Join, 
                Map[ConstantArray[1./#, #]& , 
                 Map[
                 Length, 
                  FunctionRepo`multiNonlinearModelFit`Private`datasets]]]}]; 
          NonlinearModelFit[
           FunctionRepo`multiNonlinearModelFit`Private`augmentedData, 
            If[
             TrueQ[FunctionRepo`multiNonlinearModelFit`Private`constraints], 
             FunctionRepo`multiNonlinearModelFit`Private`fitfun, {
             FunctionRepo`multiNonlinearModelFit`Private`fitfun, 
              FunctionRepo`multiNonlinearModelFit`Private`constraints}], 
            FunctionRepo`multiNonlinearModelFit`Private`fitParams, 
            
            Flatten[{
             FunctionRepo`multiNonlinearModelFit`Private`indexSymbol, 
              FunctionRepo`multiNonlinearModelFit`Private`independents}], 
            Weights -> FunctionRepo`multiNonlinearModelFit`Private`weights, 
            Apply[Sequence, 
             FilterRules[{FunctionRepo`multiNonlinearModelFit`Private`opts}, 
              Options[NonlinearModelFit]]]], 
          FunctionRepo`multiNonlinearModelFit`Private`numSets === 
          Length[FunctionRepo`multiNonlinearModelFit`Private`datasets]]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     AccuracyGoal -> Automatic, ConfidenceLevel -> Rational[19, 20], 
      EvaluationMonitor -> None, Gradient -> Automatic, MaxIterations -> 
      Automatic, Method -> Automatic, PrecisionGoal -> Automatic, StepMonitor -> 
      None, Tolerance -> Automatic, VarianceEstimatorFunction -> Automatic, 
      Weights -> Automatic, WorkingPrecision -> Automatic, 
      "DatasetIndexSymbol" -> \[FormalN]}, "Attributes" -> {}, "FullName" -> 
    "FunctionRepo`multiNonlinearModelFit"], False]]], "Output",
 CellLabel->"Out[72]=",ExpressionUUID->"c5ee1adc-6a88-41e5-a4b5-eb21b635912b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"BinormalDistribution", "[", "0.7", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "100"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"data", "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "All", ",", "2"}], "]"}], "]"}], "+=", "2."}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"model", "=", 
  RowBox[{"multiNonlinearModelFit", "[", "\[IndentingNewLine]", 
   RowBox[{"data", ",", "\[IndentingNewLine]", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"a", " ", "\[FormalX]"}], "+", " ", "b1"}], ",", 
      RowBox[{
       RowBox[{"a", " ", "\[FormalX]"}], " ", "+", " ", "b2"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b1", ",", "b2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[FormalX]", "}"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 TaggingRules->{},
 CellLabel->"In[73]:=",
 CellID->161500924,ExpressionUUID->"c39143e0-8df7-4e59-b0a1-a501fd5ada30"],

Cell[BoxData[
 TagBox[
  RowBox[{"FittedModel", "[", 
   TagBox[
    PanelBox[
     TagBox[
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"Round", "[", "\[FormalN]", "]"}], ",", "\[IndentingNewLine]",
         "1", ",", 
        RowBox[{
         RowBox[{"\[FormalX]", " ", "0.7479134444326814`"}], "-", 
         "0.04215532466430405`"}], ",", "\[IndentingNewLine]", "2", ",", 
        RowBox[{
         RowBox[{"\[FormalX]", " ", "0.7479134444326814`"}], "+", 
         "2.0691902633667745`"}]}], "]"}],
      Short[#, 2]& ],
     FrameMargins->5],
    Editable -> False], "]"}],
  InterpretTemplate[
  FittedModel[{
    "Nonlinear", {$CellContext`a -> 
      0.7479134444326814, $CellContext`b1 -> -0.04215532466430405, \
$CellContext`b2 -> 2.0691902633667745`}, {{\[FormalN], \[FormalX]}, 
      Switch[
       Round[\[FormalN]], 1, \[FormalX] $CellContext`a + $CellContext`b1, 
       2, \[FormalX] $CellContext`a + $CellContext`b2]}}, {1}, CompressedData["
1:eJxFlXk41Nsfx4dEIopE+JWtVOaWrVD8zuRmrcaarBddFJJ700ikcstalmt3
VepasmWpsYYzuVmyhAhZhxmMfd+33/3j1znzPPPP63k/7/PZv5LX3I0d2QkE
Qu2//x2EH78ZQLow8+Cm/AygiNWGZresgx98ZLV+IaanH0xI5NgaseYRv2GZ
d1aV3ADGUjjfSzph/sZIwPPD/l6wJLompjg0iDjfuFSpjXAeeCHs0G/2qBdx
OSdCoK7qNFhKTHNRkxlDvHIrJ3hfRyMsHHjzPuHMAvzBg13ehh5mzMInEVUj
Yd5ziMuODBnWrNIBVS6JJGbYi/iOsYhf2MtbgKuDRFdmzBzyv3a8h/yTXgtQ
v10h95N3M9KLXq3XqpFmQPNxBiPp1z7ErzLpryL1+qEtf3Rrj9s35HMuKseS
MU6Hjb+cktZwmUF6m73z0n/bR0P3MisybXQB6beCis6GnK2EfPSXrlxlTKR3
IHvymIUNARlKjnjqu26kFwosUQ7IHwYixsLiCtm4L86wPsns7hLkM5MZ1xFc
Qz4qRHmb+C8sWN6QpV/hNIh4lr3ez+2Tq9CaX6ZTsJWT9oNn61SKv5wcBLoV
SxbyuzNwXiZjTz/8MgvWxA2rBegriI9Pg6Gw5EX4+G50iIguG/IhXu2dvTUz
B+3kx7qVNr+gdylwayIitgtuHTHlk73eg/jNDJ3HNdWr8JXAZIszcQnxkxVU
n+fhs/C9stsH0zvTiEeECwX83sUE5NKZK/5wEcUTrarMd9u0Fma799dldw8h
viEx7cIdz4SV++5qDaTjOQnZ7OS8ZfMZCFRplso5DCC+dX6HT+OdZjBFCd4h
vDCJ+Lx7a5LB6xGo9uyKwVe5FcRt7ZxIShsdgC5i/PzA7yOI/+eiV3hF7jCk
3i/ZRTiP/ff7VZTG5K2Bzhuva528ulCcfp/IvbKVbKRnJY9N4pcxn0zkVWYJ
zENyjWT/kscQ8rHg5GJxf5mFB6o95ke3+5De5+3TAxZuk7DhYWWfaAQD6WMP
SvhPTs1Bopq9UzhgIZ5Hp08Sn/0DYxqthV5/xXUec7e63e48B0xXF9n8H60i
/4vjVRxrKYPQ65COVYJ5HeLVF/n125jz8G1oLUXAE88/25ELkmsy03BHzEbJ
htc24jxvojTD8ubBoW0wnO3SgXxihRp0uauZgNarc5EaW4m4i6FSygsBOmiY
uaxLjcCccnDB8NVYJ+A1fUv7Uo3j3PZaF8gy6APxfNSiO8PTiKcee/dT8Z8D
wKZqq+n3Ebxfmf5K3LuamIDFcqxNjMLxU64L+UlrT8CFerHM0w9w/TP6mtQb
q0aBsXvxalVCLfLpsz0xqZrIBNyFETLxm+NIz6xJTcg/FQsbaYYm6/0luM6l
8p78bjNQh72C71slgfaDB/0Vp2EZ0Q88+AqVTp/B+aaR6//qJi3BOyMzmd+8
8VypvSIWv2gmkHSSGvLPiY8iPdW7KejI5gIIzwle/PUhvs8kkcDMOvuP8GSG
lWq9XBPyOeh/RVrDdxZG5L3LZarmI71n57lPJ+71g7yEFLO3rvg+l/HvSWO1
z8FwmTqVb2dwvoeKvO28C/tgSKCsiBnA99NbIflgjwaEI5cEP/WsNCIf1vBu
yUZ7As1lLODqca95pH96zeX+U9Vh8IdwyM+u3/Ddvn1SoInyhEAy+G/UhJn/
DtIP3t7mKXBHdRZ2vqJrw+t4HxWyKeYE0iwQkRgcvSVKQz71pa5+CVM0KCQ5
Jqf7pQ7pf54jU8ldy5CjqJxj2x1/d0gmzibTnOOQdlzeOlKgCvmcHGhK3jlW
DVs8GppUcmsQl+CLEqdQmCCDcTicZy8dcf2yeMP8vTQgsu+mUGEI3lN2ira7
nl8BiHVt4q9UmUF6nqasZnOncVh9yY/UkDmL9NRTuqLeGh+g+UOO3J70LsTv
r9Dee6mxwPfUhvHAZPzu8dPOar9r0WCKjRcMeTKAuFIs21BCxzz4jXAs4Lt5
PvK5fvjgX50fpyApxjOsTCgX37cGoXuBb+ZBrN+KAdcaE/kcTqy75/9HAzRg
GEXoFuG93nm8lGhuyYAhfVrhuvp4v4TcH9xWLGOjBWikJVbksNNQnYMfefia
bAAL7pmhgRhcB7AnhTkS+u8eGEe91on7jjhNbYq8tHsAbneEHzs2hPtudOjM
mEEFHfI1dnV35uL7QPR4xK95fxkOHun4av1uFenlE/tj8lfWYR53m42ydCvi
z6/eoOe8oEPiTfOxKONRxLkeqCmeKa6EU2Wt8iaJNMR1JNdlGYw52K6lHxdY
s/h/TiBtP+Pj7decgnHpxS9fXlgDP7je5zsltvHl4Babb5b+ix/zTCCl8Uw5
brxhwc64uKO+twmIa3h0yqVeH4NnZfiCday3kM+DCV6FxLZm+MiFbidmtoL4
hcdJeQW0acidZX1UmWsTcbO8jeKcDBbgDZ61laNwIv/dCUUbVVJMoMZpmjyu
y434wtHL8c3xDCB55Jzv8mE+xPfqxej3RQ3BejK36UcLnNc9iWHb2toFYB4c
J1gusxPpoyyaT1paUqHmzo7sEdcNpC86UCMX8uIdeDYR70BUwXq9C+efMn4d
AmUJEcXSYeyInyKvSu4uGYaxOy+H6laOI5/IUM3gu/uqQd2EuknL4gzijxeI
Smz3O2HEH+ISm924Dh3WjI+p23RYGJ4afiN9CdfT3mf7buwSnI5nrlEO4Xoa
ynlISc98gMJFKb4KDxcRt0wamqN694KgNrfclALcx4nZSx+3Lk6D/hsltfph
bIifVyvbF8I7B8QvFvEHP9uFeIHCkoyQPBNqc54gurTM43ebqyRiVUqAM79v
+/EC3K+6gtLUK9dW4NKYosdfOttIf7nf1yHBbSeNJjT34ujjOTSH47neKmc2
54B63tK7KiMu5CNlISR2ftc4qJ8vvsbbi/0N6n0WidOjgP2FWFZk3V7E3SzS
0xetGwHR/1DQnUQcPyP8iSAnuQt+uEt0rinF9dzvza7B85EJDfNOSXXHDCHO
e92Tk+/RKDj2csnKXWwd8T8HtW8uvK+CWorMc3+m4byitWuO7LKYAp/jXKnl
WjzoXRL99bUS33ZA9zZ/amiF439jJOTwIP0dLMscbdI4ivNVNLdXCvtvCwxJ
c50z2mJH/MTrZU3RtHYwYycqTDmB+0XV2SMyeGkFMqS+F3Dcx32XNO5std4c
hjl0ixsFLA6kHz0ZOH7cgo0k0iwacM8cx/Nkv1ljqwcbyelQZqHYJ8xtZKJr
1KMGIGvOgf6Fiv1dclr1mVnzIEo8y1XBZA/SR8P1kvqvGyDKOLZ4VBD7aAiu
ZWoYMCE533K4WxLfjfymw7P7hpvg/sq8XmHbUeQvld9cktU3A/PM2wwG7tYg
fvat58Ll8lG4/6FeKFF5CnEqq3+Xz+t3oG787A6TFby/7aFWQ89NEuEkZ3l0
tDTeX8KWR3BeBoEmCXIUgw7gen6U96Lr89XBNJ319+K7WcjHq4JTYissDBrW
1P9jmojvm2ib8hjb/hJw+6W9u9gRnC/Z5cQ+13omSLb/kEF5ieu/HL192aai
AbT/Qx5QbcL7mHdc263Vrhnw8lh+62nFfRdQsDFI/WcU2DtzlQrn4bt3Umrx
0uLpcaiqNWHAP9+G4mFQSjv2J/dDs2nlQx+ej+B78n0tmqhSDrPFYqxs7+F7
qJg0Sc5OnYDqK6UjqipjiGfZd77Z28iCRgFmae2vcD0NVAXK15KGgOClHZ9o
hXj+B/c5ii32fYUbX9fF2RRnEdc+/WghIHsWhFX/fMwmDe+pJ7Ci+Z1YBcTK
ezmy9/HdFj488yo1lA7IMsIFBj54Trr9pNr2JDFgcoCKcLUPvj+86c7qxd4L
kMbrJ5urjuczQU9OuoOvB8heE79wRxX3N/LPlECieCcUrXviY6SB/am57pHS
Yl/h+VFjxTBDrHcN3+QVp3PSbqzvcRl6husccWMv89pEGbzgEDpgH7eAOLtq
19UsrmH4KYgQq6yA66N5YOdqUtlLUPbx4dOiTfxuYeFJkRbKKhR58GmSi+M7
0gdkFJht+22DsU87+bKpuO82Wc2/Obaz06IXBUeSpIaRPiibeyFDlg631jSj
+un4+9LOZ/tGwIsFHHMvpZs+xnl9ljpdExi6DNJhpJv1Bp5bWkSWSXXEJJzQ
MeLxFcXfI/i8ZLSaOQJYZlcMoyvYkf5Lh0QmQ/kb1EtqGLnFgX2iX7H/8huV
BeK77CKH5vH8K3KVnndPXAfhclEPvJdx34t0lM6Eb3RC/XhLaHZ6Gb17M3CD
Z9OxDDiZXI+xjMR3Nfn+vX5/o3XAawQrz2rwI3436nMJ98QWsLx7xEB8E8+b
VjdnUqF6EAz+W+6w6jyef4a6nR2H+hCkxdeo+Ym9R98jbUftFn/hUSjT3FlU
aoDrvFWznE964ghrtygH8hNxHfrJ6uxiJcsg0Cf6hIIkN+l/cV4Thg==
    "], 
    Function[Null, 
     Internal`LocalizedBlock[{\[FormalN], \[FormalX], $CellContext`a, \
$CellContext`b1, $CellContext`b2}, #], {HoldAll}]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->True]], "Output",
 CellLabel->"Out[75]=",ExpressionUUID->"50c2d7a1-46d5-4710-a375-62d6e5e83e58"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ListPlot", "[", "data", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Normal", "[", "model", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"\[FormalN]", ",", 
          RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[FormalX]", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 TaggingRules->{},
 CellLabel->"In[76]:=",
 CellID->671103164,ExpressionUUID->"2c3b7c6e-944b-4770-9eb2-ff95dc74ee9e"],

Cell[BoxData[
 GraphicsBox[{{{}, {{
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.009166666666666668], AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwVxX08EwgfAPCh06m7qXXLS6546CNHpUjUeX67Om3pnhFCLyqdU6j2hEnq
KleIyvaciNTRJR15LUek/XZ78vKwWZKXvG622WyN2ZAhnuf54/v52pxg+P1k
SCAQwv7n/1O+11w+7awB5prm2yXtcyDXt05m9g/BB+uyY/sVOjh1qGKHO50P
ygLj5zbhOniynxT38qsBmLacXbNVNgxE1d/qQswq4IFZ2FDg1QFwDCek0NzH
YTq3MNLDTgm8hbLUld0CrBY/eZ7jNompkaW310km8Dq7QZ6eoEV7ucy3SS+C
Ksc8yhrfATRSso8avmqHqDDr3uJMLZxw6Kdv3NsO30ZzHDcmvEHLoFavJlsJ
BqskkrwfBzFIKsr/de8QHjO909F/phN2ZpQdkqhEKDi62dYzUoMhK3S2v4fe
QUb9YTp3dBIWbtTsSNvBQ6Lot6il9VIMo8ctD0yXgR2zzOrxsz4gp9S6JleO
gLmfmdWWkjmIwNa8wPPTSAy0U1FXzeJ2J+eQ7DYFvuI/9eaED+PT0L27u9R6
PGJq17Oqw5hbQuVZ/aYeBhpn+qDzsiLY6a+8+fLoBMxa+TaSRDOgGgdZ+qMp
vHb+Tpo5zYDrFDQwcVajxePOyj6XT23IxIUP7KxeXFgfQLQ/2Y+ni6jXmhr1
mE9St0c4TeMmTtXF+6wJfO565mVA7DiyWeTkc71SoNdpDiThFNxxdyVGBzRj
CWOopaRPBvPW45Em2VLkrTzvJf5Di2mfeozPhvwHSA276hzDxLjwndFFQewb
GGOmGplNqlHH6MjzeShHj1sHfN46zuCx4+EUl/luEJn73V99To5f74tnccpH
sOpS7eeE78T4VSKnLrNiFnpOPWwOj++FxNf0AXueAeVW7TX/7I+9oM79wlVB
0iG9yWZoOkaGB42XKkzaJnB1Y4xudHEQLpbeXH3wjBr5V3iDlmwJZllYJ6nH
tOjkERrOAgVWiERqp1v/xkzBEfLDt+OoZByO7orQQoB+yiDpqh72qRqWzBYM
Y/xa6uGc4BZo3Gfq/U6qw9LbzUxSnAYN1n9vM2s3jkaZ87Xz8Yu4/EnGrvQK
HaxdhJGSyG7IIvNpJo1S4A5Q91Vl8SDS16XgAUkEfM0/aFVsHjAtJn3zlT3w
RUApt61RD4vxc6SnPoOQTayqiR0Zh8cbnm188S8xhDQsCM/J+6A4ycXkc6EU
FIqfmnMzNMg8SU603fMBJ1vXFG+7LMOiQeG3goZR8GO80DfkNMPgsW/U7rlS
MKlm22V/UqG06XFO5eYsFHB9/eeGalFZ5xxnekaDVEMOsZNH4N64d9fzEHsI
YojVLtvceFBIb73XR5nGWLmmuDNBjB75Ti8evCFQqHn8yp1Wo1CVILyx/tMk
sMpSp368ogOKeUpxS+hfuKnosHuroxAtkg7Yev48geyKZ+VS90qI69n5+psL
Q1CRUxBYGqWEetMvCxVdWmTZtWzvdFPh2pqE4wnVg5iWYm8eCIOYsOWRRb8n
ovyHVa/7ZwSgGFlmIwglcCOVyUEO8Tq8eSLy0k33EfjFLG13VKcWojeRhMzr
BIrP3zM+BCYZUbrexZFi3SewJ1+0B0/KcUsJM5hAmQBz6+HRs5ZcaK2LSswZ
4yLZRulIa2vB3Vp6Fb33Iy6pebVkkTGJFP8I/3FjFXIdnI/8SmqATWLho8+U
jdgewxduL28Ca2KGFZMphSLJOtbyFSLwrs/2rVzBBfOVp8nVaRI0ZO5h7E38
E7KihKa87RpYLnz6JjhchY0/JFL4xRNYtZlmmeD5EoOvLCnv/6MXL81wn8d7
KOD9Y74q5ZEIHLZFeJzz4mJBSDymXReDS5aBLKdbB/8kbEh+H1yJJ9dZ3Ov5
awwpmXHp9eRy/JpPvpDyRAdZiTM+S2elsC635ULSL3z0kexn02q64TOHOqfg
QxJMG/Ri0bw1SGZcjt5ab8BN9izM5ZQZcimpV2N+9p+HgyYamThTA/BlgVR+
WwOFfhkPqXffA9djjD69TIyL3awNG2Ry3L/WTenDESFR0NvXU64Hp5irprsu
fcTh9d1vjzzTo3PuUGblzBxWmLwLcbXtwPtBp0RlD0TodDpYmeE3iksve2x1
e8HDsfoOZ/9cLlJt5uwlEi12eXnfTWmawv8CGq1olA==
        "]]}, 
      {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
       0.009166666666666668], AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwVxXs0FPgeAPCZwSDTRJSOmVMMaWNOu6SldtzvjxXLMkjrel6PyybW2rOS
EOVWHpVHTGgVtSIayyivEf1GiWLbiEXZMmUwg/IcNOaxe//4nI9JeNyRSBKB
QIj4x/9XXaZSxh0/4uLq1rIyJxm4PjvBDynpgB+JqVy3G2qoSudjpPyOGI8W
F5un/kxA9vGjlpXHZvAhM2q2S5AS0uYoVqVD/fhstDCU5rsOTufKeU2CeazN
DTK30VSAL0/eWlcjBkr2YohlAhltutYif8IQwUHy0YrZb7TRirlHSX/JBJjs
/ip1bRcV6bpedXtbOIn72NpHO/1lkGQ8FfL06Qr4ZRfrd5hpoEL//n0BAY3Y
UWOkdjpGDi3beywv3rgHl+dKIpi2GsjVyeHSxH8nof1afqtpLgl9zv5ksok/
hYs0PHK+eTQLBTmO2Yl63dA7x/IZkC7AuRXmfuLpUZz/P7qxYkwBI0ETnZUq
IW7Oq8yLql6FtLAUVWLRKp4vEckSdq6Dl2U8w3ThATZsuZ1qdUYKAeWTS43J
byBrKLb+dpMamlt071R+Ow/jUfynbrlE5HCwXe8iZQno37Zsyb6shZqsVs22
fSHCzmQLZvTAMnj1PzEusuXD8S2pw3ubyKi3qa3yu/B1vDpjHf+Liwo8xlMj
rsVqCATblm6Yn1vCs/XJtl8qloDFW733xFsTMfy30Ry0ZqFvuTWc8oaMPPtS
pMx5CZBu0LgFvboo1r+6Whr0HJgXdmadKNVCE3nn9cns1/hBIvN4T9sqGCST
7HU6RdiL9zlj7OokUI6dJFPPSuCzstXAONoGXHnv/MPK/Sf4sLXoqytVKuA4
9+zW8v8Iz4pjGjsO6yAkvBXOTx0GYbLfJa9AMrrjvS0irfoebr8reWFvroms
/cL25/5rAF+silnyVpKQxa01R6OqYVgINTJMsCCiRpfNO967r+MJxqsm9dNS
MDkyOhikmMJ1Qv+oJrE6kuzLnN3rT0Q7+o0ykvzI6LyB7/PBeCL6fufdZloX
GQWbcXpYhe+weClC+EejFKLrBt1E3GUopHNjrHw2Iw7e4Pe9lEPhkaJWiT4Z
2evL7tp7ijC7IWBqzISAGl7sWtSbeoENHvHeGIZIgNHQz+e+XcA8vyHPd4k9
cOi3kyseHRJscMY1h2nzERrF41opt+5B7+whNZ91OQznBE5e9ynFH8gdHI6p
BiIo47N5NQSBCdRZZ20nos4vTgndqL24ymXjPn2TGE49JBsrc3OxV0/f46Ol
SjAaspkhGvDh57KwONpuMmJHW+jF9ImgIuxBTUKZOlrjqDyCH/4Ow4/Z7+xe
qCHeXufYwdB+oOgE/PnXIAlttQr2rHwsgbDjmm2GPG20jyF1lx6YxXaH5zy3
LA/BRELbiEHFOPadt9n54Po0jLyScZi2HbiWdjUwJEkG1uUf2LWVc5i13jZt
ZzsD3LDRO7rPxdg7w7dq+KYcPO22dsjKJ0HfXa1L0KyC93qRNOnbl1j+coNO
tF4E5wNnVzJqFyG3++vPgqt00UkIFKRbfALmo6S6PaepyHDXws3KHCGwzQyb
PFMIaCydMbS5fAJXZNgadqcsA6X6OKs1eQULKOl76llSuOZqaTpC/Qv2hNOd
TtgRUcGV25lM+ig26j2f4m1PQI31cQWmtJfYQXLEOteLiGLyFBS6kCyI2tgc
PXl5CPKjdEXhc+3YKSLnXVjxCpDsXv+bqzmFu7IIRTZWKnDcrvGpvL0M2jvP
XGpREFBz874dAwmf8I60rg+a6q8go6bJV5WugpkuDWptozYK5vb/FDlMEnCk
+tPljCnIqtVeqdkjxEqZY+G4cAGGqSF3tp4SQ2S9e/XRc0T0jHGgJzNnDapx
QWyQnIwE+Vyf7vwPeM7FWyfVSAH4Ol/SLZoGse93XpyHJPTHiPHdCZs/sWv5
79M/qpMR5ybpPz81iqHkdWjB5LI6stZsc4gr3YA8y8K05DUqanHZ/2WefBS7
lQRg3wNr8EOmXEcR2Q7f+xy7GlCggypOJ41f8N4Aijd+dMh+C0osfMbXnlNC
QOJuT7pCFx0eI5c3s7Jw9q+Wu+yWZTDBCg1VZ01iQUnPwXTafewc6TxwwVCC
zfpHW9o8p0DZs9aAzkfip8qE7Q2lJDTOZpFo/DXITOFYWJloo78BkCQdNA==

        "]]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.009166666666666668], AbsoluteThickness[1.6]}, 
      {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
       0.009166666666666668], AbsoluteThickness[1.6]}, {}, {}, {}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.009166666666666668], AbsoluteThickness[1.6]}, 
      {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
       0.009166666666666668], AbsoluteThickness[
       1.6]}, {}, {}, {}}}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJwB4QQe+yFib1JlAgAAAE0AAAACAAAAfedN8v//E8C/2qyr90AOwOZ7FvXb
/BPAXurDCkU8DsBOEN/3t/kTwPv52mmSNw7AIDlw/W/zE8A5GQkoLS4OwMKK
kgjg5hPAsVdlpGIbDsAILtcewM0TwKXUHZ3N9Q3AlHRgS4CbE8CMzo6Oo6oN
wKsBc6QANxPAWcJwcU8UDcAFZUcyGV0SwHDUjhBdzgvAE9jFbKKREcCEJXRF
BJ4KwFLDmmMpyhDAv65R0aNzCcB77z1skOMPwHdiiTb5LwjAuHeaaq9PDsAr
VYgx6AEHwE6SVSD+mQzAXHLhBY26BcBHnb1OSOwKwLXHMjEqeQTApsd51nNb
CcAKXEvyYE0DwF6ElBXPqAfA3Bq+jE0IAsB+YAOuCxMGwKsY+LzT2ADAAC0f
v0OFBMBEnVSIpF7/v9qLmYer1QLAKl5tSQ3Z/L8cCmip9EIBwAudFDapfvq/
azUqBdsc/7/jMHDVsPH3v2M33qjDw/u/CzW8Iqlw9b8qeDr/bqT4vy23lpvU
GvO/od1TxHlB9b9IjiXHa5Lwv+eBFTxHGPK/ucaFPGxq7L+6lShF6Fbtv9Ma
KVDYSue/MOnZ9C+d5r+MT62/JUPiv0S62wn9VuC/cwCdDLMj279wqa/4ERPT
v6+1sGTJ9tC/VmYjodJ8ub9Zi/mrsdq9v8fM2YozU7g/WOwib92anT86LcGy
UJfTPwXZIpyy6Mc/AnYV3GQZ4D9TsvYWOGLVPwcMUIFi7uY/RKQKFWia3z+D
4NZDcqPtP3xqrq1q0eQ/sJuGUH7y8T/ghrr5On/pP2+iZBDkVvU/Vfld4DOS
7j9eapodh4H4P+o38jdjp/E/iVF2OTOc+z/aAsXRu/nzPwQUleZ/+v4/03jj
uKh+9j/Xy4XwhA8BQM9wc3Ri2Pg/VXtiNprDAkDVE099sGT7P2wL6yLOWgRA
4TicWsvF/T8fq8aWBuoFQM52/MR6DQBAe7hDUw+bB0CwplADWlEBQHCmbLY2
LwlAlZfdq59/AkAMAjdiLuUKQP1dEHsvxwNARW1UlSqTDEA97ErzxggFQBi5
HW9FJA5AgTu+1cQ0BkCScoiRMNcPQElg194MegdAUoZPLZ22EEASRilSu6kI
QCpbhFWkfRFAtfOCbnHTCUDW5gmik1USQNt2grFxFgtAzmLlQRIfE0ADu7pe
2EMMQOEEp/iVIhNAPlGvLxpJDED0pmivGSYTQHnnowBcTgxAGevrHCEtE0Ds
E42i31gMQGRz8vcvOxNA1Wxf5uZtDED6g/+tTVcTQKYeBG71lwxAJqUZGomP
E0BJgk19EuwMQDlH29AMkxNAhBhCTlTxDEBM6ZyHkJYTQL6uNh+W9gxAcS0g
9ZedE0Ay2x/BGQENQLy1JtCmqxNAGjTyBCEWDUBSxjOGxMcTQOzllowvQA1A
ZWj1PEjLE0AmfItdcUUNQHgKt/PLzhNAYRKALrNKDUCdTjph09UTQNU+adA2
VQ1A6NZAPOLjE0C9lzsUPmoNQPp4AvNl5xNA9i0w5X9vDUANG8Sp6eoTQDHE
JLbBdA1AMl9HF/HxE0Ck8A1YRX8NQEUBCc509RNA34YCKYeEDUBYo8qE+PgT
QBod9/nIiQ1AakWMO3z8E0BTs+vKCo8NQH3nTfL//xNAjUngm0yUDUAbjUDS

        "]]},
      Annotation[#, "Charting`Private`Tag$29377#1"]& ], 
     TagBox[
      {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJwB4QQe+yFib1JlAgAAAE0AAAACAAAAfedN8v//E8DcWacH3bn6v+Z7FvXb
/BPAGnnVxXew+r9OEN/3t/kTwFSYA4QSp/q/IDlw/W/zE8DQ1l8ASJT6v8KK
kgjg5hPAwFMY+bJu+r8ILtcewM0TwKhNieqII/q/lHRgS4CbE8B2QWvNNI35
v6sBc6QANxPAECkvk4xg+L8FZUcyGV0SwD5Na9Gn1PW/E9jFbKKREcBm7zU7
9nPzv1LDmmMpyhDA3AHxUjUf8b977z1skOMPwJjSwDrAL+2/uHeaaq9PDsBo
nbwmfHfov06SVSD+mQzALBIheA9a479Hnb1OSOwKwCDPzEoIqdy/psd51nNb
CcDIcZFTvkrTv16ElBXPqAfAsNBOTkZEwr9+YAOuCxMGwABMKsLVanY/AC0f
v0OFBMDw8u06bkvDP9qLmYer1QLA4PUTGRS80z8cCmip9EIBwFz6dmakJd0/
azUqBdsc/79+VYT0wqzjP2M33qjDw/u/Lk3sWdKu6D8qeDr/bqT4v+pIN2h7
Wu0/od1TxHlB9b9azYyIpjXxP+eBFTxHGPK/RnhvMdyS8z+6lShF6FbtvzjO
nSemIvY/MOnZ9C+d5r/cs9tvf6b4P0S62wn9VuC/hRuLjCX/+j9wqa/4ERPT
vzYuhvZfiv0/VmYjodJ8ub/swvI0Z+r/P8fM2YozU7g/qnO34j4fAUA6LcGy
UJfTP2Fbm1GUYgJAAnYV3GQZ4D8bBLgqUJADQAcMUIFi7uY/WoJ6KlbXBECD
4NZDcqPtP3DIRNNjGAZAsJuGUH7y8T+Jz0fm10MHQG+iZBDkVvU/JqzwH5aI
CEBeapodh4H4P8ZJ0sO6twlAiVF2OTOc+z8+r7sQ5+AKQAQUleZ/+v4/OupK
hF0jDEDXy4XwhA8BQDjmEmI6UA1AVXtiNprDAkC8t4BmYZYOQGwL6yLOWgRA
Qkon1e7GD0Afq8aWBuoFQFDSavbBeBBAe7hDUw+bB0BA6pSVsRoRQHCmbLY2
LwlAs2LbadSxEUAMAjdiLuUKQOfFdFGcVRJARW1UlSqTDEAHDZINaPYSQBi5
HW9FJA5AqbTL/maME0CScoiRMNcPQA1HWAMLLxRAUoZPLZ22EEDyOQE94sYU
QCpbhFWkfRFAwxAuS71bFUDW5gmik1USQFbSrWw9/RVAzmLlQRIfE0Bq9EnD
8JMWQOEEp/iVIhNAiD/Eq5GWFkD0pmivGSYTQKWKPpQymRZAGevrHCEtE0De
IDNldJ4WQGRz8vcvOxNAU00cB/ioFkD6g/+tTVcTQDym7kr/vRZAJqUZGomP
E0ANWJPSDegWQDlH29AMkxNAKqMNu67qFkBM6ZyHkJYTQEjuh6NP7RZAcS0g
9ZedE0CChHx0kfIWQLy1JtCmqxNA9rBlFhX9FkBSxjOGxMcTQN4JOFocEhdA
ZWj1PEjLE0D8VLJCvRQXQHgKt/PLzhNAGaAsK14XF0CdTjph09UTQFM2Ifyf
HBdA6NZAPOLjE0DHYgqeIycXQPp4AvNl5xNA5K2EhsQpF0ANG8Sp6eoTQAH5
/m5lLBdAMl9HF/HxE0A6j/M/pzEXQEUBCc509RNAWNptKEg0F0BYo8qE+PgT
QHYl6BDpNhdAakWMO3z8E0CScGL5iTkXQH3nTfL//xNAr7vc4So8F0C+yD7X

        "]]},
      Annotation[#, "Charting`Private`Tag$29377#2"]& ]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.8594285025482598`, 
   2.2198025979674303`}, {-2.8530651937489164`, 4.247178303395993}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[76]=",ExpressionUUID->"b99d028f-1448-45ae-820e-ef3372c94feb"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["SparseAssociation", \
"Subsection",ExpressionUUID->"26e3ab04-da92-4478-8bd1-7bbb8b6a2afc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SparseAssociation", "::", "usage"}]], "Input",
 CellLabel->
  "In[448]:=",ExpressionUUID->"2d8ddbf0-decb-4a5e-b02b-e61a020df293"],

Cell[BoxData["\<\"SparseAssociation[array, {{key_11, key_12, ...}, {key_21, \
key_22, ...}, ...}] creates a datastructure that can be used like a \
SparseArray, but with string indices.\"\>"], "Output",
 CellLabel->"Out[448]=",ExpressionUUID->"93b079ea-bd83-4593-aab5-56d87cfae7e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"array", "=", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"2", ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[449]:=",ExpressionUUID->"3064bfcf-43b0-4386-b469-451a894acc6b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[449]=",ExpressionUUID->"ce5d9423-cad5-4726-abd2-4dc9303d7591"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sparseAssoc", "=", 
  RowBox[{"SparseAssociation", "[", 
   RowBox[{
    RowBox[{"SparseArray", "[", 
     RowBox[{"array", ",", "Automatic", ",", "1"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\""}], 
     "}"}], ",", "0"}], "]"}]}]], "Input",
 CellLabel->
  "In[450]:=",ExpressionUUID->"7e7bb879-2ac4-452d-aa51-91875a3c72e3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseAssociation",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"4", ",", "2", ",", "3"}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"4", ",", "2", ",", "3"}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.6666666666666666`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Keys:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Level \"", 
                    TemplateBox[{",", "\",\"", "1"}, "RowWithSeparators"], 
                    "\": \""}, "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"a\"", "\"b\"", "\"c\"", "\"d\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Level \"", 
                    TemplateBox[{",", "\",\"", "2"}, "RowWithSeparators"], 
                    "\": \""}, "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"a\"", "\"b\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Level \"", 
                    TemplateBox[{",", "\",\"", "3"}, "RowWithSeparators"], 
                    "\": \""}, "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"a\"", "\"b\"", "\"c\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  FunctionRepo`SparseAssociation[
   Association[
   "Array" -> SparseArray[
     Automatic, {4, 2, 3}, 0, {
      1, {{0, 5, 10, 12, 16}, {{1, 1}, {1, 3}, {2, 1}, {2, 2}, {2, 3}, {1, 
        1}, {1, 3}, {2, 1}, {2, 2}, {2, 3}, {2, 1}, {2, 2}, {1, 1}, {1, 2}, {
        1, 3}, {2, 3}}}, {1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1}}], 
    "Keys" -> {
      Association["a" -> 1, "b" -> 2, "c" -> 3, "d" -> 4], 
      Association["a" -> 1, "b" -> 2], 
      Association["a" -> 1, "b" -> 2, "c" -> 3]}, "ValidatedQ" -> True]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[450]=",ExpressionUUID->"fac2f676-db53-4a47-bfd3-86cf29b3d541"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sparseAssoc", "===", 
  RowBox[{"SparseAssociation", "[", 
   RowBox[{
    RowBox[{"Normal", "[", "sparseAssoc", "]"}], ",", 
    RowBox[{"Keys", "[", "sparseAssoc", "]"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[451]:=",ExpressionUUID->"a566945a-32dd-4de4-b72c-dffd2df5938b"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[451]=",ExpressionUUID->"4a2b80f1-fff4-4ceb-a181-d1901596b2b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "[", "sparseAssoc", "]"}]], "Input",
 CellLabel->
  "In[453]:=",ExpressionUUID->"05f23729-58f7-4b7e-ac90-017ef67c3b7b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"4", ",", "2", ",", "3"}], "}"}], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"4", ",", "2", ",", "3"}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.6666666666666666`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "3"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "2", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "2", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[
  Automatic, {4, 2, 3}, 0, {
   1, {{0, 5, 10, 12, 16}, {{1, 1}, {1, 3}, {2, 1}, {2, 2}, {2, 3}, {1, 1}, {
     1, 3}, {2, 1}, {2, 2}, {2, 3}, {2, 1}, {2, 2}, {1, 1}, {1, 2}, {1, 3}, {
     2, 3}}}, {1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[453]=",ExpressionUUID->"27fb23eb-6981-4028-98b4-dd3ae4a03455"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Normal", "@", 
   RowBox[{"Normal", "@", "sparseAssoc"}]}], "===", "array"}]], "Input",
 CellLabel->
  "In[454]:=",ExpressionUUID->"cfeb5275-c868-45be-ad86-25c773bb2e6e"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[454]=",ExpressionUUID->"f4df0557-9861-4b3f-bf20-9628e8fc59cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Length", "[", "sparseAssoc", "]"}], "\[IndentingNewLine]", 
 RowBox[{"ArrayDepth", "[", "sparseAssoc", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "sparseAssoc", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Keys", "[", "sparseAssoc", "]"}]}], "Input",
 CellLabel->
  "In[455]:=",ExpressionUUID->"0fbc06dc-8cf1-43d0-8249-71c3a9f068d5"],

Cell[BoxData["4"], "Output",
 CellLabel->
  "Out[455]=",ExpressionUUID->"a367d6cd-5523-4f36-b21b-c3ef5c22da80"],

Cell[BoxData["3"], "Output",
 CellLabel->
  "Out[456]=",ExpressionUUID->"3147e69c-b035-4f5e-9052-65bdf5b3a164"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "2", ",", "3"}], "}"}]], "Output",
 CellLabel->
  "Out[457]=",ExpressionUUID->"61e0910e-077f-4f1c-94d9-5463029eceb3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"d\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[458]=",ExpressionUUID->"859126ce-0f1c-4b73-915f-03e777371a7a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"sparseAssoc", "[", 
  RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "===", 
  RowBox[{"array", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "2", ",", "3"}], "]"}], "]"}]}]}], "Input",
 CellLabel->
  "In[459]:=",ExpressionUUID->"b1a99917-9445-4765-818a-41e8a6e278e7"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[459]=",ExpressionUUID->"9f325cf1-7695-4630-af28-6b351b480a99"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[460]=",ExpressionUUID->"e9fed724-0824-4334-86a9-ca61ed8b63d9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"sparseAssoc", "[", 
   RowBox[{"[", 
    RowBox[{"\"\<a\>\"", ",", "All", ",", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", " ", "3"}], "}"}]}], "]"}], "]"}], "===", 
  RowBox[{"sparseAssoc", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<a\>\"", ",", "\"\<c\>\""}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[461]:=",ExpressionUUID->"e166c204-1b98-4bff-a434-031965edb61d"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[461]=",ExpressionUUID->"58105afb-9f07-4f22-bf8b-a430e8e8b1b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"sparseAssoc", "[", 
  RowBox[{"[", 
   RowBox[{"\"\<b\>\"", ",", "All", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", "\"\<c\>\""}], "}"}]}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Normal", "@", 
   RowBox[{"Normal", "@", "%"}]}], "===", 
  RowBox[{"array", "[", 
   RowBox[{"[", 
    RowBox[{"2", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}]}]}], "Input",
 CellLabel->
  "In[462]:=",ExpressionUUID->"cfe8df5f-8a15-4b21-9c97-dfce33fd9651"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseAssociation",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{0.772061, 0.92462, 0.998703}, {0.772061, 0.92462, 
              0.998703}}, {{0.772061, 0.92462, 0.998703}, {0.772061, 0.92462, 
              0.998703}}}, {{0, 0}, {2, 2}}, {0, 1}], AspectRatio -> 1, Axes -> 
             False, Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{0.772061, 0.92462, 0.998703}, {0.772061, 0.92462, 
              0.998703}}, {{0.772061, 0.92462, 0.998703}, {0.772061, 0.92462, 
              0.998703}}}, {{0, 0}, {2, 2}}, {0, 1}], AspectRatio -> 1, Axes -> 
             False, Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1.`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Keys:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Level \"", 
                    TemplateBox[{",", "\",\"", "1"}, "RowWithSeparators"], 
                    "\": \""}, "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"a\"", "\"b\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Level \"", 
                    TemplateBox[{",", "\",\"", "2"}, "RowWithSeparators"], 
                    "\": \""}, "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"a\"", "\"c\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  FunctionRepo`SparseAssociation[
   Association[
   "Array" -> SparseArray[
     Automatic, {2, 2}, 0, {
      1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {1, 1, 1, 1}}], "Keys" -> {
      Association["a" -> 1, "b" -> 2], 
      Association["a" -> 1, "c" -> 2]}, "ValidatedQ" -> True]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->
  "Out[462]=",ExpressionUUID->"6118583b-78dc-4f66-93d6-fdfe3dcad561"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[463]=",ExpressionUUID->"59c3aafa-1fa3-426d-8302-d6b8c971853f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["#", "2"], "&"}], ",", "sparseAssoc", ",", 
   RowBox[{"{", "3", "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Normal", "@", 
  RowBox[{"Normal", "[", "%", "]"}]}]}], "Input",
 CellLabel->
  "In[464]:=",ExpressionUUID->"b83be3f5-d129-4839-b189-f7b0fa6b4903"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseAssociation",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"4", ",", "2", ",", "3"}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"4", ",", "2", ",", "3"}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.6666666666666666`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Keys:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Level \"", 
                    TemplateBox[{",", "\",\"", "1"}, "RowWithSeparators"], 
                    "\": \""}, "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"a\"", "\"b\"", "\"c\"", "\"d\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Level \"", 
                    TemplateBox[{",", "\",\"", "2"}, "RowWithSeparators"], 
                    "\": \""}, "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"a\"", "\"b\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Level \"", 
                    TemplateBox[{",", "\",\"", "3"}, "RowWithSeparators"], 
                    "\": \""}, "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"a\"", "\"b\"", "\"c\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  FunctionRepo`SparseAssociation[
   Association[
   "Array" -> SparseArray[
     Automatic, {4, 2, 3}, 0, {
      1, {{0, 5, 10, 12, 16}, {{1, 1}, {1, 3}, {2, 1}, {2, 2}, {2, 3}, {1, 
        1}, {1, 3}, {2, 1}, {2, 2}, {2, 3}, {2, 1}, {2, 2}, {1, 1}, {1, 2}, {
        1, 3}, {2, 3}}}, {1, 1, 4, 4, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 4, 1}}], 
    "Keys" -> {
      Association["a" -> 1, "b" -> 2, "c" -> 3, "d" -> 4], 
      Association["a" -> 1, "b" -> 2], 
      Association["a" -> 1, "b" -> 2, "c" -> 3]}, "ValidatedQ" -> True]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->
  "Out[464]=",ExpressionUUID->"1e7d8efd-6524-496e-8b0c-01bfdb98ba61"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "4", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[465]=",ExpressionUUID->"442f3b57-457d-46f8-842a-793487f353ef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayRules", "@", "sparseAssoc"}]], "Input",
 CellLabel->
  "In[466]:=",ExpressionUUID->"d0f379ae-0db3-4388-82ab-1d58591bb2bd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"d\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"d\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"d\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"d\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"_", ",", "_", ",", "_"}], "}"}], "\[Rule]", "0"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[466]=",ExpressionUUID->"955a015b-bfb1-4e76-b1dc-0350eeb7e4ee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SparseAssociation", "[", 
  RowBox[{
   RowBox[{"RandomInteger", "[", 
    RowBox[{"2", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3", ",", "3"}], "}"}]}], "]"}], ",", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"Take", "[", 
      RowBox[{
       RowBox[{"Alphabet", "[", "]"}], ",", "9"}], "]"}], ",", "3"}], "]"}]}],
   "]"}], "\[IndentingNewLine]", 
 RowBox[{"ArrayRules", "[", "%", "]"}]}], "Input",
 CellLabel->
  "In[467]:=",ExpressionUUID->"972cbd88-2090-4ee0-8252-afba106a0a8b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseAssociation",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["19", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"3", ",", "3", ",", "3"}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["19", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"3", ",", "3", ",", "3"}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.7037037037037037`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Keys:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Level \"", 
                    TemplateBox[{",", "\",\"", "1"}, "RowWithSeparators"], 
                    "\": \""}, "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"a\"", "\"b\"", "\"c\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Level \"", 
                    TemplateBox[{",", "\",\"", "2"}, "RowWithSeparators"], 
                    "\": \""}, "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"d\"", "\"e\"", "\"f\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Level \"", 
                    TemplateBox[{",", "\",\"", "3"}, "RowWithSeparators"], 
                    "\": \""}, "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"g\"", "\"h\"", "\"i\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  FunctionRepo`SparseAssociation[
   Association[
   "Array" -> SparseArray[
     Automatic, {3, 3, 3}, 0, {
      1, {{0, 5, 12, 19}, {{1, 1}, {1, 3}, {2, 1}, {3, 1}, {3, 2}, {1, 3}, {2,
         1}, {2, 2}, {2, 3}, {3, 1}, {3, 2}, {3, 3}, {1, 1}, {1, 2}, {2, 2}, {
        2, 3}, {3, 1}, {3, 2}, {3, 3}}}, {1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 
       1, 1, 1, 1, 2, 1, 1}}], "Keys" -> {
      Association["a" -> 1, "b" -> 2, "c" -> 3], 
      Association["d" -> 1, "e" -> 2, "f" -> 3], 
      Association["g" -> 1, "h" -> 2, "i" -> 3]}, "ValidatedQ" -> True]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->
  "Out[467]=",ExpressionUUID->"d49df56a-e5b3-414f-8329-fd5a2f07f4d3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"a\"\>", ",", "\<\"d\"\>", ",", "\<\"g\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"a\"\>", ",", "\<\"d\"\>", ",", "\<\"i\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"a\"\>", ",", "\<\"e\"\>", ",", "\<\"g\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"a\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"a\"\>", ",", "\<\"f\"\>", ",", "\<\"h\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"b\"\>", ",", "\<\"d\"\>", ",", "\<\"i\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"b\"\>", ",", "\<\"e\"\>", ",", "\<\"g\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"b\"\>", ",", "\<\"e\"\>", ",", "\<\"h\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"b\"\>", ",", "\<\"e\"\>", ",", "\<\"i\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"b\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"b\"\>", ",", "\<\"f\"\>", ",", "\<\"h\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"b\"\>", ",", "\<\"f\"\>", ",", "\<\"i\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"c\"\>", ",", "\<\"d\"\>", ",", "\<\"g\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"c\"\>", ",", "\<\"d\"\>", ",", "\<\"h\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"c\"\>", ",", "\<\"e\"\>", ",", "\<\"h\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"c\"\>", ",", "\<\"e\"\>", ",", "\<\"i\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"c\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>"}], "}"}], 
    "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"c\"\>", ",", "\<\"f\"\>", ",", "\<\"h\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"c\"\>", ",", "\<\"f\"\>", ",", "\<\"i\"\>"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"_", ",", "_", ",", "_"}], "}"}], "\[Rule]", "0"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[468]=",ExpressionUUID->"bdb7c762-482b-40af-b236-74811580fc73"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["tukeyMedianPolish", \
"Subsection",ExpressionUUID->"e9e75c8c-5552-4968-99ba-f046fd15b3b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "tukeyMedianPolish"}]], "Input",
 CellLabel->
  "In[103]:=",ExpressionUUID->"5da7d7b8-e171-4eca-a0c1-852ad28cf372"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"tukeyMedianPolish[mat] performs the Tukey median \
polish algorithm to find row and column effects in a data matrix.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" DownValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DownValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DownValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`mat_List", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`outputType", ":", 
                    
                    RowBox[{"\<\"Matrix\"\>", 
                    "|", "\<\"PropertyAssociation\"\>"}], 
                    ":", "\<\"Matrix\"\>"}], ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"FunctionRepo`tukeyMedianPolish`Private`try", "=", 
                    RowBox[{
                    RowBox[{
                    "tukeyMedianPolish", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`opts", "]"}], "[",
                     "FunctionRepo`tukeyMedianPolish`Private`mat", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"FunctionRepo`tukeyMedianPolish`Private`try", ",", 
                    RowBox[{
                    "_", "?", 
                    "FunctionRepo`tukeyMedianPolish`Private`validOutputQ"}]}],
                     "]"}], ",", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`outputType", ",", 
                    "\[IndentingNewLine]", "\<\"PropertyAssociation\"\>", ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`propAssoc", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`try", "]"}], ",", 
                    "\[IndentingNewLine]", "_", ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`try"}], "]"}], 
                    ",", "$Failed"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`compilationOpts", 
                    "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"OptionValue", "[", "Compiled", "]"}], "}"}], 
                    "]"}]}], ",", 
                    "FunctionRepo`tukeyMedianPolish`Private`cf"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"FunctionRepo`tukeyMedianPolish`Private`fun", "=", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`\
itukeyMedianPolish", "[", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`tukeyMedianPolish`Private`opts", "}"}],
                     ",", 
                    RowBox[{
                    "Options", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`\
itukeyMedianPolish", "]"}]}], "]"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"FunctionRepo`tukeyMedianPolish`Private`cf", "=", 
                    RowBox[{"Compile", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`m", ",", "_Real", 
                    ",", "2"}], "}"}], "}"}], ",", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`fun", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`m", "]"}], ",", 
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`compilationOpts", 
                    ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}]}], "]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{
                    RowBox[{"FunctionRepo`tukeyMedianPolish`Private`cf", "[", 
                    RowBox[{"RandomReal", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}]}], "]"}], "]"}], ",", 
                    "NumericQ"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    "tukeyMedianPolish", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`opts", "]"}], "=",
                     "FunctionRepo`tukeyMedianPolish`Private`cf"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"tukeyMedianPolish", "::", "compileFail"}], 
                    "MessageName"], "]"}], ";", "$Failed"}]}], "]"}]}]}], 
                    "]"}], "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`compilationOpts", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], 
                    "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`mat_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MatrixQ", "[", 
                    RowBox[{"#1", ",", "NumericQ"}], "]"}], "&"}], ")"}]}], 
                    "]"}], "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{
                    "Dimensions", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`mat", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "Positive"}], ",", 
                    RowBox[{"_Integer", "?", "Positive"}]}], "}"}]}], "]"}]}],
                     ":=", 
                    RowBox[{
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`\
itukeyMedianPolish", "[", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"FilterRules", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "FunctionRepo`tukeyMedianPolish`Private`opts", "}"}],
                     ",", 
                    RowBox[{
                    "Options", "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`\
itukeyMedianPolish", "]"}]}], "]"}]}], "]"}], "[", 
                    "FunctionRepo`tukeyMedianPolish`Private`mat", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], "|", 
                    RowBox[{"_", "?", "MatrixQ"}]}], "]"}], ":=", 
                    RowBox[{"{", 
                    RowBox[{"{", "}"}], "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"tukeyMedianPolish", "[", 
                    RowBox[{
                    "FunctionRepo`tukeyMedianPolish`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", "_", 
                    "]"}], ":=", "$Failed"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   PaneSelectorBox[{True->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    TemplateBox[{"\[ThickSpace]", "\"\[ThickSpace]\"", 
                    StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False], 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpener"]]},
                    "RowWithSeparators"], True->
                    TemplateBox[{"\[ThickSpace]", "\"\[ThickSpace]\"", 
                    StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False], 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    False),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"], False->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    TemplateBox[{"\[ThickSpace]", "\"\[ThickSpace]\"", 
                    StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False], 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpener"]]},
                    "RowWithSeparators"], True->
                    TemplateBox[{"\[ThickSpace]", "\"\[ThickSpace]\"", 
                    StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False], 
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    True),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]]], 
                   PaneSelectorBox[{True->GridBox[{
                    {
                    RowBox[{"MaxIterations", "\[Rule]", "100"}]},
                    {
                    
                    RowBox[{"\<\"ConvergenceTest\"\>", "\[Rule]", 
                    "Automatic"}]},
                    {
                    RowBox[{"Tolerance", "\[Rule]", 
                    RowBox[{"Scaled", "[", "0.0001`", "]"}]}]},
                    {
                    
                    RowBox[{"\<\"LocationEstimator\"\>", "\[Rule]", 
                    "Median"}]},
                    {
                    RowBox[{"Compiled", "\[Rule]", "False"}]},
                    {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[InvisibleSpace]\"", "5", "\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.}}}], False->
                    RowBox[{
                    RowBox[{"MaxIterations", "\[Rule]", "100"}], 
                    "\[ThinSpace]", 
                    StyleBox["\<\"\[Ellipsis]\"\>", "InformationRowOpener",
                    StripOnInput->False], "\[ThinSpace]", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[InvisibleSpace]\"", "5", "\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]],
                    BaselinePosition->Baseline,
                    ImageSize->Automatic]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"FunctionRepo`tukeyMedianPolish\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"tukeyMedianPolish[mat] performs the Tukey median \
polish algorithm to find row and column effects in a data matrix.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {3., 10.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {3., 10.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "tukeyMedianPolish[mat] performs the Tukey median polish algorithm to \
find row and column effects in a data matrix.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, FunctionRepo`tukeyMedianPolish, {
      FunctionRepo`tukeyMedianPolish[
         Pattern[FunctionRepo`tukeyMedianPolish`Private`mat, 
          Blank[List]], 
         Optional[
          Pattern[FunctionRepo`tukeyMedianPolish`Private`outputType, 
           Alternatives["Matrix", "PropertyAssociation"]], "Matrix"], 
         Pattern[FunctionRepo`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]] :> 
       With[{FunctionRepo`tukeyMedianPolish`Private`try = 
          FunctionRepo`tukeyMedianPolish[
           FunctionRepo`tukeyMedianPolish`Private`opts][
           FunctionRepo`tukeyMedianPolish`Private`mat]}, 
         If[
          MatchQ[FunctionRepo`tukeyMedianPolish`Private`try, 
           PatternTest[
            Blank[], FunctionRepo`tukeyMedianPolish`Private`validOutputQ]], 
          Switch[
          FunctionRepo`tukeyMedianPolish`Private`outputType, 
           "PropertyAssociation", 
           FunctionRepo`tukeyMedianPolish`Private`propAssoc[
           FunctionRepo`tukeyMedianPolish`Private`try], 
           Blank[], FunctionRepo`tukeyMedianPolish`Private`try], $Failed]], 
       FunctionRepo`tukeyMedianPolish[
         Pattern[FunctionRepo`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]] :> 
       Module[{FunctionRepo`tukeyMedianPolish`Private`compilationOpts = 
          Flatten[{
             OptionValue[Compiled]}], 
          FunctionRepo`tukeyMedianPolish`Private`cf}, 
         Condition[
          
          With[{FunctionRepo`tukeyMedianPolish`Private`fun = 
            FunctionRepo`tukeyMedianPolish`Private`itukeyMedianPolish[
              Apply[Sequence, 
               FilterRules[{FunctionRepo`tukeyMedianPolish`Private`opts}, 
                Options[
                FunctionRepo`tukeyMedianPolish`Private`itukeyMedianPolish]]]]}\
, FunctionRepo`tukeyMedianPolish`Private`cf = 
            Compile[{{FunctionRepo`tukeyMedianPolish`Private`m, 
                Blank[Real], 2}}, 
              FunctionRepo`tukeyMedianPolish`Private`fun[
              FunctionRepo`tukeyMedianPolish`Private`m], 
              Evaluate[
               Apply[Sequence, 
                Cases[FunctionRepo`tukeyMedianPolish`Private`compilationOpts, 
                 OptionsPattern[]]]]]; If[
             MatrixQ[
              FunctionRepo`tukeyMedianPolish`Private`cf[
               RandomReal[1, {3, 3}]], NumericQ], 
             FunctionRepo`tukeyMedianPolish[
              FunctionRepo`tukeyMedianPolish`Private`opts] = 
             FunctionRepo`tukeyMedianPolish`Private`cf, Message[
               MessageName[
               FunctionRepo`tukeyMedianPolish, "compileFail"]]; $Failed]], 
          MatchQ[
          FunctionRepo`tukeyMedianPolish`Private`compilationOpts, {True, 
            OptionsPattern[]}]]]}], "SubValues" -> 
    Information`InformationValueForm[
     SubValues, FunctionRepo`tukeyMedianPolish, {Condition[
         FunctionRepo`tukeyMedianPolish[
          Pattern[FunctionRepo`tukeyMedianPolish`Private`opts, 
           OptionsPattern[]]][
          PatternTest[
           Pattern[FunctionRepo`tukeyMedianPolish`Private`mat, 
            Blank[]], MatrixQ[#, NumericQ]& ]], 
         MatchQ[
          Dimensions[FunctionRepo`tukeyMedianPolish`Private`mat], {
           PatternTest[
            Blank[Integer], Positive], 
           PatternTest[
            Blank[Integer], Positive]}]] :> 
       FunctionRepo`tukeyMedianPolish`Private`itukeyMedianPolish[
         Apply[Sequence, 
          FilterRules[{FunctionRepo`tukeyMedianPolish`Private`opts}, 
           Options[
           FunctionRepo`tukeyMedianPolish`Private`itukeyMedianPolish]]]][
        FunctionRepo`tukeyMedianPolish`Private`mat], 
       FunctionRepo`tukeyMedianPolish[
         Pattern[FunctionRepo`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]][
         Alternatives[{}, 
          PatternTest[
           Blank[], MatrixQ]]] :> {{}}, FunctionRepo`tukeyMedianPolish[
         Pattern[FunctionRepo`tukeyMedianPolish`Private`opts, 
          OptionsPattern[]]][
         Blank[]] :> $Failed}], "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     MaxIterations -> 100, "ConvergenceTest" -> Automatic, Tolerance -> 
      Scaled[0.0001], "LocationEstimator" -> Median, Compiled -> False}, 
    "Attributes" -> {}, "FullName" -> "FunctionRepo`tukeyMedianPolish"], 
   False]]], "Output",
 CellLabel->"Out[103]=",ExpressionUUID->"2f2d40f1-72c7-44df-b759-5f5852697dc8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"matrix", "=", 
   RowBox[{"N", "@", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"10", ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "6"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", "matrix", "]"}]}], "Input",
 CellChangeTimes->{{3.791273680562056*^9, 3.791273714049474*^9}, {
  3.7912737784727316`*^9, 3.791273778660079*^9}, {3.7912739431915703`*^9, 
  3.7912739436836433`*^9}, {3.7912745920644417`*^9, 3.791274592298622*^9}},
 CellLabel->"In[104]:=",
 CellID->443871870,ExpressionUUID->"ddd76005-0bdf-4eef-a2b1-e27c86ce4923"],

Cell[BoxData[
 TagBox[GridBox[{
    {"7.`", "10.`", "10.`", "10.`", "4.`", "4.`"},
    {"0.`", "4.`", "0.`", "2.`", "1.`", "9.`"},
    {"6.`", "6.`", "7.`", "6.`", "7.`", "2.`"},
    {"6.`", "3.`", "6.`", "3.`", "4.`", "1.`"}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellLabel->"Out[105]=",ExpressionUUID->"9e8869e6-008a-4657-a007-b5be35cc06b3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"polish", " ", "=", " ", 
   RowBox[{"tukeyMedianPolish", "[", "matrix", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"polish", ",", 
   RowBox[{"Dividers", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], "\[Rule]", "True"}], ",", 
      RowBox[{
       RowBox[{"-", "2"}], "\[Rule]", "True"}]}], "}"}]}]}], "]"}]}], "Input",
 CellLabel->"In[106]:=",
 CellID->19768148,ExpressionUUID->"9dfa27c0-9231-488f-a277-9ddedc89e8f9"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"-", "0.75`"}], "0.75`", "0.5`", "1.500579833984375`", 
     RowBox[{"-", "3.49993896484375`"}], 
     RowBox[{"-", "0.5`"}], "3.`"},
    {
     RowBox[{"-", "1.2503204345703125`"}], "1.2496795654296875`", 
     RowBox[{"-", "3.0003204345703125`"}], "0.0002593994140625`", 
     RowBox[{"-", "0.0002593994140625`"}], "10.999679565429688`", 
     RowBox[{"-", "3.4996795654296875`"}]},
    {"0.7497100830078125`", 
     RowBox[{"-", "0.7502899169921875`"}], 
     RowBox[{"-", "0.0002899169921875`"}], "0.0002899169921875`", 
     "1.9997711181640625`", 
     RowBox[{"-", "0.0002899169921875`"}], "0.5002899169921875`"},
    {"1.75`", 
     RowBox[{"-", "2.75`"}], "0.`", 
     RowBox[{"-", "1.999420166015625`"}], "0.00006103515625`", "0.`", 
     RowBox[{"-", "0.5`"}]},
    {
     RowBox[{"-", "0.3747100830078125`"}], "1.1252899169921875`", 
     "1.3752899169921875`", "0.3747100830078125`", 
     RowBox[{"-", "0.6247711181640625`"}], 
     RowBox[{"-", "3.6247100830078125`"}], "5.1247100830078125`"}
   },
   AutoDelete->False,
   GridBoxDividers->{
    "ColumnsIndexed" -> {-2 -> True}, "RowsIndexed" -> {-2 -> True}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellLabel->"Out[107]=",ExpressionUUID->"7accbc18-b6c7-42c4-873f-eec877d034c5"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["multiSet", \
"Subsection",ExpressionUUID->"9231c90f-9978-4d21-8d57-134232cfc8ba"],

Cell[BoxData[
 RowBox[{"<<", "FunctionRepo`"}]], "Input",
 CellLabel->"In[56]:=",ExpressionUUID->"d6af41e2-bf1e-474c-a13b-c339d75d83b2"],

Cell[BoxData[
 RowBox[{"?", "multiSet"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"8b2d7699-c36a-4db5-af75-471c049c21d9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Union", "[", 
   RowBox[{
    RowBox[{"multiSet", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
    RowBox[{"multiSet", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2", ",", "1", ",", "3"}], "}"}], "]"}]}], "]"}], "//",
   "Normal"}]], "Input",
 CellLabel->"In[50]:=",ExpressionUUID->"f8e07950-295d-4aab-acd7-464a9303bdbb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "2", ",", "2", ",", "3"}], "}"}]], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"56699f00-5640-40b2-a59a-c6802adee5db"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Intersection", "[", 
  RowBox[{
   RowBox[{"multiSet", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "2", ",", "3", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"multiSet", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1", ",", "3"}], "}"}], "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"0bdb69d7-c67e-4331-9214-522c4a4e1f6d"],

Cell[BoxData[
 RowBox[{"multiSet", "[", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "2"}], ",", 
    RowBox[{"3", "\[Rule]", "1"}]}], "\[RightAssociation]"}], "]"}]], "Output",
 CellLabel->"Out[65]=",ExpressionUUID->"90f4ab96-2a8d-4b1a-8cd2-7bf50ac2735c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Values", "@", 
  RowBox[{"Complement", "[", 
   RowBox[{
    RowBox[{"multiSet", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
    RowBox[{"multiSet", "[", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "n"}], ",", 
       RowBox[{"2", "\[Rule]", "2"}], ",", 
       RowBox[{"3", "\[Rule]", "1"}]}], "\[RightAssociation]"}], "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"f5a9f0fc-a4b0-470b-91ec-142556d34b9a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", "-", "n"}], "}"}]], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"c80bc8ae-604b-46bd-8f87-0d7877ab3ba8"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["checkboxLegended", "Subsection"]], \
"Subsection",ExpressionUUID->"491c85ee-eb96-489a-9de7-eeb2de507160"],

Cell[BoxData[
 RowBox[{"<<", "FunctionRepo`"}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"53be8ef7-771a-4971-9d48-ba3020b02e48"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataset", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Dataset1\>\"", "\[Rule]", " ", 
      RowBox[{"Range", "[", "10", "]"}]}], ",", 
     RowBox[{"\"\<Dataset2\>\"", "\[Rule]", " ", 
      RowBox[{"Range", "[", 
       RowBox[{"10", ",", "1", ",", 
        RowBox[{"-", "1"}]}], "]"}]}]}], "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"checkboxLegended", "[", "\[IndentingNewLine]", 
  RowBox[{"ListPlot", "[", "dataset", "]"}], "\[IndentingNewLine]", 
  "]"}]}], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"68f7efbd-2b69-4440-9bd3-9848271a09cc"],

Cell[BoxData[
 DynamicModuleBox[{FunctionRepo`checkboxLegended`Private`opacity$$ = 
  Association["Dataset1" -> True, "Dataset2" -> True]}, 
  TemplateBox[{
    GraphicsBox[{{}, {{{
         StyleBox[{
           
           PointBox[{{1., 1.}, {2., 2.}, {3., 3.}, {4., 4.}, {5., 5.}, {6., 
            6.}, {7., 7.}, {8., 8.}, {9., 9.}, {10., 10.}}]}, {{
            Directive[
             PointSize[0.012833333333333334`], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6], 
             Opacity[
              Dynamic[
               Boole[
                TrueQ[
                 Lookup[
                 FunctionRepo`checkboxLegended`Private`opacity$$, "Dataset1", 
                  True]]], 
               TrackedSymbols :> {
                FunctionRepo`checkboxLegended`Private`opacity$$}]]]}}, 
          StripOnInput -> False]}, {
         StyleBox[{
           
           PointBox[{{1., 10.}, {2., 9.}, {3., 8.}, {4., 7.}, {5., 6.}, {6., 
            5.}, {7., 4.}, {8., 3.}, {9., 2.}, {10., 1.}}]}, {{
            Directive[
             PointSize[0.012833333333333334`], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6], 
             Opacity[
              Dynamic[
               Boole[
                TrueQ[
                 Lookup[
                 FunctionRepo`checkboxLegended`Private`opacity$$, "Dataset2", 
                  True]]], 
               TrackedSymbols :> {
                FunctionRepo`checkboxLegended`Private`opacity$$}]]]}}, 
          StripOnInput -> False]}}, {
        TagBox[{
          Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended, Style}, Charting`Private`Tag$7758, {
           1}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended, Style}, Charting`Private`Tag$7758, {
           2}}]& ], {}, {}, {}}, {
        TagBox[{
          Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended, Style}, Charting`Private`Tag$7758, {
           1}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended, Style}, Charting`Private`Tag$7758, {
           2}}]& ], {}, {}, {}}}, {{}, {}}}, {
     DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
      NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
      AxesLabel -> {None, None}, AxesOrigin -> {0., 0}, DisplayFunction :> 
      Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLines -> {None, None}, GridLinesStyle -> Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& )}}, PlotRange -> {{0., 10.}, {0, 10.}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
    FormBox[
     FormBox[
      TagBox[
       GridBox[{{
          ButtonBox[
           
           PaneSelectorBox[{
            True -> "\"Select none\"", False -> "\"Select all\""}, 
            Dynamic[
             TrueQ[
              Apply[And, FunctionRepo`checkboxLegended`Private`opacity$$]], 
             TrackedSymbols :> {
              FunctionRepo`checkboxLegended`Private`opacity$$}], Alignment -> 
            Center], 
           ButtonFunction :> (FunctionRepo`checkboxLegended`Private`opacity$$ = 
            AssociationThread[{"Dataset1", "Dataset2"}, 
              Not[
               TrueQ[
                Apply[
                And, FunctionRepo`checkboxLegended`Private`opacity$$]]]]), 
           ImageSize -> All, Appearance -> Automatic, Evaluator -> Automatic, 
           Method -> "Preemptive"]}, {
          TemplateBox[{
            TemplateBox[{"\[ThinSpace]", "\" \"", 
              CheckboxBox[
               Dynamic[
                FunctionRepo`checkboxLegended`Private`opacity$$["Dataset1"]]],
               "\"Dataset1\""}, "RowWithSeparators"], 
            TemplateBox[{"\[ThinSpace]", "\" \"", 
              CheckboxBox[
               Dynamic[
                FunctionRepo`checkboxLegended`Private`opacity$$["Dataset2"]]],
               "\"Dataset2\""}, "RowWithSeparators"], "None", "None"}, 
           "PointLegend", DisplayFunction -> (FormBox[
             StyleBox[
              StyleBox[
               PaneBox[
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    Opacity[
                    Dynamic[
                    Boole[
                    TrueQ[
                    Lookup[
                    FunctionRepo`checkboxLegended`Private`opacity$$, 
                    "Dataset1", True]]], 
                    TrackedSymbols :> {
                    FunctionRepo`checkboxLegended`Private`opacity$$}]]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    Opacity[
                    Dynamic[
                    Boole[
                    TrueQ[
                    Lookup[
                    FunctionRepo`checkboxLegended`Private`opacity$$, 
                    "Dataset1", True]]], 
                    TrackedSymbols :> {
                    FunctionRepo`checkboxLegended`Private`opacity$$}]]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6], 
                    Opacity[
                    Dynamic[
                    Boole[
                    TrueQ[
                    Lookup[
                    FunctionRepo`checkboxLegended`Private`opacity$$, 
                    "Dataset2", True]]], 
                    TrackedSymbols :> {
                    FunctionRepo`checkboxLegended`Private`opacity$$}]]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6], 
                    Opacity[
                    Dynamic[
                    Boole[
                    TrueQ[
                    Lookup[
                    FunctionRepo`checkboxLegended`Private`opacity$$, 
                    "Dataset2", True]]], 
                    TrackedSymbols :> {
                    FunctionRepo`checkboxLegended`Private`opacity$$}]]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                 "Grid"], Alignment -> Left, AppearanceElements -> None, 
                ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
              FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
              False], TraditionalForm]& ), 
           InterpretationFunction :> (RowBox[{"PointLegend", "[", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    RowBox[{"Opacity", "[", 
                    DynamicBox[
                    ToBoxes[
                    Boole[
                    TrueQ[
                    Lookup[
                    FunctionRepo`checkboxLegended`Private`opacity$$, 
                    "Dataset1", True]]], StandardForm], 
                    TrackedSymbols :> {
                    FunctionRepo`checkboxLegended`Private`opacity$$}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    RowBox[{"Opacity", "[", 
                    DynamicBox[
                    ToBoxes[
                    Boole[
                    TrueQ[
                    Lookup[FunctionRepo`checkboxLegended`Private`opacity$$, 
                    "Dataset2", True]]], StandardForm], 
                    TrackedSymbols :> {
                    FunctionRepo`checkboxLegended`Private`opacity$$}], 
                    "]"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    RowBox[{"Opacity", "[", 
                    DynamicBox[
                    ToBoxes[
                    Boole[
                    TrueQ[
                    Lookup[
                    FunctionRepo`checkboxLegended`Private`opacity$$, 
                    "Dataset1", True]]], StandardForm], 
                    TrackedSymbols :> {
                    FunctionRepo`checkboxLegended`Private`opacity$$}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    RowBox[{"Opacity", "[", 
                    DynamicBox[
                    ToBoxes[
                    Boole[
                    TrueQ[
                    Lookup[
                    FunctionRepo`checkboxLegended`Private`opacity$$, 
                    "Dataset2", True]]], StandardForm], 
                    TrackedSymbols :> {
                    FunctionRepo`checkboxLegended`Private`opacity$$}], 
                    "]"}]}], "]"}]}], "}"}]}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#3, ",", #4}], "}"}]}], "}"}], ",", 
                RowBox[{"LegendMarkers", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
                    "}"}]}], ",", 
                RowBox[{"Joined", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "False"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "False"}], "}"}]}], "}"}]}], ",", 
                RowBox[{"LabelStyle", "\[Rule]", 
                  RowBox[{"{", "}"}]}], ",", 
                RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ),
            Editable -> True]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
      TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(GridBox[{{
       TagBox[
        ItemBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
        "SkipImageSizeLevel"], 
       ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> Automatic, 
     BaselinePosition -> {1, 1}]& ),
   Editable->True,
   InterpretationFunction->(RowBox[{"Legended", "[", 
      RowBox[{#, ",", 
        RowBox[{"Placed", "[", 
          RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )],
  DynamicModuleValues:>{}]], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"a36e8284-73fa-4f4a-bd58-b5e5faef31b9"]
}, Open  ]]
}, Closed]]
},
WindowSize->{1810, 888},
WindowMargins->{{Automatic, 44}, {31, Automatic}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
ShowGroupOpener->True,
TrackCellChangeTimes->False,
Magnification:>1.3 Inherited,
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"9220aa73-8720-4446-a63d-8589ef2eb51f"
]

